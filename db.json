{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/awk-disc.md","hash":"1b06a74c23d757f78ff8e64b57b9aa3bcf7e36de","modified":1541508441993},{"_id":"source/_posts/cplusplus-virtual-function.md","hash":"d49fa58dba43886dcb8349e6dccd5380df09aa63","modified":1541508403334},{"_id":"source/_posts/fix-your-timestep.md","hash":"8ba8e6d9fd3c86437876973697c92f4250cce291","modified":1541508456357},{"_id":"source/_posts/functional-programming.md","hash":"94f79de8712f018405573ad04fa52830b59f05a2","modified":1541508433179},{"_id":"source/_posts/markdown-sample.md","hash":"7fd2fb817dc603b729a20de46afbdd8020496ee3","modified":1541508417285},{"_id":"source/_posts/markdown-syntax.md","hash":"da557d78b73c077b6cb1fc3911a4d0526773145e","modified":1541508425531},{"_id":"source/_posts/vim.md","hash":"139addd55a1fc0604324b83fe828b7c728cbb231","modified":1541508410278},{"_id":"source/about/index.md","hash":"7940a4706ccb4adaf53e5b82d4e8e4a55a8c16e5","modified":1541511199782},{"_id":"source/temp/FFMpeg-Tutorial-01-Making-Screencaps.md","hash":"a060f9003e4dd19ad7f30652cfebea9ee722e0fd","modified":1541508465160},{"_id":"source/_posts/english-900.md","hash":"3bd70eff117a6694f7ca6cfa9159f478639e766c","modified":1541508449324},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146580},{"_id":"public/temp/FFMpeg-Tutorial-01-Making-Screencaps.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146580},{"_id":"public/2018/04/25/fix-your-timestep/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146581},{"_id":"public/2018/03/05/english-900/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146581},{"_id":"public/2016/06/15/awk-disc/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146581},{"_id":"public/2015/12/28/functional-programming/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146581},{"_id":"public/2015/12/09/markdown-syntax/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146581},{"_id":"public/2015/11/17/markdown-sample/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146581},{"_id":"public/2015/11/09/cplusplus-virtual-function/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146581},{"_id":"public/2015/11/09/vim/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146582},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146582},{"_id":"public/archives/2015/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146582},{"_id":"public/archives/2015/11/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146582},{"_id":"public/archives/2015/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146582},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146582},{"_id":"public/archives/2016/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146582},{"_id":"public/archives/2018/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146582},{"_id":"public/archives/2018/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146582},{"_id":"public/archives/2018/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146583},{"_id":"public/tags/awk/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146583},{"_id":"public/tags/c/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146583},{"_id":"public/tags/markdown/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146583},{"_id":"public/tags/vim/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146583},{"_id":"public/tags/game/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146583},{"_id":"public/tags/functional/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146583},{"_id":"public/tags/english/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146583},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541556146585}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2015-11-09T02:12:20.000Z","_content":"\n胡萌，大学本科。从事车载应用 UI 框架，计算机图形开发。研究方向为计算机图形学，研究兴趣为机器学习、Android 开发等热门技术。曾任职于车载软件公司，工作6年，负责 UI Framework 的开发与维护工作，Render Engine 以及 Android 系统支持的开发。现任职于 Alibaba 淘宝技术事业部，负责视频质量检测算法开发。\n\n技能：Linux 操作系统编程，Qt, OpenGLES, OpenCV, Android。熟悉 Docker, Deep Learning.\n\n语言：C，C++，Python，Java，Shell","source":"about/index.md","raw":"---\ntitle: about\ndate: 2015-11-09 18:12:20 +08:00\n---\n\n胡萌，大学本科。从事车载应用 UI 框架，计算机图形开发。研究方向为计算机图形学，研究兴趣为机器学习、Android 开发等热门技术。曾任职于车载软件公司，工作6年，负责 UI Framework 的开发与维护工作，Render Engine 以及 Android 系统支持的开发。现任职于 Alibaba 淘宝技术事业部，负责视频质量检测算法开发。\n\n技能：Linux 操作系统编程，Qt, OpenGLES, OpenCV, Android。熟悉 Docker, Deep Learning.\n\n语言：C，C++，Python，Java，Shell","updated":"2018-11-06T13:33:19.782Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjo6iq742000g51vhgyoiy8ba","content":"<p>胡萌，大学本科。从事车载应用 UI 框架，计算机图形开发。研究方向为计算机图形学，研究兴趣为机器学习、Android 开发等热门技术。曾任职于车载软件公司，工作6年，负责 UI Framework 的开发与维护工作，Render Engine 以及 Android 系统支持的开发。现任职于 Alibaba 淘宝技术事业部，负责视频质量检测算法开发。</p>\n<p>技能：Linux 操作系统编程，Qt, OpenGLES, OpenCV, Android。熟悉 Docker, Deep Learning.</p>\n<p>语言：C，C++，Python，Java，Shell</p>\n","site":{"data":{}},"excerpt":"","more":"<p>胡萌，大学本科。从事车载应用 UI 框架，计算机图形开发。研究方向为计算机图形学，研究兴趣为机器学习、Android 开发等热门技术。曾任职于车载软件公司，工作6年，负责 UI Framework 的开发与维护工作，Render Engine 以及 Android 系统支持的开发。现任职于 Alibaba 淘宝技术事业部，负责视频质量检测算法开发。</p>\n<p>技能：Linux 操作系统编程，Qt, OpenGLES, OpenCV, Android。熟悉 Docker, Deep Learning.</p>\n<p>语言：C，C++，Python，Java，Shell</p>\n"},{"title":"Tutorial 01: Making Screencaps","date":"2018-08-19T18:53:10.000Z","tags":"FFMpeg,Tutorial,SDL","_content":"\n翻译[原文地址](http://dranger.com/ffmpeg/tutorial01.html)\n\nCode:[tutorial01.c](http://dranger.com/ffmpeg/tutorial01.c)\n\n### 概述","source":"temp/FFMpeg-Tutorial-01-Making-Screencaps.md","raw":"---\ntitle: \"Tutorial 01: Making Screencaps\"\ndate: 2018-08-20 10:53:10 +08:00\ntags: FFMpeg,Tutorial,SDL\n---\n\n翻译[原文地址](http://dranger.com/ffmpeg/tutorial01.html)\n\nCode:[tutorial01.c](http://dranger.com/ffmpeg/tutorial01.c)\n\n### 概述","updated":"2018-11-06T12:47:45.160Z","path":"temp/FFMpeg-Tutorial-01-Making-Screencaps.html","comments":1,"layout":"page","_id":"cjo6iq744000j51vhcvzs7bd3","content":"<p>翻译<a href=\"http://dranger.com/ffmpeg/tutorial01.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>Code:<a href=\"http://dranger.com/ffmpeg/tutorial01.c\" target=\"_blank\" rel=\"noopener\">tutorial01.c</a></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3>","site":{"data":{}},"excerpt":"","more":"<p>翻译<a href=\"http://dranger.com/ffmpeg/tutorial01.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>Code:<a href=\"http://dranger.com/ffmpeg/tutorial01.c\" target=\"_blank\" rel=\"noopener\">tutorial01.c</a></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3>"}],"Post":[{"title":"awk 使用简介","date":"2016-06-15T04:45:40.000Z","_content":"\nAwk是一个使用很方便的编程语言，特别在文本处理方面。这是一篇简短的使用说明书，由于笔者不是经常使用Awk，而每次要用的时候都会忘掉一些语法和技巧，特此记一篇使用说明。本文大部分内容摘抄自[《AWK程序设计语言》](https://github.com/wuzhouhui/awk)第一章。\n\n## 开始\n\n首先假设我们有一个数据文件emp.data，这个文件包含有名字，每小时工资，工作时长，每一行代表一个雇员的纪录，就像这样\n\n| Beth | 4.00 | 0 |\n| Dan | 3.75 | 0 |\n| Kathy | 4.00 | 10 |\n| Mark | 5.00 | 20 |\n| Mary | 5.50 | 22 |\n| Susie | 4.25 | 18 |\n\n一些变量的含义：\n\n* $0表示整行数据\n* $1，$2，$3表示第一列，第二列，第三列的数据，依次类推。如第一行数据$1==Beth，$2==4.00\n* NF，字段的数量。如$NF为最后一个字段\n* NR，到目前为止，读取到的行数。\n\n命令行输入的格式：\n\n```\n$ awk 'command' data\n```\n\n被运行的程序用**单引号**包围起来，data为输入的数据文件。被单引号包围的部分是一个完整的awk程序。它由一个单独的**模式－动作**语句组成，即*`pattern { action }`*。如`awk '$3 > 0 { print $1, $2 * $3 }' emp.data`。`$3 > 0`是模式，动作为`{ print $1, $2 * $3 }`。\n\n## 运行AWK程序\n\n运行一个awk程序有多种方式\n\n* `$ awk 'program' input files`\n* `$ awk 'program'`接下来一行一行的输入你的数据\n* `$ awk -f progfile optional list of files`-f选项告诉awk从文件中提取程序。\n\n## 输出 print, printf\n\nprint可以直接输出数据，字符串等。如 { print NR, $1, $2 * $3, }\nprintf可以做格式化输出，printf(*format*, *value1*, *value2*,...,*valuen*)，format中的格式和c语言类似。\n\n## BEGIN 与 END\n\nBEGIN在文件的第一行处理之前被匹配（执行），END在文件的最后一行处理之后匹配。\n\n## 流程控制语句\n\n支持 If-Else语句，while语句和for语句。它们只能用在action中。格式如下：\n\nIf-Else语句\n``` shell\n$2 > 6 { n = n + 1; pay = pay + $2 * $3 }\nEND { if (n > 0)\n        print n, \"employees, total pay is\", pay,\n                 \"average pay is\", pay/n\n      else\n        print \"no employees are paid more than $6/hour\"\n    }\n```\n\nWhile语句\n``` shell\n{   i = 1\n    while (i <= $3) {\n        printf(\"\\t%.2f\\n\", $1 * (1 + $2) ^ i)\n        i = i + 1\n    }\n}\n```\n\nFor语句\n``` shell\n{   for (i = 1; i <= $3; i = i + 1)\n        printf(\"\\t%.2f\\n\", $1 * (1 + $2) ^ i)\n}\n```\n\n## 数组\n``` shell\n{ line[NR] = $0 }\nEND { i = NR\n      while (i > 0) {\n          print line[i]\n          i = i - 1\n      }\n    }\n```\n\n## 实用“一行”手册\n\n1. 输入行的总数\n\n       END { print NR }\n\n2. 打印第10行\n\n       NR == 10\n\n3. 打印每一个输入的最后一个字段\n\n       { print $NF }\n\n4. 打印最后一行的最后一个字段\n\n        { field = $NF }\n        END { print field }\n\n5. 打印字段数多于4个的输入行\n\n        NF > 4\n\n6. 打印最后一个字段值大于4的输入行\n\n        $NF > 4\n\n7. 打印所有输入行的字段数的总和\n\n        { nf = nf + NF }\n        END { print nf }\n\n8. 打印包含Beth 的行的数量\n\n        /Beth/ { nlines = nlines + 1 }\n        END { print nlines }\n\n9. 打印具有最大值的第一个字段, 以及包含它的行(假设$1 总是正的)\n\n        $1 > max { max = $1; maxline = $0 }\n        END { print max, maxline }\n\n10. 打印至少包含一个字段的行\n\n        NF > 0\n\n11. 打印长度超过80 个字符的行\n\n        length($0) > 80\n12. 在每一行的前面加上它的字段数\n\n        { print NF, $0 }\n\n13. 打印每一行的第1 与第2 个字段, 但顺序相反\n\n        { print $2, $1 }\n\n14. 交换每一行的第1 与第2 个字段, 并打印该行\n\n        { temp = $1; $1 = $2; $2 = temp; print }\n\n15. 将每一行的第一个字段用行号代替\n\n        { $1 = NR; print }\n\n16. 打印删除了第2 个字段后的行\n\n        { $2 = \"\"; print }\n\n17. 将每一行的字段按逆序打印\n\n        { for (i = NF; i > 0; i = i - 1) printf(\"%s \", $i)  \n            printf(\"\\n\")  \n        }\n\n18. 打印每一行的所有字段值之和\n\n        { sum = 0\n            for (i = 1; i <= NF; i = i + 1) sum = sum + $i\n            print sum\n        }\n\n19. 将所有行的所有字段值累加起来\n\n        { for (i = 1; i <= NF; i = i + 1) sum = sum + $i }\n        END { print sum }\n\n20. 将每一行的每一个字段用它的绝对值替换\n\n        { for (i = 1; i <= NF; i = i + 1) if ($i < 0) $i = -$i\n            print $i\n        }\n","source":"_posts/awk-disc.md","raw":"---\ntitle: \"awk 使用简介\"\ndate: 2016-06-15 20:45:40 +08:00\ntags: awk\n---\n\nAwk是一个使用很方便的编程语言，特别在文本处理方面。这是一篇简短的使用说明书，由于笔者不是经常使用Awk，而每次要用的时候都会忘掉一些语法和技巧，特此记一篇使用说明。本文大部分内容摘抄自[《AWK程序设计语言》](https://github.com/wuzhouhui/awk)第一章。\n\n## 开始\n\n首先假设我们有一个数据文件emp.data，这个文件包含有名字，每小时工资，工作时长，每一行代表一个雇员的纪录，就像这样\n\n| Beth | 4.00 | 0 |\n| Dan | 3.75 | 0 |\n| Kathy | 4.00 | 10 |\n| Mark | 5.00 | 20 |\n| Mary | 5.50 | 22 |\n| Susie | 4.25 | 18 |\n\n一些变量的含义：\n\n* $0表示整行数据\n* $1，$2，$3表示第一列，第二列，第三列的数据，依次类推。如第一行数据$1==Beth，$2==4.00\n* NF，字段的数量。如$NF为最后一个字段\n* NR，到目前为止，读取到的行数。\n\n命令行输入的格式：\n\n```\n$ awk 'command' data\n```\n\n被运行的程序用**单引号**包围起来，data为输入的数据文件。被单引号包围的部分是一个完整的awk程序。它由一个单独的**模式－动作**语句组成，即*`pattern { action }`*。如`awk '$3 > 0 { print $1, $2 * $3 }' emp.data`。`$3 > 0`是模式，动作为`{ print $1, $2 * $3 }`。\n\n## 运行AWK程序\n\n运行一个awk程序有多种方式\n\n* `$ awk 'program' input files`\n* `$ awk 'program'`接下来一行一行的输入你的数据\n* `$ awk -f progfile optional list of files`-f选项告诉awk从文件中提取程序。\n\n## 输出 print, printf\n\nprint可以直接输出数据，字符串等。如 { print NR, $1, $2 * $3, }\nprintf可以做格式化输出，printf(*format*, *value1*, *value2*,...,*valuen*)，format中的格式和c语言类似。\n\n## BEGIN 与 END\n\nBEGIN在文件的第一行处理之前被匹配（执行），END在文件的最后一行处理之后匹配。\n\n## 流程控制语句\n\n支持 If-Else语句，while语句和for语句。它们只能用在action中。格式如下：\n\nIf-Else语句\n``` shell\n$2 > 6 { n = n + 1; pay = pay + $2 * $3 }\nEND { if (n > 0)\n        print n, \"employees, total pay is\", pay,\n                 \"average pay is\", pay/n\n      else\n        print \"no employees are paid more than $6/hour\"\n    }\n```\n\nWhile语句\n``` shell\n{   i = 1\n    while (i <= $3) {\n        printf(\"\\t%.2f\\n\", $1 * (1 + $2) ^ i)\n        i = i + 1\n    }\n}\n```\n\nFor语句\n``` shell\n{   for (i = 1; i <= $3; i = i + 1)\n        printf(\"\\t%.2f\\n\", $1 * (1 + $2) ^ i)\n}\n```\n\n## 数组\n``` shell\n{ line[NR] = $0 }\nEND { i = NR\n      while (i > 0) {\n          print line[i]\n          i = i - 1\n      }\n    }\n```\n\n## 实用“一行”手册\n\n1. 输入行的总数\n\n       END { print NR }\n\n2. 打印第10行\n\n       NR == 10\n\n3. 打印每一个输入的最后一个字段\n\n       { print $NF }\n\n4. 打印最后一行的最后一个字段\n\n        { field = $NF }\n        END { print field }\n\n5. 打印字段数多于4个的输入行\n\n        NF > 4\n\n6. 打印最后一个字段值大于4的输入行\n\n        $NF > 4\n\n7. 打印所有输入行的字段数的总和\n\n        { nf = nf + NF }\n        END { print nf }\n\n8. 打印包含Beth 的行的数量\n\n        /Beth/ { nlines = nlines + 1 }\n        END { print nlines }\n\n9. 打印具有最大值的第一个字段, 以及包含它的行(假设$1 总是正的)\n\n        $1 > max { max = $1; maxline = $0 }\n        END { print max, maxline }\n\n10. 打印至少包含一个字段的行\n\n        NF > 0\n\n11. 打印长度超过80 个字符的行\n\n        length($0) > 80\n12. 在每一行的前面加上它的字段数\n\n        { print NF, $0 }\n\n13. 打印每一行的第1 与第2 个字段, 但顺序相反\n\n        { print $2, $1 }\n\n14. 交换每一行的第1 与第2 个字段, 并打印该行\n\n        { temp = $1; $1 = $2; $2 = temp; print }\n\n15. 将每一行的第一个字段用行号代替\n\n        { $1 = NR; print }\n\n16. 打印删除了第2 个字段后的行\n\n        { $2 = \"\"; print }\n\n17. 将每一行的字段按逆序打印\n\n        { for (i = NF; i > 0; i = i - 1) printf(\"%s \", $i)  \n            printf(\"\\n\")  \n        }\n\n18. 打印每一行的所有字段值之和\n\n        { sum = 0\n            for (i = 1; i <= NF; i = i + 1) sum = sum + $i\n            print sum\n        }\n\n19. 将所有行的所有字段值累加起来\n\n        { for (i = 1; i <= NF; i = i + 1) sum = sum + $i }\n        END { print sum }\n\n20. 将每一行的每一个字段用它的绝对值替换\n\n        { for (i = 1; i <= NF; i = i + 1) if ($i < 0) $i = -$i\n            print $i\n        }\n","slug":"awk-disc","published":1,"updated":"2018-11-06T12:47:21.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo6iq73m000051vhjukbkyk4","content":"<p>Awk是一个使用很方便的编程语言，特别在文本处理方面。这是一篇简短的使用说明书，由于笔者不是经常使用Awk，而每次要用的时候都会忘掉一些语法和技巧，特此记一篇使用说明。本文大部分内容摘抄自<a href=\"https://github.com/wuzhouhui/awk\" target=\"_blank\" rel=\"noopener\">《AWK程序设计语言》</a>第一章。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>首先假设我们有一个数据文件emp.data，这个文件包含有名字，每小时工资，工作时长，每一行代表一个雇员的纪录，就像这样</p>\n<p>| Beth | 4.00 | 0 |<br>| Dan | 3.75 | 0 |<br>| Kathy | 4.00 | 10 |<br>| Mark | 5.00 | 20 |<br>| Mary | 5.50 | 22 |<br>| Susie | 4.25 | 18 |</p>\n<p>一些变量的含义：</p>\n<ul>\n<li>$0表示整行数据</li>\n<li>$1，$2，$3表示第一列，第二列，第三列的数据，依次类推。如第一行数据$1==Beth，$2==4.00</li>\n<li>NF，字段的数量。如$NF为最后一个字段</li>\n<li>NR，到目前为止，读取到的行数。</li>\n</ul>\n<p>命令行输入的格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ awk &apos;command&apos; data</span><br></pre></td></tr></table></figure>\n<p>被运行的程序用<strong>单引号</strong>包围起来，data为输入的数据文件。被单引号包围的部分是一个完整的awk程序。它由一个单独的<strong>模式－动作</strong>语句组成，即<em><code>pattern { action }</code></em>。如<code>awk &#39;$3 &gt; 0 { print $1, $2 * $3 }&#39; emp.data</code>。<code>$3 &gt; 0</code>是模式，动作为<code>{ print $1, $2 * $3 }</code>。</p>\n<h2 id=\"运行AWK程序\"><a href=\"#运行AWK程序\" class=\"headerlink\" title=\"运行AWK程序\"></a>运行AWK程序</h2><p>运行一个awk程序有多种方式</p>\n<ul>\n<li><code>$ awk &#39;program&#39; input files</code></li>\n<li><code>$ awk &#39;program&#39;</code>接下来一行一行的输入你的数据</li>\n<li><code>$ awk -f progfile optional list of files</code>-f选项告诉awk从文件中提取程序。</li>\n</ul>\n<h2 id=\"输出-print-printf\"><a href=\"#输出-print-printf\" class=\"headerlink\" title=\"输出 print, printf\"></a>输出 print, printf</h2><p>print可以直接输出数据，字符串等。如 { print NR, $1, $2 <em> $3, }<br>printf可以做格式化输出，printf(</em>format<em>, </em>value1<em>, </em>value2<em>,…,</em>valuen*)，format中的格式和c语言类似。</p>\n<h2 id=\"BEGIN-与-END\"><a href=\"#BEGIN-与-END\" class=\"headerlink\" title=\"BEGIN 与 END\"></a>BEGIN 与 END</h2><p>BEGIN在文件的第一行处理之前被匹配（执行），END在文件的最后一行处理之后匹配。</p>\n<h2 id=\"流程控制语句\"><a href=\"#流程控制语句\" class=\"headerlink\" title=\"流程控制语句\"></a>流程控制语句</h2><p>支持 If-Else语句，while语句和for语句。它们只能用在action中。格式如下：</p>\n<p>If-Else语句<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>2 &gt; 6 &#123; n = n + 1; pay = pay + $2 * $3 &#125;</span><br><span class=\"line\">END &#123; if (n &gt; 0)</span><br><span class=\"line\">        print n, \"employees, total pay is\", pay,</span><br><span class=\"line\">                 \"average pay is\", pay/n</span><br><span class=\"line\">      else</span><br><span class=\"line\">        print \"no employees are paid more than $6/hour\"</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>While语句<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;   i = 1</span><br><span class=\"line\">    while (i &lt;= $3) &#123;</span><br><span class=\"line\">        printf(\"\\t%.2f\\n\", $1 * (1 + $2) ^ i)</span><br><span class=\"line\">        i = i + 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>For语句<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;   for (i = 1; i &lt;= $3; i = i + 1)</span><br><span class=\"line\">        printf(\"\\t%.2f\\n\", $1 * (1 + $2) ^ i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; line[NR] = $0 &#125;</span><br><span class=\"line\">END &#123; i = NR</span><br><span class=\"line\">      while (i &gt; 0) &#123;</span><br><span class=\"line\">          print line[i]</span><br><span class=\"line\">          i = i - 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实用“一行”手册\"><a href=\"#实用“一行”手册\" class=\"headerlink\" title=\"实用“一行”手册\"></a>实用“一行”手册</h2><ol>\n<li><p>输入行的总数</p>\n<pre><code>END { print NR }\n</code></pre></li>\n<li><p>打印第10行</p>\n<pre><code>NR == 10\n</code></pre></li>\n<li><p>打印每一个输入的最后一个字段</p>\n<pre><code>{ print $NF }\n</code></pre></li>\n<li><p>打印最后一行的最后一个字段</p>\n<pre><code>{ field = $NF }\nEND { print field }\n</code></pre></li>\n<li><p>打印字段数多于4个的输入行</p>\n<pre><code>NF &gt; 4\n</code></pre></li>\n<li><p>打印最后一个字段值大于4的输入行</p>\n<pre><code>$NF &gt; 4\n</code></pre></li>\n<li><p>打印所有输入行的字段数的总和</p>\n<pre><code>{ nf = nf + NF }\nEND { print nf }\n</code></pre></li>\n<li><p>打印包含Beth 的行的数量</p>\n<pre><code>/Beth/ { nlines = nlines + 1 }\nEND { print nlines }\n</code></pre></li>\n<li><p>打印具有最大值的第一个字段, 以及包含它的行(假设$1 总是正的)</p>\n<pre><code>$1 &gt; max { max = $1; maxline = $0 }\nEND { print max, maxline }\n</code></pre></li>\n<li><p>打印至少包含一个字段的行</p>\n<pre><code>NF &gt; 0\n</code></pre></li>\n<li><p>打印长度超过80 个字符的行</p>\n<pre><code>length($0) &gt; 80\n</code></pre></li>\n<li><p>在每一行的前面加上它的字段数</p>\n<pre><code>{ print NF, $0 }\n</code></pre></li>\n<li><p>打印每一行的第1 与第2 个字段, 但顺序相反</p>\n<pre><code>{ print $2, $1 }\n</code></pre></li>\n<li><p>交换每一行的第1 与第2 个字段, 并打印该行</p>\n<pre><code>{ temp = $1; $1 = $2; $2 = temp; print }\n</code></pre></li>\n<li><p>将每一行的第一个字段用行号代替</p>\n<pre><code>{ $1 = NR; print }\n</code></pre></li>\n<li><p>打印删除了第2 个字段后的行</p>\n<pre><code>{ $2 = &quot;&quot;; print }\n</code></pre></li>\n<li><p>将每一行的字段按逆序打印</p>\n<pre><code>{ for (i = NF; i &gt; 0; i = i - 1) printf(&quot;%s &quot;, $i)  \n    printf(&quot;\\n&quot;)  \n}\n</code></pre></li>\n<li><p>打印每一行的所有字段值之和</p>\n<pre><code>{ sum = 0\n    for (i = 1; i &lt;= NF; i = i + 1) sum = sum + $i\n    print sum\n}\n</code></pre></li>\n<li><p>将所有行的所有字段值累加起来</p>\n<pre><code>{ for (i = 1; i &lt;= NF; i = i + 1) sum = sum + $i }\nEND { print sum }\n</code></pre></li>\n<li><p>将每一行的每一个字段用它的绝对值替换</p>\n<pre><code>{ for (i = 1; i &lt;= NF; i = i + 1) if ($i &lt; 0) $i = -$i\n    print $i\n}\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Awk是一个使用很方便的编程语言，特别在文本处理方面。这是一篇简短的使用说明书，由于笔者不是经常使用Awk，而每次要用的时候都会忘掉一些语法和技巧，特此记一篇使用说明。本文大部分内容摘抄自<a href=\"https://github.com/wuzhouhui/awk\" target=\"_blank\" rel=\"noopener\">《AWK程序设计语言》</a>第一章。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>首先假设我们有一个数据文件emp.data，这个文件包含有名字，每小时工资，工作时长，每一行代表一个雇员的纪录，就像这样</p>\n<p>| Beth | 4.00 | 0 |<br>| Dan | 3.75 | 0 |<br>| Kathy | 4.00 | 10 |<br>| Mark | 5.00 | 20 |<br>| Mary | 5.50 | 22 |<br>| Susie | 4.25 | 18 |</p>\n<p>一些变量的含义：</p>\n<ul>\n<li>$0表示整行数据</li>\n<li>$1，$2，$3表示第一列，第二列，第三列的数据，依次类推。如第一行数据$1==Beth，$2==4.00</li>\n<li>NF，字段的数量。如$NF为最后一个字段</li>\n<li>NR，到目前为止，读取到的行数。</li>\n</ul>\n<p>命令行输入的格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ awk &apos;command&apos; data</span><br></pre></td></tr></table></figure>\n<p>被运行的程序用<strong>单引号</strong>包围起来，data为输入的数据文件。被单引号包围的部分是一个完整的awk程序。它由一个单独的<strong>模式－动作</strong>语句组成，即<em><code>pattern { action }</code></em>。如<code>awk &#39;$3 &gt; 0 { print $1, $2 * $3 }&#39; emp.data</code>。<code>$3 &gt; 0</code>是模式，动作为<code>{ print $1, $2 * $3 }</code>。</p>\n<h2 id=\"运行AWK程序\"><a href=\"#运行AWK程序\" class=\"headerlink\" title=\"运行AWK程序\"></a>运行AWK程序</h2><p>运行一个awk程序有多种方式</p>\n<ul>\n<li><code>$ awk &#39;program&#39; input files</code></li>\n<li><code>$ awk &#39;program&#39;</code>接下来一行一行的输入你的数据</li>\n<li><code>$ awk -f progfile optional list of files</code>-f选项告诉awk从文件中提取程序。</li>\n</ul>\n<h2 id=\"输出-print-printf\"><a href=\"#输出-print-printf\" class=\"headerlink\" title=\"输出 print, printf\"></a>输出 print, printf</h2><p>print可以直接输出数据，字符串等。如 { print NR, $1, $2 <em> $3, }<br>printf可以做格式化输出，printf(</em>format<em>, </em>value1<em>, </em>value2<em>,…,</em>valuen*)，format中的格式和c语言类似。</p>\n<h2 id=\"BEGIN-与-END\"><a href=\"#BEGIN-与-END\" class=\"headerlink\" title=\"BEGIN 与 END\"></a>BEGIN 与 END</h2><p>BEGIN在文件的第一行处理之前被匹配（执行），END在文件的最后一行处理之后匹配。</p>\n<h2 id=\"流程控制语句\"><a href=\"#流程控制语句\" class=\"headerlink\" title=\"流程控制语句\"></a>流程控制语句</h2><p>支持 If-Else语句，while语句和for语句。它们只能用在action中。格式如下：</p>\n<p>If-Else语句<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>2 &gt; 6 &#123; n = n + 1; pay = pay + $2 * $3 &#125;</span><br><span class=\"line\">END &#123; if (n &gt; 0)</span><br><span class=\"line\">        print n, \"employees, total pay is\", pay,</span><br><span class=\"line\">                 \"average pay is\", pay/n</span><br><span class=\"line\">      else</span><br><span class=\"line\">        print \"no employees are paid more than $6/hour\"</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>While语句<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;   i = 1</span><br><span class=\"line\">    while (i &lt;= $3) &#123;</span><br><span class=\"line\">        printf(\"\\t%.2f\\n\", $1 * (1 + $2) ^ i)</span><br><span class=\"line\">        i = i + 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>For语句<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;   for (i = 1; i &lt;= $3; i = i + 1)</span><br><span class=\"line\">        printf(\"\\t%.2f\\n\", $1 * (1 + $2) ^ i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; line[NR] = $0 &#125;</span><br><span class=\"line\">END &#123; i = NR</span><br><span class=\"line\">      while (i &gt; 0) &#123;</span><br><span class=\"line\">          print line[i]</span><br><span class=\"line\">          i = i - 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实用“一行”手册\"><a href=\"#实用“一行”手册\" class=\"headerlink\" title=\"实用“一行”手册\"></a>实用“一行”手册</h2><ol>\n<li><p>输入行的总数</p>\n<pre><code>END { print NR }\n</code></pre></li>\n<li><p>打印第10行</p>\n<pre><code>NR == 10\n</code></pre></li>\n<li><p>打印每一个输入的最后一个字段</p>\n<pre><code>{ print $NF }\n</code></pre></li>\n<li><p>打印最后一行的最后一个字段</p>\n<pre><code>{ field = $NF }\nEND { print field }\n</code></pre></li>\n<li><p>打印字段数多于4个的输入行</p>\n<pre><code>NF &gt; 4\n</code></pre></li>\n<li><p>打印最后一个字段值大于4的输入行</p>\n<pre><code>$NF &gt; 4\n</code></pre></li>\n<li><p>打印所有输入行的字段数的总和</p>\n<pre><code>{ nf = nf + NF }\nEND { print nf }\n</code></pre></li>\n<li><p>打印包含Beth 的行的数量</p>\n<pre><code>/Beth/ { nlines = nlines + 1 }\nEND { print nlines }\n</code></pre></li>\n<li><p>打印具有最大值的第一个字段, 以及包含它的行(假设$1 总是正的)</p>\n<pre><code>$1 &gt; max { max = $1; maxline = $0 }\nEND { print max, maxline }\n</code></pre></li>\n<li><p>打印至少包含一个字段的行</p>\n<pre><code>NF &gt; 0\n</code></pre></li>\n<li><p>打印长度超过80 个字符的行</p>\n<pre><code>length($0) &gt; 80\n</code></pre></li>\n<li><p>在每一行的前面加上它的字段数</p>\n<pre><code>{ print NF, $0 }\n</code></pre></li>\n<li><p>打印每一行的第1 与第2 个字段, 但顺序相反</p>\n<pre><code>{ print $2, $1 }\n</code></pre></li>\n<li><p>交换每一行的第1 与第2 个字段, 并打印该行</p>\n<pre><code>{ temp = $1; $1 = $2; $2 = temp; print }\n</code></pre></li>\n<li><p>将每一行的第一个字段用行号代替</p>\n<pre><code>{ $1 = NR; print }\n</code></pre></li>\n<li><p>打印删除了第2 个字段后的行</p>\n<pre><code>{ $2 = &quot;&quot;; print }\n</code></pre></li>\n<li><p>将每一行的字段按逆序打印</p>\n<pre><code>{ for (i = NF; i &gt; 0; i = i - 1) printf(&quot;%s &quot;, $i)  \n    printf(&quot;\\n&quot;)  \n}\n</code></pre></li>\n<li><p>打印每一行的所有字段值之和</p>\n<pre><code>{ sum = 0\n    for (i = 1; i &lt;= NF; i = i + 1) sum = sum + $i\n    print sum\n}\n</code></pre></li>\n<li><p>将所有行的所有字段值累加起来</p>\n<pre><code>{ for (i = 1; i &lt;= NF; i = i + 1) sum = sum + $i }\nEND { print sum }\n</code></pre></li>\n<li><p>将每一行的每一个字段用它的绝对值替换</p>\n<pre><code>{ for (i = 1; i &lt;= NF; i = i + 1) if ($i &lt; 0) $i = -$i\n    print $i\n}\n</code></pre></li>\n</ol>\n"},{"title":"C++虚析构函数","date":"2015-11-09T02:12:20.000Z","_content":"\n为什么C++ 的父类的析构函数需要加**virtual**关键字？\n\n我们先来看一段实例代码:\n\n``` cpp\nclass Object\n{\npublic:\n    Object()\n    {\n        cout << \"Object() called\" << endl;\n    }\n\n    virtual ~Object()\n    {\n        cout << \"~Object() called\" << endl;\n    }\n};\n\nclass InheritObject : public Object\n{\npublic:\n    InheritObject()\n    {\n        cout << \"InheritObject() called\" << endl;\n    }\n\n    ~InheritObject()\n    {\n        cout << \"~InheritObject() called\" << endl;\n    }\n};\n```\n\n上述代码是一个简单的继承关系，我们下面做一个测试。\n\n``` cpp\nint main()\n{\n    {\n        InheritObject ihtObj;\n    }\n\n    return 0;\n}\n```\n\n编译运行，查看输出结果为：\n\n> Object() called  \n> InheritObject() called  \n> ~InheritObject() called  \n> ~Object() called\n\n这个很容易理解，内存使用的常用方法，先new的后释放，保证不会造成空指针调用。这里解释了子类与父类的构造函数和析构函数调用顺序的问题。\n\n我们在来看另一个测试。\n\n``` cpp\nint main()\n{\n    Object *obj = new InheritObject();\n    delete obj;\n\n    return 0;\n}\n```\n\n编译运行，这次的结果为：\n\n> Object() called  \n> InheritObject() called  \n> ~InheritObject() called  \n> ~Object() called\n\n和上面的输出相同。但是在这次测试中，我们使用父类指针接受了一个子类的对象。那么在delete的时候，我们看到的是父类的指针，怎么才能将子类的内存释放呢？这里就有一个c++的多态机制了，在运行时去决定调用哪个函数，这里就用到了virtual函数的作用了。\n\n综上所述，析构函数上加**virtual**关键字，是为了保证在多态调用中，不会导致内存泄漏。\n","source":"_posts/cplusplus-virtual-function.md","raw":"---\ntitle: \"C++虚析构函数\"\ndate: 2015-11-09 18:12:20 +08:00\ntags: c++\n---\n\n为什么C++ 的父类的析构函数需要加**virtual**关键字？\n\n我们先来看一段实例代码:\n\n``` cpp\nclass Object\n{\npublic:\n    Object()\n    {\n        cout << \"Object() called\" << endl;\n    }\n\n    virtual ~Object()\n    {\n        cout << \"~Object() called\" << endl;\n    }\n};\n\nclass InheritObject : public Object\n{\npublic:\n    InheritObject()\n    {\n        cout << \"InheritObject() called\" << endl;\n    }\n\n    ~InheritObject()\n    {\n        cout << \"~InheritObject() called\" << endl;\n    }\n};\n```\n\n上述代码是一个简单的继承关系，我们下面做一个测试。\n\n``` cpp\nint main()\n{\n    {\n        InheritObject ihtObj;\n    }\n\n    return 0;\n}\n```\n\n编译运行，查看输出结果为：\n\n> Object() called  \n> InheritObject() called  \n> ~InheritObject() called  \n> ~Object() called\n\n这个很容易理解，内存使用的常用方法，先new的后释放，保证不会造成空指针调用。这里解释了子类与父类的构造函数和析构函数调用顺序的问题。\n\n我们在来看另一个测试。\n\n``` cpp\nint main()\n{\n    Object *obj = new InheritObject();\n    delete obj;\n\n    return 0;\n}\n```\n\n编译运行，这次的结果为：\n\n> Object() called  \n> InheritObject() called  \n> ~InheritObject() called  \n> ~Object() called\n\n和上面的输出相同。但是在这次测试中，我们使用父类指针接受了一个子类的对象。那么在delete的时候，我们看到的是父类的指针，怎么才能将子类的内存释放呢？这里就有一个c++的多态机制了，在运行时去决定调用哪个函数，这里就用到了virtual函数的作用了。\n\n综上所述，析构函数上加**virtual**关键字，是为了保证在多态调用中，不会导致内存泄漏。\n","slug":"cplusplus-virtual-function","published":1,"updated":"2018-11-06T12:46:43.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo6iq73r000151vh0nufqbdz","content":"<p>为什么C++ 的父类的析构函数需要加<strong>virtual</strong>关键字？</p>\n<p>我们先来看一段实例代码:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Object()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Object() called\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~Object()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"~Object() called\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritObject</span> :</span> <span class=\"keyword\">public</span> Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    InheritObject()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"InheritObject() called\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~InheritObject()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"~InheritObject() called\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上述代码是一个简单的继承关系，我们下面做一个测试。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        InheritObject ihtObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行，查看输出结果为：</p>\n<blockquote>\n<p>Object() called<br>InheritObject() called<br>~InheritObject() called<br>~Object() called</p>\n</blockquote>\n<p>这个很容易理解，内存使用的常用方法，先new的后释放，保证不会造成空指针调用。这里解释了子类与父类的构造函数和析构函数调用顺序的问题。</p>\n<p>我们在来看另一个测试。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Object *obj = <span class=\"keyword\">new</span> InheritObject();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行，这次的结果为：</p>\n<blockquote>\n<p>Object() called<br>InheritObject() called<br>~InheritObject() called<br>~Object() called</p>\n</blockquote>\n<p>和上面的输出相同。但是在这次测试中，我们使用父类指针接受了一个子类的对象。那么在delete的时候，我们看到的是父类的指针，怎么才能将子类的内存释放呢？这里就有一个c++的多态机制了，在运行时去决定调用哪个函数，这里就用到了virtual函数的作用了。</p>\n<p>综上所述，析构函数上加<strong>virtual</strong>关键字，是为了保证在多态调用中，不会导致内存泄漏。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为什么C++ 的父类的析构函数需要加<strong>virtual</strong>关键字？</p>\n<p>我们先来看一段实例代码:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Object()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Object() called\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~Object()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"~Object() called\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritObject</span> :</span> <span class=\"keyword\">public</span> Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    InheritObject()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"InheritObject() called\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~InheritObject()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"~InheritObject() called\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上述代码是一个简单的继承关系，我们下面做一个测试。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        InheritObject ihtObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行，查看输出结果为：</p>\n<blockquote>\n<p>Object() called<br>InheritObject() called<br>~InheritObject() called<br>~Object() called</p>\n</blockquote>\n<p>这个很容易理解，内存使用的常用方法，先new的后释放，保证不会造成空指针调用。这里解释了子类与父类的构造函数和析构函数调用顺序的问题。</p>\n<p>我们在来看另一个测试。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Object *obj = <span class=\"keyword\">new</span> InheritObject();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行，这次的结果为：</p>\n<blockquote>\n<p>Object() called<br>InheritObject() called<br>~InheritObject() called<br>~Object() called</p>\n</blockquote>\n<p>和上面的输出相同。但是在这次测试中，我们使用父类指针接受了一个子类的对象。那么在delete的时候，我们看到的是父类的指针，怎么才能将子类的内存释放呢？这里就有一个c++的多态机制了，在运行时去决定调用哪个函数，这里就用到了virtual函数的作用了。</p>\n<p>综上所述，析构函数上加<strong>virtual</strong>关键字，是为了保证在多态调用中，不会导致内存泄漏。</p>\n"},{"title":"Markdown Sample","date":"2015-11-17T07:12:20.000Z","_content":"\nA First Level Header\n====================\n\nA Second Level Header\n---------------------\n\nNow is the time for all good men to come to\nthe aid of their country. This is just a\n`regular paragraph`.\n\nThe quick brown fox jumped over the lazy\ndog's back.\n\n### Header 3\n\n> This is a blockquote.\n>\n> This is the second paragraph in the blockquote.\n>\n> ## This is an H2 in a blockquote\n\n### PHRASE EMPHASIS\n\n**Markdown:**\n\nSome of these words *are emphasized*.\nSome of these words _are emphasized also_.\n\nUse two asterisks for **strong emphasis**.\nOr, if you prefer, __use two underscores instead__.\n\n**Output:**\n\n``` xml\n<p>Some of these words <em>are emphasized</em>.\nSome of these words <em>are emphasized also</em>.</p>\n\n<p>Use two asterisks for <strong>strong emphasis</strong>.\nOr, if you prefer, <strong>use two underscores instead</strong>.</p>\n```\n\n### LISTS\nUnordered (bulleted) lists use asterisks, pluses, and hyphens (*, +, and -) as list markers. These three markers are interchangable; this:\n\n*   Candy.\n*   Gum.\n*   Booze.\n\nthis:\n\n+   Candy.\n+   Gum.\n+   Booze.\n\nand this:\n\n-   Candy.\n-   Gum.\n-   Booze.\n\nall produce the same output:\n\n``` xml\n<ul>\n<li>Candy.</li>\n<li>Gum.</li>\n<li>Booze.</li>\n</ul>\n```\n\nOrdered (numbered) lists use regular numbers, followed by periods, as list markers:\n\n``` xml\n1.  Red\n2.  Green\n3.  Blue\n```\n\n**Output:**\n\n``` xml\n<ol>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ol>\n```\n\nIf you put blank lines between items, you’ll get <p> tags for the list item text. You can create multi-paragraph list items by indenting the paragraphs by 4 spaces or 1 tab:\n\n*   A list item.\n\n    With multiple paragraphs.\n\n*   Another item in the list.\n\n**Output:**\n\n``` xml\n<ul>\n<li><p>A list item.</p>\n<p>With multiple paragraphs.</p></li>\n<li><p>Another item in the list.</p></li>\n</ul>\n```\n\n### LINKS\n\nMarkdown supports two styles for creating links: inline and reference. With both styles, you use square brackets to delimit the text you want to turn into a link.\n\nInline-style links use parentheses immediately after the link text. For example:\n\nThis is an [example link](http://example.com/).\n\n**Output:**\n\n``` xml\n<p>This is an <a href=\"http://example.com/\">\nexample link</a>.</p>\n```\n\nOptionally, you may include a title attribute in the parentheses:\n\nThis is an [example link](http://example.com/ \"With a Title\").\n\n**Output:**\n\n``` xml\n<p>This is an <a href=\"http://example.com/\" title=\"With a Title\">\nexample link</a>.</p>\n```\n\nReference-style links allow you to refer to your links by names, which you define elsewhere in your document:\n\nI get 10 times more traffic from [Google][1] than from\n[Yahoo][2] or [MSN][3].\n\n[1]: http://google.com/        \"Google\"\n[2]: http://search.yahoo.com/  \"Yahoo Search\"\n[3]: http://search.msn.com/    \"MSN Search\"\n\n**Output:**\n\n``` xml\n<p>I get 10 times more traffic from <a href=\"http://google.com/\"\ntitle=\"Google\">Google</a> than from <a href=\"http://search.yahoo.com/\"\ntitle=\"Yahoo Search\">Yahoo</a> or <a href=\"http://search.msn.com/\"\ntitle=\"MSN Search\">MSN</a>.</p>\n```\n\nThe title attribute is optional. Link names may contain letters, numbers and spaces, but are not case sensitive:\n\nI start my morning with a cup of coffee and\n\n[The New York Times][NY Times].\n\n[ny times]: http://www.nytimes.com/\n\n**Output:**\n\n``` xml\n<p>I start my morning with a cup of coffee and\n<a href=\"http://www.nytimes.com/\">The New York Times</a>.</p>\n```\n\n### IMAGES\n\nImage syntax is very much like link syntax.\n\nInline (titles are optional):\n\n![alt text](http://lorempixel.com/400/200/ \"Title\")\n\nReference-style:\n\n``` xml\n![alt text][id]\n\n[id]: http://lorempixel.com/400/200/ \"Title\"\n```\nBoth of the above examples produce the same output:\n\n``` xml\n<img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" />\n```\n","source":"_posts/markdown-sample.md","raw":"---\ntitle: \"Markdown Sample\"\ndate: 2015-11-17 23:12:20 +08:00\ntags: markdown\n---\n\nA First Level Header\n====================\n\nA Second Level Header\n---------------------\n\nNow is the time for all good men to come to\nthe aid of their country. This is just a\n`regular paragraph`.\n\nThe quick brown fox jumped over the lazy\ndog's back.\n\n### Header 3\n\n> This is a blockquote.\n>\n> This is the second paragraph in the blockquote.\n>\n> ## This is an H2 in a blockquote\n\n### PHRASE EMPHASIS\n\n**Markdown:**\n\nSome of these words *are emphasized*.\nSome of these words _are emphasized also_.\n\nUse two asterisks for **strong emphasis**.\nOr, if you prefer, __use two underscores instead__.\n\n**Output:**\n\n``` xml\n<p>Some of these words <em>are emphasized</em>.\nSome of these words <em>are emphasized also</em>.</p>\n\n<p>Use two asterisks for <strong>strong emphasis</strong>.\nOr, if you prefer, <strong>use two underscores instead</strong>.</p>\n```\n\n### LISTS\nUnordered (bulleted) lists use asterisks, pluses, and hyphens (*, +, and -) as list markers. These three markers are interchangable; this:\n\n*   Candy.\n*   Gum.\n*   Booze.\n\nthis:\n\n+   Candy.\n+   Gum.\n+   Booze.\n\nand this:\n\n-   Candy.\n-   Gum.\n-   Booze.\n\nall produce the same output:\n\n``` xml\n<ul>\n<li>Candy.</li>\n<li>Gum.</li>\n<li>Booze.</li>\n</ul>\n```\n\nOrdered (numbered) lists use regular numbers, followed by periods, as list markers:\n\n``` xml\n1.  Red\n2.  Green\n3.  Blue\n```\n\n**Output:**\n\n``` xml\n<ol>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ol>\n```\n\nIf you put blank lines between items, you’ll get <p> tags for the list item text. You can create multi-paragraph list items by indenting the paragraphs by 4 spaces or 1 tab:\n\n*   A list item.\n\n    With multiple paragraphs.\n\n*   Another item in the list.\n\n**Output:**\n\n``` xml\n<ul>\n<li><p>A list item.</p>\n<p>With multiple paragraphs.</p></li>\n<li><p>Another item in the list.</p></li>\n</ul>\n```\n\n### LINKS\n\nMarkdown supports two styles for creating links: inline and reference. With both styles, you use square brackets to delimit the text you want to turn into a link.\n\nInline-style links use parentheses immediately after the link text. For example:\n\nThis is an [example link](http://example.com/).\n\n**Output:**\n\n``` xml\n<p>This is an <a href=\"http://example.com/\">\nexample link</a>.</p>\n```\n\nOptionally, you may include a title attribute in the parentheses:\n\nThis is an [example link](http://example.com/ \"With a Title\").\n\n**Output:**\n\n``` xml\n<p>This is an <a href=\"http://example.com/\" title=\"With a Title\">\nexample link</a>.</p>\n```\n\nReference-style links allow you to refer to your links by names, which you define elsewhere in your document:\n\nI get 10 times more traffic from [Google][1] than from\n[Yahoo][2] or [MSN][3].\n\n[1]: http://google.com/        \"Google\"\n[2]: http://search.yahoo.com/  \"Yahoo Search\"\n[3]: http://search.msn.com/    \"MSN Search\"\n\n**Output:**\n\n``` xml\n<p>I get 10 times more traffic from <a href=\"http://google.com/\"\ntitle=\"Google\">Google</a> than from <a href=\"http://search.yahoo.com/\"\ntitle=\"Yahoo Search\">Yahoo</a> or <a href=\"http://search.msn.com/\"\ntitle=\"MSN Search\">MSN</a>.</p>\n```\n\nThe title attribute is optional. Link names may contain letters, numbers and spaces, but are not case sensitive:\n\nI start my morning with a cup of coffee and\n\n[The New York Times][NY Times].\n\n[ny times]: http://www.nytimes.com/\n\n**Output:**\n\n``` xml\n<p>I start my morning with a cup of coffee and\n<a href=\"http://www.nytimes.com/\">The New York Times</a>.</p>\n```\n\n### IMAGES\n\nImage syntax is very much like link syntax.\n\nInline (titles are optional):\n\n![alt text](http://lorempixel.com/400/200/ \"Title\")\n\nReference-style:\n\n``` xml\n![alt text][id]\n\n[id]: http://lorempixel.com/400/200/ \"Title\"\n```\nBoth of the above examples produce the same output:\n\n``` xml\n<img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" />\n```\n","slug":"markdown-sample","published":1,"updated":"2018-11-06T12:46:57.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo6iq73u000351vhoe5439ji","content":"<h1 id=\"A-First-Level-Header\"><a href=\"#A-First-Level-Header\" class=\"headerlink\" title=\"A First Level Header\"></a>A First Level Header</h1><h2 id=\"A-Second-Level-Header\"><a href=\"#A-Second-Level-Header\" class=\"headerlink\" title=\"A Second Level Header\"></a>A Second Level Header</h2><p>Now is the time for all good men to come to<br>the aid of their country. This is just a<br><code>regular paragraph</code>.</p>\n<p>The quick brown fox jumped over the lazy<br>dog’s back.</p>\n<h3 id=\"Header-3\"><a href=\"#Header-3\" class=\"headerlink\" title=\"Header 3\"></a>Header 3</h3><blockquote>\n<p>This is a blockquote.</p>\n<p>This is the second paragraph in the blockquote.</p>\n<h2 id=\"This-is-an-H2-in-a-blockquote\"><a href=\"#This-is-an-H2-in-a-blockquote\" class=\"headerlink\" title=\"This is an H2 in a blockquote\"></a>This is an H2 in a blockquote</h2></blockquote>\n<h3 id=\"PHRASE-EMPHASIS\"><a href=\"#PHRASE-EMPHASIS\" class=\"headerlink\" title=\"PHRASE EMPHASIS\"></a>PHRASE EMPHASIS</h3><p><strong>Markdown:</strong></p>\n<p>Some of these words <em>are emphasized</em>.<br>Some of these words <em>are emphasized also</em>.</p>\n<p>Use two asterisks for <strong>strong emphasis</strong>.<br>Or, if you prefer, <strong>use two underscores instead</strong>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Some of these words <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>are emphasized<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>.</span><br><span class=\"line\">Some of these words <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>are emphasized also<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Use two asterisks for <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>strong emphasis<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>.</span><br><span class=\"line\">Or, if you prefer, <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>use two underscores instead<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"LISTS\"><a href=\"#LISTS\" class=\"headerlink\" title=\"LISTS\"></a>LISTS</h3><p>Unordered (bulleted) lists use asterisks, pluses, and hyphens (*, +, and -) as list markers. These three markers are interchangable; this:</p>\n<ul>\n<li>Candy.</li>\n<li>Gum.</li>\n<li>Booze.</li>\n</ul>\n<p>this:</p>\n<ul>\n<li>Candy.</li>\n<li>Gum.</li>\n<li>Booze.</li>\n</ul>\n<p>and this:</p>\n<ul>\n<li>Candy.</li>\n<li>Gum.</li>\n<li>Booze.</li>\n</ul>\n<p>all produce the same output:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Candy.<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Gum.<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Booze.<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Ordered (numbered) lists use regular numbers, followed by periods, as list markers:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  Red</span><br><span class=\"line\">2.  Green</span><br><span class=\"line\">3.  Blue</span><br></pre></td></tr></table></figure>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Green<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Blue<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>If you put blank lines between items, you’ll get </p><p> tags for the list item text. You can create multi-paragraph list items by indenting the paragraphs by 4 spaces or 1 tab:</p>\n<ul>\n<li><p>A list item.</p>\n<p>With multiple paragraphs.</p>\n</li>\n<li><p>Another item in the list.</p>\n</li>\n</ul>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A list item.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>With multiple paragraphs.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Another item in the list.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"LINKS\"><a href=\"#LINKS\" class=\"headerlink\" title=\"LINKS\"></a>LINKS</h3><p>Markdown supports two styles for creating links: inline and reference. With both styles, you use square brackets to delimit the text you want to turn into a link.</p>\n<p>Inline-style links use parentheses immediately after the link text. For example:</p>\n<p>This is an <a href=\"http://example.com/\" target=\"_blank\" rel=\"noopener\">example link</a>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is an <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span>&gt;</span></span><br><span class=\"line\">example link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Optionally, you may include a title attribute in the parentheses:</p>\n<p>This is an <a href=\"http://example.com/\" title=\"With a Title\" target=\"_blank\" rel=\"noopener\">example link</a>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is an <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"With a Title\"</span>&gt;</span></span><br><span class=\"line\">example link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Reference-style links allow you to refer to your links by names, which you define elsewhere in your document:</p>\n<p>I get 10 times more traffic from <a href=\"http://google.com/\" title=\"Google\" target=\"_blank\" rel=\"noopener\">Google</a> than from<br><a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\" target=\"_blank\" rel=\"noopener\">Yahoo</a> or <a href=\"http://search.msn.com/\" title=\"MSN Search\" target=\"_blank\" rel=\"noopener\">MSN</a>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>I get 10 times more traffic from <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://google.com/\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">title</span>=<span class=\"string\">\"Google\"</span>&gt;</span>Google<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> than from <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://search.yahoo.com/\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">title</span>=<span class=\"string\">\"Yahoo Search\"</span>&gt;</span>Yahoo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> or <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://search.msn.com/\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">title</span>=<span class=\"string\">\"MSN Search\"</span>&gt;</span>MSN<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The title attribute is optional. Link names may contain letters, numbers and spaces, but are not case sensitive:</p>\n<p>I start my morning with a cup of coffee and</p>\n<p><a href=\"http://www.nytimes.com/\" target=\"_blank\" rel=\"noopener\">The New York Times</a>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>I start my morning with a cup of coffee and</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.nytimes.com/\"</span>&gt;</span>The New York Times<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"IMAGES\"><a href=\"#IMAGES\" class=\"headerlink\" title=\"IMAGES\"></a>IMAGES</h3><p>Image syntax is very much like link syntax.</p>\n<p>Inline (titles are optional):</p>\n<p><img src=\"http://lorempixel.com/400/200/\" alt=\"alt text\" title=\"Title\"></p>\n<p>Reference-style:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![alt text][id]</span><br><span class=\"line\"></span><br><span class=\"line\">[id]: http://lorempixel.com/400/200/ \"Title\"</span><br></pre></td></tr></table></figure>\n<p>Both of the above examples produce the same output:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/img.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"alt text\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Title\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"A-First-Level-Header\"><a href=\"#A-First-Level-Header\" class=\"headerlink\" title=\"A First Level Header\"></a>A First Level Header</h1><h2 id=\"A-Second-Level-Header\"><a href=\"#A-Second-Level-Header\" class=\"headerlink\" title=\"A Second Level Header\"></a>A Second Level Header</h2><p>Now is the time for all good men to come to<br>the aid of their country. This is just a<br><code>regular paragraph</code>.</p>\n<p>The quick brown fox jumped over the lazy<br>dog’s back.</p>\n<h3 id=\"Header-3\"><a href=\"#Header-3\" class=\"headerlink\" title=\"Header 3\"></a>Header 3</h3><blockquote>\n<p>This is a blockquote.</p>\n<p>This is the second paragraph in the blockquote.</p>\n<h2 id=\"This-is-an-H2-in-a-blockquote\"><a href=\"#This-is-an-H2-in-a-blockquote\" class=\"headerlink\" title=\"This is an H2 in a blockquote\"></a>This is an H2 in a blockquote</h2></blockquote>\n<h3 id=\"PHRASE-EMPHASIS\"><a href=\"#PHRASE-EMPHASIS\" class=\"headerlink\" title=\"PHRASE EMPHASIS\"></a>PHRASE EMPHASIS</h3><p><strong>Markdown:</strong></p>\n<p>Some of these words <em>are emphasized</em>.<br>Some of these words <em>are emphasized also</em>.</p>\n<p>Use two asterisks for <strong>strong emphasis</strong>.<br>Or, if you prefer, <strong>use two underscores instead</strong>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Some of these words <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>are emphasized<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>.</span><br><span class=\"line\">Some of these words <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>are emphasized also<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Use two asterisks for <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>strong emphasis<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>.</span><br><span class=\"line\">Or, if you prefer, <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>use two underscores instead<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"LISTS\"><a href=\"#LISTS\" class=\"headerlink\" title=\"LISTS\"></a>LISTS</h3><p>Unordered (bulleted) lists use asterisks, pluses, and hyphens (*, +, and -) as list markers. These three markers are interchangable; this:</p>\n<ul>\n<li>Candy.</li>\n<li>Gum.</li>\n<li>Booze.</li>\n</ul>\n<p>this:</p>\n<ul>\n<li>Candy.</li>\n<li>Gum.</li>\n<li>Booze.</li>\n</ul>\n<p>and this:</p>\n<ul>\n<li>Candy.</li>\n<li>Gum.</li>\n<li>Booze.</li>\n</ul>\n<p>all produce the same output:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Candy.<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Gum.<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Booze.<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Ordered (numbered) lists use regular numbers, followed by periods, as list markers:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  Red</span><br><span class=\"line\">2.  Green</span><br><span class=\"line\">3.  Blue</span><br></pre></td></tr></table></figure>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Green<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Blue<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>If you put blank lines between items, you’ll get </p><p> tags for the list item text. You can create multi-paragraph list items by indenting the paragraphs by 4 spaces or 1 tab:</p>\n<ul>\n<li><p>A list item.</p>\n<p>With multiple paragraphs.</p>\n</li>\n<li><p>Another item in the list.</p>\n</li>\n</ul>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A list item.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>With multiple paragraphs.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Another item in the list.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"LINKS\"><a href=\"#LINKS\" class=\"headerlink\" title=\"LINKS\"></a>LINKS</h3><p>Markdown supports two styles for creating links: inline and reference. With both styles, you use square brackets to delimit the text you want to turn into a link.</p>\n<p>Inline-style links use parentheses immediately after the link text. For example:</p>\n<p>This is an <a href=\"http://example.com/\" target=\"_blank\" rel=\"noopener\">example link</a>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is an <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span>&gt;</span></span><br><span class=\"line\">example link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Optionally, you may include a title attribute in the parentheses:</p>\n<p>This is an <a href=\"http://example.com/\" title=\"With a Title\" target=\"_blank\" rel=\"noopener\">example link</a>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is an <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"With a Title\"</span>&gt;</span></span><br><span class=\"line\">example link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Reference-style links allow you to refer to your links by names, which you define elsewhere in your document:</p>\n<p>I get 10 times more traffic from <a href=\"http://google.com/\" title=\"Google\" target=\"_blank\" rel=\"noopener\">Google</a> than from<br><a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\" target=\"_blank\" rel=\"noopener\">Yahoo</a> or <a href=\"http://search.msn.com/\" title=\"MSN Search\" target=\"_blank\" rel=\"noopener\">MSN</a>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>I get 10 times more traffic from <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://google.com/\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">title</span>=<span class=\"string\">\"Google\"</span>&gt;</span>Google<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> than from <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://search.yahoo.com/\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">title</span>=<span class=\"string\">\"Yahoo Search\"</span>&gt;</span>Yahoo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> or <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://search.msn.com/\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">title</span>=<span class=\"string\">\"MSN Search\"</span>&gt;</span>MSN<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The title attribute is optional. Link names may contain letters, numbers and spaces, but are not case sensitive:</p>\n<p>I start my morning with a cup of coffee and</p>\n<p><a href=\"http://www.nytimes.com/\" target=\"_blank\" rel=\"noopener\">The New York Times</a>.</p>\n<p><strong>Output:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>I start my morning with a cup of coffee and</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.nytimes.com/\"</span>&gt;</span>The New York Times<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"IMAGES\"><a href=\"#IMAGES\" class=\"headerlink\" title=\"IMAGES\"></a>IMAGES</h3><p>Image syntax is very much like link syntax.</p>\n<p>Inline (titles are optional):</p>\n<p><img src=\"http://lorempixel.com/400/200/\" alt=\"alt text\" title=\"Title\"></p>\n<p>Reference-style:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![alt text][id]</span><br><span class=\"line\"></span><br><span class=\"line\">[id]: http://lorempixel.com/400/200/ \"Title\"</span><br></pre></td></tr></table></figure>\n<p>Both of the above examples produce the same output:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/img.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"alt text\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Title\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Markdown语法","date":"2015-12-09T00:01:20.000Z","_content":"\n**段落和换行**\n\n一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。普通段落不该用空格或制表符来缩进。\n\n两个以上的空格然后回车，表示换行。\n\n**标题**\n\n\t# 这是H1\n    ## 这是H2\n    ###### 这是H6\n\n**区块引用**\n\n    > This is the first level of quoting.\n    >\n    > > This is nested blockquote.\n    >\n    > Back to the first level.\n\n引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。\n\n**列表**\n\n*   无序\n\n    \t* Red\n    \t* Green\n    \t* Blue\n\n*   有序\n\n    \t1. Bird\n    \t2. McHale\n    \t3. Parish\n\n列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符。\n\n**代码区块**\n\n要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以。\n\n    这是一个普通段落：\n\n        这是一个代码区块。\n\n**分隔线**\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。\n\n    * * *\n    ---\n\n**链接**\n\nMarkdown 支持两种形式的链接语法行内式和参考式两种形式。例如：\n\n    This is [an example](http://example.com/ \"Title\") inline link.\n    [This link](http://example.net/) has no title attribute.\n    This is [an example] [id] reference-style link.\n    [id]: http://example.com/  \"Optional Title Here\"\n\n**强调**\n\nMarkdown 使用星号（\\*）和底线（\\_）作为标记强调字词的符号，被 \\* 或 \\_ 包围的字词会被转成斜体，用两个 \\* 或 \\_ 包起来的话，则会被转成加粗。\n\n    **abc** *dc*\n    _abc_ __dc__\n\n**代码**\n\n如果要标记一小段行内代码，你可以用反引号把它包起来（\\`）。\n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段。\n\n    This is `code`.\n    `` This is `code`. ``\n\n**图片**\n\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式：行内式和参考式。\n\n    ![Alt text](/path/to/img.jpg)\n    ![Alt text](/path/to/img.jpg \"Optional title\")\n    ![Alt text][id]\n    [id]: url/to/image  \"Optional title attribute\"\n\n**反斜杠**\n\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号。\n\n## 扩展\n\n**表格**\n\n\t| Tables        | Are           | Cool  |\n\t| ------------- |:-------------:| -----:|\n\t| col 3 is      | right-aligned | $1600 |\n\t| col 2 is      | centered      |   $12 |\n\t| zebra stripes | are neat      |    $1 |\n","source":"_posts/markdown-syntax.md","raw":"---\ntitle: \"Markdown语法\"\ndate: 2015-12-9 16:01:20 +08:00\ntags: markdown\n---\n\n**段落和换行**\n\n一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。普通段落不该用空格或制表符来缩进。\n\n两个以上的空格然后回车，表示换行。\n\n**标题**\n\n\t# 这是H1\n    ## 这是H2\n    ###### 这是H6\n\n**区块引用**\n\n    > This is the first level of quoting.\n    >\n    > > This is nested blockquote.\n    >\n    > Back to the first level.\n\n引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。\n\n**列表**\n\n*   无序\n\n    \t* Red\n    \t* Green\n    \t* Blue\n\n*   有序\n\n    \t1. Bird\n    \t2. McHale\n    \t3. Parish\n\n列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符。\n\n**代码区块**\n\n要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以。\n\n    这是一个普通段落：\n\n        这是一个代码区块。\n\n**分隔线**\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。\n\n    * * *\n    ---\n\n**链接**\n\nMarkdown 支持两种形式的链接语法行内式和参考式两种形式。例如：\n\n    This is [an example](http://example.com/ \"Title\") inline link.\n    [This link](http://example.net/) has no title attribute.\n    This is [an example] [id] reference-style link.\n    [id]: http://example.com/  \"Optional Title Here\"\n\n**强调**\n\nMarkdown 使用星号（\\*）和底线（\\_）作为标记强调字词的符号，被 \\* 或 \\_ 包围的字词会被转成斜体，用两个 \\* 或 \\_ 包起来的话，则会被转成加粗。\n\n    **abc** *dc*\n    _abc_ __dc__\n\n**代码**\n\n如果要标记一小段行内代码，你可以用反引号把它包起来（\\`）。\n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段。\n\n    This is `code`.\n    `` This is `code`. ``\n\n**图片**\n\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式：行内式和参考式。\n\n    ![Alt text](/path/to/img.jpg)\n    ![Alt text](/path/to/img.jpg \"Optional title\")\n    ![Alt text][id]\n    [id]: url/to/image  \"Optional title attribute\"\n\n**反斜杠**\n\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号。\n\n## 扩展\n\n**表格**\n\n\t| Tables        | Are           | Cool  |\n\t| ------------- |:-------------:| -----:|\n\t| col 3 is      | right-aligned | $1600 |\n\t| col 2 is      | centered      |   $12 |\n\t| zebra stripes | are neat      |    $1 |\n","slug":"markdown-syntax","published":1,"updated":"2018-11-06T12:47:05.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo6iq73v000451vhe4veebvl","content":"<p><strong>段落和换行</strong></p>\n<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。普通段落不该用空格或制表符来缩进。</p>\n<p>两个以上的空格然后回车，表示换行。</p>\n<p><strong>标题</strong></p>\n<pre><code># 这是H1\n## 这是H2\n###### 这是H6\n</code></pre><p><strong>区块引用</strong></p>\n<pre><code>&gt; This is the first level of quoting.\n&gt;\n&gt; &gt; This is nested blockquote.\n&gt;\n&gt; Back to the first level.\n</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。</p>\n<p><strong>列表</strong></p>\n<ul>\n<li><p>无序</p>\n<pre><code>* Red\n* Green\n* Blue\n</code></pre></li>\n<li><p>有序</p>\n<pre><code>1. Bird\n2. McHale\n3. Parish\n</code></pre></li>\n</ul>\n<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符。</p>\n<p><strong>代码区块</strong></p>\n<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以。</p>\n<pre><code>这是一个普通段落：\n\n    这是一个代码区块。\n</code></pre><p><strong>分隔线</strong></p>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p>\n<pre><code>* * *\n---\n</code></pre><p><strong>链接</strong></p>\n<p>Markdown 支持两种形式的链接语法行内式和参考式两种形式。例如：</p>\n<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.\n[This link](http://example.net/) has no title attribute.\nThis is [an example] [id] reference-style link.\n[id]: http://example.com/  &quot;Optional Title Here&quot;\n</code></pre><p><strong>强调</strong></p>\n<p>Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成斜体，用两个 * 或 _ 包起来的话，则会被转成加粗。</p>\n<pre><code>**abc** *dc*\n_abc_ __dc__\n</code></pre><p><strong>代码</strong></p>\n<p>如果要标记一小段行内代码，你可以用反引号把它包起来（`）。<br>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段。</p>\n<pre><code>This is `code`.\n`` This is `code`. ``\n</code></pre><p><strong>图片</strong></p>\n<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式：行内式和参考式。</p>\n<pre><code>![Alt text](/path/to/img.jpg)\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)\n![Alt text][id]\n[id]: url/to/image  &quot;Optional title attribute&quot;\n</code></pre><p><strong>反斜杠</strong></p>\n<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p><strong>表格</strong></p>\n<pre><code>| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><strong>段落和换行</strong></p>\n<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。普通段落不该用空格或制表符来缩进。</p>\n<p>两个以上的空格然后回车，表示换行。</p>\n<p><strong>标题</strong></p>\n<pre><code># 这是H1\n## 这是H2\n###### 这是H6\n</code></pre><p><strong>区块引用</strong></p>\n<pre><code>&gt; This is the first level of quoting.\n&gt;\n&gt; &gt; This is nested blockquote.\n&gt;\n&gt; Back to the first level.\n</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。</p>\n<p><strong>列表</strong></p>\n<ul>\n<li><p>无序</p>\n<pre><code>* Red\n* Green\n* Blue\n</code></pre></li>\n<li><p>有序</p>\n<pre><code>1. Bird\n2. McHale\n3. Parish\n</code></pre></li>\n</ul>\n<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符。</p>\n<p><strong>代码区块</strong></p>\n<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以。</p>\n<pre><code>这是一个普通段落：\n\n    这是一个代码区块。\n</code></pre><p><strong>分隔线</strong></p>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p>\n<pre><code>* * *\n---\n</code></pre><p><strong>链接</strong></p>\n<p>Markdown 支持两种形式的链接语法行内式和参考式两种形式。例如：</p>\n<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.\n[This link](http://example.net/) has no title attribute.\nThis is [an example] [id] reference-style link.\n[id]: http://example.com/  &quot;Optional Title Here&quot;\n</code></pre><p><strong>强调</strong></p>\n<p>Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成斜体，用两个 * 或 _ 包起来的话，则会被转成加粗。</p>\n<pre><code>**abc** *dc*\n_abc_ __dc__\n</code></pre><p><strong>代码</strong></p>\n<p>如果要标记一小段行内代码，你可以用反引号把它包起来（`）。<br>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段。</p>\n<pre><code>This is `code`.\n`` This is `code`. ``\n</code></pre><p><strong>图片</strong></p>\n<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式：行内式和参考式。</p>\n<pre><code>![Alt text](/path/to/img.jpg)\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)\n![Alt text][id]\n[id]: url/to/image  &quot;Optional title attribute&quot;\n</code></pre><p><strong>反斜杠</strong></p>\n<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p><strong>表格</strong></p>\n<pre><code>| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n</code></pre>"},{"title":"Vim简单操作","date":"2015-11-08T23:12:20.000Z","_content":"\n打开文件，在终端输入\n\n> vim filename\n\n进入到了vim编辑画面后，常用按键作用\n\n+ **i** 进入输入模式\n+ **ESC** 退出输入模式\n\n以下按键要在非输入模式下进行，即按**ESC**之后  \nvim中的大部分按键都是在非输入模式下作用的，**i**也是在非输入模式下才能使用\n\n### 基本操作\n\n+ **:w** 保存文件\n+ **:q** 退出文件\n+ **:wq** 保存并退出文件\n+ **:q!** 退出不保存文件\n+ **x** 删除光标所在的一个字符\n+ **dd**  删除当前行，并把删除的行存到剪贴板中\n+ **yy** 复制当前行\n+ **p** 粘贴剪贴板中的内容\n\n### 高级操作\n\n+ **/world** 在文件中查找world单词\n+ **:%s/old/new/g** 将文件中的所有old单词替换成new单词\n+ **gg** 跳到文件头\n+ **G** 跳到文件末尾\n+ **u** undo\n+ **<Ctrl-r\\>** redo\n\n### 更高级操作\n\n+ **ndd** 同时删除n行，如**2dd**,同时删除2行\n+ **:n** 光标跳到第n行，如**:10**,光标跳到第10行\n+ **<Ctrl-n\\>**或**<Ctrl-p\\>** 自动补齐功能\n","source":"_posts/vim.md","raw":"---\ntitle: \"Vim简单操作\"\ndate: 2015-11-09 15:12:20 +08:00\ntags: vim\n---\n\n打开文件，在终端输入\n\n> vim filename\n\n进入到了vim编辑画面后，常用按键作用\n\n+ **i** 进入输入模式\n+ **ESC** 退出输入模式\n\n以下按键要在非输入模式下进行，即按**ESC**之后  \nvim中的大部分按键都是在非输入模式下作用的，**i**也是在非输入模式下才能使用\n\n### 基本操作\n\n+ **:w** 保存文件\n+ **:q** 退出文件\n+ **:wq** 保存并退出文件\n+ **:q!** 退出不保存文件\n+ **x** 删除光标所在的一个字符\n+ **dd**  删除当前行，并把删除的行存到剪贴板中\n+ **yy** 复制当前行\n+ **p** 粘贴剪贴板中的内容\n\n### 高级操作\n\n+ **/world** 在文件中查找world单词\n+ **:%s/old/new/g** 将文件中的所有old单词替换成new单词\n+ **gg** 跳到文件头\n+ **G** 跳到文件末尾\n+ **u** undo\n+ **<Ctrl-r\\>** redo\n\n### 更高级操作\n\n+ **ndd** 同时删除n行，如**2dd**,同时删除2行\n+ **:n** 光标跳到第n行，如**:10**,光标跳到第10行\n+ **<Ctrl-n\\>**或**<Ctrl-p\\>** 自动补齐功能\n","slug":"vim","published":1,"updated":"2018-11-06T12:46:50.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo6iq73w000551vhowal07mq","content":"<p>打开文件，在终端输入</p>\n<blockquote>\n<p>vim filename</p>\n</blockquote>\n<p>进入到了vim编辑画面后，常用按键作用</p>\n<ul>\n<li><strong>i</strong> 进入输入模式</li>\n<li><strong>ESC</strong> 退出输入模式</li>\n</ul>\n<p>以下按键要在非输入模式下进行，即按<strong>ESC</strong>之后<br>vim中的大部分按键都是在非输入模式下作用的，<strong>i</strong>也是在非输入模式下才能使用</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ul>\n<li><strong>:w</strong> 保存文件</li>\n<li><strong>:q</strong> 退出文件</li>\n<li><strong>:wq</strong> 保存并退出文件</li>\n<li><strong>:q!</strong> 退出不保存文件</li>\n<li><strong>x</strong> 删除光标所在的一个字符</li>\n<li><strong>dd</strong>  删除当前行，并把删除的行存到剪贴板中</li>\n<li><strong>yy</strong> 复制当前行</li>\n<li><strong>p</strong> 粘贴剪贴板中的内容</li>\n</ul>\n<h3 id=\"高级操作\"><a href=\"#高级操作\" class=\"headerlink\" title=\"高级操作\"></a>高级操作</h3><ul>\n<li><strong>/world</strong> 在文件中查找world单词</li>\n<li><strong>:%s/old/new/g</strong> 将文件中的所有old单词替换成new单词</li>\n<li><strong>gg</strong> 跳到文件头</li>\n<li><strong>G</strong> 跳到文件末尾</li>\n<li><strong>u</strong> undo</li>\n<li><strong>&lt;Ctrl-r></strong> redo</li>\n</ul>\n<h3 id=\"更高级操作\"><a href=\"#更高级操作\" class=\"headerlink\" title=\"更高级操作\"></a>更高级操作</h3><ul>\n<li><strong>ndd</strong> 同时删除n行，如<strong>2dd</strong>,同时删除2行</li>\n<li><strong>:n</strong> 光标跳到第n行，如<strong>:10</strong>,光标跳到第10行</li>\n<li><strong>&lt;Ctrl-n></strong>或<strong>&lt;Ctrl-p></strong> 自动补齐功能</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>打开文件，在终端输入</p>\n<blockquote>\n<p>vim filename</p>\n</blockquote>\n<p>进入到了vim编辑画面后，常用按键作用</p>\n<ul>\n<li><strong>i</strong> 进入输入模式</li>\n<li><strong>ESC</strong> 退出输入模式</li>\n</ul>\n<p>以下按键要在非输入模式下进行，即按<strong>ESC</strong>之后<br>vim中的大部分按键都是在非输入模式下作用的，<strong>i</strong>也是在非输入模式下才能使用</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ul>\n<li><strong>:w</strong> 保存文件</li>\n<li><strong>:q</strong> 退出文件</li>\n<li><strong>:wq</strong> 保存并退出文件</li>\n<li><strong>:q!</strong> 退出不保存文件</li>\n<li><strong>x</strong> 删除光标所在的一个字符</li>\n<li><strong>dd</strong>  删除当前行，并把删除的行存到剪贴板中</li>\n<li><strong>yy</strong> 复制当前行</li>\n<li><strong>p</strong> 粘贴剪贴板中的内容</li>\n</ul>\n<h3 id=\"高级操作\"><a href=\"#高级操作\" class=\"headerlink\" title=\"高级操作\"></a>高级操作</h3><ul>\n<li><strong>/world</strong> 在文件中查找world单词</li>\n<li><strong>:%s/old/new/g</strong> 将文件中的所有old单词替换成new单词</li>\n<li><strong>gg</strong> 跳到文件头</li>\n<li><strong>G</strong> 跳到文件末尾</li>\n<li><strong>u</strong> undo</li>\n<li><strong>&lt;Ctrl-r></strong> redo</li>\n</ul>\n<h3 id=\"更高级操作\"><a href=\"#更高级操作\" class=\"headerlink\" title=\"更高级操作\"></a>更高级操作</h3><ul>\n<li><strong>ndd</strong> 同时删除n行，如<strong>2dd</strong>,同时删除2行</li>\n<li><strong>:n</strong> 光标跳到第n行，如<strong>:10</strong>,光标跳到第10行</li>\n<li><strong>&lt;Ctrl-n></strong>或<strong>&lt;Ctrl-p></strong> 自动补齐功能</li>\n</ul>\n"},{"title":"修复你的时间步长","date":"2018-04-25T05:45:40.000Z","_content":"\n翻译[原文地址](https://gafferongames.com/post/fix_your_timestep/)\n\n在[前面的文章](https://gafferongames.com/post/integration_basics/)中，我们讨论了如何使用数值积分器来对运动方程积分。积分听起来很复杂，但它只是一种通过称为“增量时间”（或简称为 dt ）的一小段时间向前推进物理模拟的方法。\n\n但是如何选择这个增量时间值呢？这可能看起来像一个微不足道的主题，但实际上有很多不同的方法来做到这一点，每个方法都有自己的优势和弱点 - 所以请继续阅读！\n\n### 固定增量时间（Fixed delta time）\n\n向前迈出的最简单的方法是固定增量时间，如1/60秒：\n\n``` cpp\ndouble t  = 0.0;\ndouble dt = 1.0 / 60.0;\n\nwhile ( !quit )\n{\n    integrate( state, t, dt );\n\n    t += dt;\n\n    render( state );\n}\n```\n\n在许多方面，这个代码是理想的。如果您足够幸运，您的增量时间与显示器刷新率相匹配，并且您可以确保您的更新循环的实际时间少于一帧，那么您已经拥有了更新物理模拟器的完美解决方案，您可以停止阅读本文。\n\n但在现实世界中，您可能不会提前知道显示器的刷新率。VSYNC 可以被关闭，或者你可能在一台速度很慢的电脑上运行，这台电脑无法以 60fps 的速度更新并且渲染。\n\n在这些情况下，您的模拟器运行速度会比您想要的更快或更慢。\n\n### 可变增量时间（Variable delta time）\n\n解决这个问题 *似乎* 很简单。只需测量前一帧所需时间，然后将该值作为下一帧的增量时间反馈回来。这当然是有道理的，因为如果电脑速度太慢而无法在 60HZ 下更新并且必须降低到 30fps，那么您将自动以 1/30 的时间传递。同样的，显示器刷新率为 75HZ 而不是 60HZ 时，甚至在快速计算机上关闭 VSYNC 的情况下也是如此：\n\n``` cpp\ndouble t           = 0.0;\ndouble currentTime = hires_time_in_seconds();\n\nwhile ( !quit )\n{\n    double newTime   = hires_time_in_seconds();\n    double frameTime = newTime - currentTime;\n    currentTime      = newTime;\n\n    integrate( state, t, frameTime );\n\n    t += frameTime;\n\n    render( state );\n}\n```\n\n但是现在我将解释一下这个方法存在的一个巨大问题。问题在于你物理模拟器的行为取决于你传入的增量时间。这个效果可能很微小，因为你的游戏根据帧率有一个稍微不同的“感觉”，或者它可能和你的弹簧模拟爆炸到无穷大一样极端，快速移动的物体穿过墙壁和穿过地板的玩家！\n\n但有一点是肯定的，那就是期望你的模拟器能够正确处理传递给它的任何增量时间，是完全不切实际的。要理解为什么，考虑，如果你用 1/10 秒作为增量时间会发生什么？10 秒？100 秒？最终你会发现一个突破点。\n\n### 半固定增量时间（Semi-fixed timestep）\n\n更确实的说，只有当增量时间小于或等于某个最大值时，您的模拟器才能正常运行。在实践中，这通常比试图在广泛的增量时间值上进行仿真更加容易。\n\n有了这些知识，下面是一个简单的技巧，可以确保您不会在大于最大值的增量时间内传递数据，同时仍能在不同的机器上以正确的速度运行：\n\n``` cpp\ndouble t  = 0.0;\ndouble dt = 1 / 60.0;\n\ndouble currentTime = hires_time_in_seconds();\n\nwhile ( !quit )\n{\n    double newTime   = hires_time_in_seconds();\n    double frameTime = newTime - currentTime;\n    currentTime      = newTime;\n\n    while ( frameTime > 0.0 )\n    {\n        float deltaTime = min( frameTime, dt );\n\n        integrate( state, t, deltaTime );\n\n        frameTime -= deltaTime;\n        t         += deltaTime;\n    }\n\n    render( state );\n}\n```\n\n这种方法的好处是我们现在有一个增量时间的上限。如果它是我们细分时间步长，它将永远不会大于这个最大值。缺点是我们现在每次显示更新需要多个步骤，包括一个额外的步骤来消耗 dt 不能被 div 整除的剩余帧时间。如果渲染绑定，这不成问题，但如果仿真是框架中最昂贵的部分，则可能会遇到所谓的“死亡螺旋”。\n\n什么是死亡螺旋？当你的物理模拟无法跟上要求采取的步骤时，会发生什么情况。例如，如果你的仿真被告知：“好的，请模拟 X 秒的物理学价值”，如果 Y> X 时需要Y秒的实时时间，那么爱因斯坦不会意识到随着时间的推移，你的仿真会落后。这就是所谓的死亡螺旋，因为落后导致你的更新需要模拟更多的步骤才能赶上，这会导致你落后，导致你模拟更多的步骤......\n\n那么我们如何避免这种情况呢？为了确保稳定的更新，我建议留下一些空间。您确实需要确保实时更新X秒的物理模拟所需的时间 *显著* 少于X秒。如果你可以做到这一点，那么你的物理引擎可以通过模拟更多帧来“赶上”任何临时峰值。或者，您可以在每帧最大步数处进行钳位，并且在重负载下模拟似乎会减慢。可以说这比螺旋式死亡要好，尤其是如果重负荷只是暂时的高峰。\n\n### Free the physics\n\n现在让我们再进一步。在给定相同输入的情况下，如果您想从一次运行到下一次运行需要准确的重现性，该怎么办？这在尝试使用确定性固定步长时，联网物理模拟非常方便，但通常也是一件很好的事情，要知道从一次运行到下一次运行，您的模拟行为完全一样，而根据渲染帧率不同，不会有任何不同行为的可能性。\n\n但是你问为什么需要完全固定的增量时间来做到这一点？当然，小余数阶段的半固定增量时间“足够好”？是的，你是对的。在大多数情况下它已经足够好了，但由于浮点运算的精度有限，它不完全相同。\n\n我们现在想要的是两全其美：模拟的固定增量时间值以及以不同帧速率渲染的能力。这两件事似乎完全不一致，它们是 - 除非我们能找到一种方法来解耦模拟和渲染帧率。\n\n以下是如何做到这一点。在固定dt时间步骤中提前进行物理仿真，同时确保它跟上来自渲染器的定时器值，以便仿真以正确的速率前进。例如，如果显示帧率为50fps，模拟运行速度为100fps，那么我们需要在每次显示更新时采取两个物理步骤。简单吧。\n\n如果显示帧率是200fps呢？那么在这种情况下，我们需要在每次显示更新时采取一半的物理步骤，但是我们不能这样做，我们必须用固定dt来提前。所以我们每两次更新显示一个物理步骤。\n\n更棘手的是，如果显示帧率是60fps，但我们希望我们的模拟以100fps运行？没有简单的倍数。没有简单的倍数。如果VSYNC被禁用并且显示帧速率在帧之间波动，该怎么办？\n\n如果你头脑发生爆炸，不用担心，解决这个问题所需的一切就是改变你的观点。与其认为自己具有一定的帧时间，则必须在渲染之前进行模拟，颠倒视角并认为它是这样的：渲染器产生时间，并且仿真在离散的dt步骤中消耗它。\n\n例如：\n\n``` cpp\ndouble       t = 0.0;\nconst double dt = 0.01;\n\ndouble currentTime = hires_time_in_seconds();\ndouble accumulator = 0.0;\n\nwhile ( !quit )\n{\n    double newTime   = hires_time_in_seconds();\n    double frameTime = newTime - currentTime;\n    currentTime      = newTime;\n\n    accumulator += frameTime;\n\n    while ( accumulator >= dt )\n    {\n        integrate( state, t, dt );\n        accumulator -= dt;\n        t += dt;\n    }\n\n    render( state );\n}\n```\n\n注意，与半固定时间步不同的是，我们只能将步长与dt集成在一起，因此在通常情况下，我们在每个帧的末尾都剩下一些未模拟的时间。随着时间的推移，它通过累加器变量传递到下一帧，不会被丢弃。\n\n### The final touch\n\n但是剩下的时间呢？这似乎不正确，不是吗？\n\n要了解正在发生的事情，请考虑显示帧率为60fps并且物理运行速度为50fps的情况。没有很好的倍数，所以累加器会导致模拟之间交替进行，大多数情况下，当剩余部分“积累”到 dt 之上时，每帧只需要一个和偶尔两个物理步骤。\n\n现在考虑大多数渲染帧会在累加器中剩余一些剩余帧时间，因为它小于dt，所以无法模拟。这意味着我们在与渲染时间略有不同的时间显示物理模拟的状态，导致屏幕上物理模拟的微妙但在视觉上令人不愉快的口吃。\n\n解决这个问题的一个方法是基于累加器剩余的时间在先前和当前的物理状态之间进行插值：\n\n``` cpp\ndouble t  = 0.0;\ndouble dt = 0.01;\n\ndouble currentTime = hires_time_in_seconds();\ndouble accumulator = 0.0;\n\nState previous;\nState current;\n\nwhile ( !quit )\n{\n    double newTime   = time();\n    double frameTime = newTime - currentTime;\n    if ( frameTime > 0.25 )\n        frameTime = 0.25;\n    currentTime = newTime;\n\n    accumulator += frameTime;\n\n    while ( accumulator >= dt )\n    {\n        previousState = currentState;\n        integrate( currentState, t, dt );\n        t += dt;\n        accumulator -= dt;\n    }\n\n    const double alpha = accumulator / dt;\n\n    State state = currentState * alpha + previousState * ( 1.0 - alpha );\n\n    render( state );\n}\n```\n\n这看起来很复杂，但这是一个简单的思考方式。累加器中的任何余数实际上是在另一个整个物理步骤可以进行之前需要多少时间的度量。例如，dt / 2的其余部分意味着我们正处于当前物理步骤和下一步物理步骤之间的一半。dt * 0.1的其余部分意味着更新是当前状态和下一状态之间的十分之一。\n\n我们可以使用这个余数值来简单地通过除以dt来获得之前和当前物理状态之间的混合因子。这给出了一个在[0,1]范围内的alpha值，用于在两个物理状态之间执行线性插值以获取当前状态。这种插值对于单值和矢量状态值很容易实现。如果将方向作为四元数存储并使用球面线性插值（slerp）在前一个方向和当前方向之间进行混合，则甚至可以将其用于完整的3D刚体动力学。","source":"_posts/fix-your-timestep.md","raw":"---\ntitle: \"修复你的时间步长\"\ndate: 2018-04-25 21:45:40 +08:00\ntags: game\n---\n\n翻译[原文地址](https://gafferongames.com/post/fix_your_timestep/)\n\n在[前面的文章](https://gafferongames.com/post/integration_basics/)中，我们讨论了如何使用数值积分器来对运动方程积分。积分听起来很复杂，但它只是一种通过称为“增量时间”（或简称为 dt ）的一小段时间向前推进物理模拟的方法。\n\n但是如何选择这个增量时间值呢？这可能看起来像一个微不足道的主题，但实际上有很多不同的方法来做到这一点，每个方法都有自己的优势和弱点 - 所以请继续阅读！\n\n### 固定增量时间（Fixed delta time）\n\n向前迈出的最简单的方法是固定增量时间，如1/60秒：\n\n``` cpp\ndouble t  = 0.0;\ndouble dt = 1.0 / 60.0;\n\nwhile ( !quit )\n{\n    integrate( state, t, dt );\n\n    t += dt;\n\n    render( state );\n}\n```\n\n在许多方面，这个代码是理想的。如果您足够幸运，您的增量时间与显示器刷新率相匹配，并且您可以确保您的更新循环的实际时间少于一帧，那么您已经拥有了更新物理模拟器的完美解决方案，您可以停止阅读本文。\n\n但在现实世界中，您可能不会提前知道显示器的刷新率。VSYNC 可以被关闭，或者你可能在一台速度很慢的电脑上运行，这台电脑无法以 60fps 的速度更新并且渲染。\n\n在这些情况下，您的模拟器运行速度会比您想要的更快或更慢。\n\n### 可变增量时间（Variable delta time）\n\n解决这个问题 *似乎* 很简单。只需测量前一帧所需时间，然后将该值作为下一帧的增量时间反馈回来。这当然是有道理的，因为如果电脑速度太慢而无法在 60HZ 下更新并且必须降低到 30fps，那么您将自动以 1/30 的时间传递。同样的，显示器刷新率为 75HZ 而不是 60HZ 时，甚至在快速计算机上关闭 VSYNC 的情况下也是如此：\n\n``` cpp\ndouble t           = 0.0;\ndouble currentTime = hires_time_in_seconds();\n\nwhile ( !quit )\n{\n    double newTime   = hires_time_in_seconds();\n    double frameTime = newTime - currentTime;\n    currentTime      = newTime;\n\n    integrate( state, t, frameTime );\n\n    t += frameTime;\n\n    render( state );\n}\n```\n\n但是现在我将解释一下这个方法存在的一个巨大问题。问题在于你物理模拟器的行为取决于你传入的增量时间。这个效果可能很微小，因为你的游戏根据帧率有一个稍微不同的“感觉”，或者它可能和你的弹簧模拟爆炸到无穷大一样极端，快速移动的物体穿过墙壁和穿过地板的玩家！\n\n但有一点是肯定的，那就是期望你的模拟器能够正确处理传递给它的任何增量时间，是完全不切实际的。要理解为什么，考虑，如果你用 1/10 秒作为增量时间会发生什么？10 秒？100 秒？最终你会发现一个突破点。\n\n### 半固定增量时间（Semi-fixed timestep）\n\n更确实的说，只有当增量时间小于或等于某个最大值时，您的模拟器才能正常运行。在实践中，这通常比试图在广泛的增量时间值上进行仿真更加容易。\n\n有了这些知识，下面是一个简单的技巧，可以确保您不会在大于最大值的增量时间内传递数据，同时仍能在不同的机器上以正确的速度运行：\n\n``` cpp\ndouble t  = 0.0;\ndouble dt = 1 / 60.0;\n\ndouble currentTime = hires_time_in_seconds();\n\nwhile ( !quit )\n{\n    double newTime   = hires_time_in_seconds();\n    double frameTime = newTime - currentTime;\n    currentTime      = newTime;\n\n    while ( frameTime > 0.0 )\n    {\n        float deltaTime = min( frameTime, dt );\n\n        integrate( state, t, deltaTime );\n\n        frameTime -= deltaTime;\n        t         += deltaTime;\n    }\n\n    render( state );\n}\n```\n\n这种方法的好处是我们现在有一个增量时间的上限。如果它是我们细分时间步长，它将永远不会大于这个最大值。缺点是我们现在每次显示更新需要多个步骤，包括一个额外的步骤来消耗 dt 不能被 div 整除的剩余帧时间。如果渲染绑定，这不成问题，但如果仿真是框架中最昂贵的部分，则可能会遇到所谓的“死亡螺旋”。\n\n什么是死亡螺旋？当你的物理模拟无法跟上要求采取的步骤时，会发生什么情况。例如，如果你的仿真被告知：“好的，请模拟 X 秒的物理学价值”，如果 Y> X 时需要Y秒的实时时间，那么爱因斯坦不会意识到随着时间的推移，你的仿真会落后。这就是所谓的死亡螺旋，因为落后导致你的更新需要模拟更多的步骤才能赶上，这会导致你落后，导致你模拟更多的步骤......\n\n那么我们如何避免这种情况呢？为了确保稳定的更新，我建议留下一些空间。您确实需要确保实时更新X秒的物理模拟所需的时间 *显著* 少于X秒。如果你可以做到这一点，那么你的物理引擎可以通过模拟更多帧来“赶上”任何临时峰值。或者，您可以在每帧最大步数处进行钳位，并且在重负载下模拟似乎会减慢。可以说这比螺旋式死亡要好，尤其是如果重负荷只是暂时的高峰。\n\n### Free the physics\n\n现在让我们再进一步。在给定相同输入的情况下，如果您想从一次运行到下一次运行需要准确的重现性，该怎么办？这在尝试使用确定性固定步长时，联网物理模拟非常方便，但通常也是一件很好的事情，要知道从一次运行到下一次运行，您的模拟行为完全一样，而根据渲染帧率不同，不会有任何不同行为的可能性。\n\n但是你问为什么需要完全固定的增量时间来做到这一点？当然，小余数阶段的半固定增量时间“足够好”？是的，你是对的。在大多数情况下它已经足够好了，但由于浮点运算的精度有限，它不完全相同。\n\n我们现在想要的是两全其美：模拟的固定增量时间值以及以不同帧速率渲染的能力。这两件事似乎完全不一致，它们是 - 除非我们能找到一种方法来解耦模拟和渲染帧率。\n\n以下是如何做到这一点。在固定dt时间步骤中提前进行物理仿真，同时确保它跟上来自渲染器的定时器值，以便仿真以正确的速率前进。例如，如果显示帧率为50fps，模拟运行速度为100fps，那么我们需要在每次显示更新时采取两个物理步骤。简单吧。\n\n如果显示帧率是200fps呢？那么在这种情况下，我们需要在每次显示更新时采取一半的物理步骤，但是我们不能这样做，我们必须用固定dt来提前。所以我们每两次更新显示一个物理步骤。\n\n更棘手的是，如果显示帧率是60fps，但我们希望我们的模拟以100fps运行？没有简单的倍数。没有简单的倍数。如果VSYNC被禁用并且显示帧速率在帧之间波动，该怎么办？\n\n如果你头脑发生爆炸，不用担心，解决这个问题所需的一切就是改变你的观点。与其认为自己具有一定的帧时间，则必须在渲染之前进行模拟，颠倒视角并认为它是这样的：渲染器产生时间，并且仿真在离散的dt步骤中消耗它。\n\n例如：\n\n``` cpp\ndouble       t = 0.0;\nconst double dt = 0.01;\n\ndouble currentTime = hires_time_in_seconds();\ndouble accumulator = 0.0;\n\nwhile ( !quit )\n{\n    double newTime   = hires_time_in_seconds();\n    double frameTime = newTime - currentTime;\n    currentTime      = newTime;\n\n    accumulator += frameTime;\n\n    while ( accumulator >= dt )\n    {\n        integrate( state, t, dt );\n        accumulator -= dt;\n        t += dt;\n    }\n\n    render( state );\n}\n```\n\n注意，与半固定时间步不同的是，我们只能将步长与dt集成在一起，因此在通常情况下，我们在每个帧的末尾都剩下一些未模拟的时间。随着时间的推移，它通过累加器变量传递到下一帧，不会被丢弃。\n\n### The final touch\n\n但是剩下的时间呢？这似乎不正确，不是吗？\n\n要了解正在发生的事情，请考虑显示帧率为60fps并且物理运行速度为50fps的情况。没有很好的倍数，所以累加器会导致模拟之间交替进行，大多数情况下，当剩余部分“积累”到 dt 之上时，每帧只需要一个和偶尔两个物理步骤。\n\n现在考虑大多数渲染帧会在累加器中剩余一些剩余帧时间，因为它小于dt，所以无法模拟。这意味着我们在与渲染时间略有不同的时间显示物理模拟的状态，导致屏幕上物理模拟的微妙但在视觉上令人不愉快的口吃。\n\n解决这个问题的一个方法是基于累加器剩余的时间在先前和当前的物理状态之间进行插值：\n\n``` cpp\ndouble t  = 0.0;\ndouble dt = 0.01;\n\ndouble currentTime = hires_time_in_seconds();\ndouble accumulator = 0.0;\n\nState previous;\nState current;\n\nwhile ( !quit )\n{\n    double newTime   = time();\n    double frameTime = newTime - currentTime;\n    if ( frameTime > 0.25 )\n        frameTime = 0.25;\n    currentTime = newTime;\n\n    accumulator += frameTime;\n\n    while ( accumulator >= dt )\n    {\n        previousState = currentState;\n        integrate( currentState, t, dt );\n        t += dt;\n        accumulator -= dt;\n    }\n\n    const double alpha = accumulator / dt;\n\n    State state = currentState * alpha + previousState * ( 1.0 - alpha );\n\n    render( state );\n}\n```\n\n这看起来很复杂，但这是一个简单的思考方式。累加器中的任何余数实际上是在另一个整个物理步骤可以进行之前需要多少时间的度量。例如，dt / 2的其余部分意味着我们正处于当前物理步骤和下一步物理步骤之间的一半。dt * 0.1的其余部分意味着更新是当前状态和下一状态之间的十分之一。\n\n我们可以使用这个余数值来简单地通过除以dt来获得之前和当前物理状态之间的混合因子。这给出了一个在[0,1]范围内的alpha值，用于在两个物理状态之间执行线性插值以获取当前状态。这种插值对于单值和矢量状态值很容易实现。如果将方向作为四元数存储并使用球面线性插值（slerp）在前一个方向和当前方向之间进行混合，则甚至可以将其用于完整的3D刚体动力学。","slug":"fix-your-timestep","published":1,"updated":"2018-11-06T12:47:36.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo6iq742000f51vhh3zbtn9b","content":"<p>翻译<a href=\"https://gafferongames.com/post/fix_your_timestep/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>在<a href=\"https://gafferongames.com/post/integration_basics/\" target=\"_blank\" rel=\"noopener\">前面的文章</a>中，我们讨论了如何使用数值积分器来对运动方程积分。积分听起来很复杂，但它只是一种通过称为“增量时间”（或简称为 dt ）的一小段时间向前推进物理模拟的方法。</p>\n<p>但是如何选择这个增量时间值呢？这可能看起来像一个微不足道的主题，但实际上有很多不同的方法来做到这一点，每个方法都有自己的优势和弱点 - 所以请继续阅读！</p>\n<h3 id=\"固定增量时间（Fixed-delta-time）\"><a href=\"#固定增量时间（Fixed-delta-time）\" class=\"headerlink\" title=\"固定增量时间（Fixed delta time）\"></a>固定增量时间（Fixed delta time）</h3><p>向前迈出的最简单的方法是固定增量时间，如1/60秒：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> t  = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dt = <span class=\"number\">1.0</span> / <span class=\"number\">60.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    integrate( state, t, dt );</span><br><span class=\"line\"></span><br><span class=\"line\">    t += dt;</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在许多方面，这个代码是理想的。如果您足够幸运，您的增量时间与显示器刷新率相匹配，并且您可以确保您的更新循环的实际时间少于一帧，那么您已经拥有了更新物理模拟器的完美解决方案，您可以停止阅读本文。</p>\n<p>但在现实世界中，您可能不会提前知道显示器的刷新率。VSYNC 可以被关闭，或者你可能在一台速度很慢的电脑上运行，这台电脑无法以 60fps 的速度更新并且渲染。</p>\n<p>在这些情况下，您的模拟器运行速度会比您想要的更快或更慢。</p>\n<h3 id=\"可变增量时间（Variable-delta-time）\"><a href=\"#可变增量时间（Variable-delta-time）\" class=\"headerlink\" title=\"可变增量时间（Variable delta time）\"></a>可变增量时间（Variable delta time）</h3><p>解决这个问题 <em>似乎</em> 很简单。只需测量前一帧所需时间，然后将该值作为下一帧的增量时间反馈回来。这当然是有道理的，因为如果电脑速度太慢而无法在 60HZ 下更新并且必须降低到 30fps，那么您将自动以 1/30 的时间传递。同样的，显示器刷新率为 75HZ 而不是 60HZ 时，甚至在快速计算机上关闭 VSYNC 的情况下也是如此：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> t           = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> currentTime = hires_time_in_seconds();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> newTime   = hires_time_in_seconds();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> frameTime = newTime - currentTime;</span><br><span class=\"line\">    currentTime      = newTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    integrate( state, t, frameTime );</span><br><span class=\"line\"></span><br><span class=\"line\">    t += frameTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是现在我将解释一下这个方法存在的一个巨大问题。问题在于你物理模拟器的行为取决于你传入的增量时间。这个效果可能很微小，因为你的游戏根据帧率有一个稍微不同的“感觉”，或者它可能和你的弹簧模拟爆炸到无穷大一样极端，快速移动的物体穿过墙壁和穿过地板的玩家！</p>\n<p>但有一点是肯定的，那就是期望你的模拟器能够正确处理传递给它的任何增量时间，是完全不切实际的。要理解为什么，考虑，如果你用 1/10 秒作为增量时间会发生什么？10 秒？100 秒？最终你会发现一个突破点。</p>\n<h3 id=\"半固定增量时间（Semi-fixed-timestep）\"><a href=\"#半固定增量时间（Semi-fixed-timestep）\" class=\"headerlink\" title=\"半固定增量时间（Semi-fixed timestep）\"></a>半固定增量时间（Semi-fixed timestep）</h3><p>更确实的说，只有当增量时间小于或等于某个最大值时，您的模拟器才能正常运行。在实践中，这通常比试图在广泛的增量时间值上进行仿真更加容易。</p>\n<p>有了这些知识，下面是一个简单的技巧，可以确保您不会在大于最大值的增量时间内传递数据，同时仍能在不同的机器上以正确的速度运行：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> t  = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dt = <span class=\"number\">1</span> / <span class=\"number\">60.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> currentTime = hires_time_in_seconds();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> newTime   = hires_time_in_seconds();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> frameTime = newTime - currentTime;</span><br><span class=\"line\">    currentTime      = newTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( frameTime &gt; <span class=\"number\">0.0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> deltaTime = min( frameTime, dt );</span><br><span class=\"line\"></span><br><span class=\"line\">        integrate( state, t, deltaTime );</span><br><span class=\"line\"></span><br><span class=\"line\">        frameTime -= deltaTime;</span><br><span class=\"line\">        t         += deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法的好处是我们现在有一个增量时间的上限。如果它是我们细分时间步长，它将永远不会大于这个最大值。缺点是我们现在每次显示更新需要多个步骤，包括一个额外的步骤来消耗 dt 不能被 div 整除的剩余帧时间。如果渲染绑定，这不成问题，但如果仿真是框架中最昂贵的部分，则可能会遇到所谓的“死亡螺旋”。</p>\n<p>什么是死亡螺旋？当你的物理模拟无法跟上要求采取的步骤时，会发生什么情况。例如，如果你的仿真被告知：“好的，请模拟 X 秒的物理学价值”，如果 Y&gt; X 时需要Y秒的实时时间，那么爱因斯坦不会意识到随着时间的推移，你的仿真会落后。这就是所谓的死亡螺旋，因为落后导致你的更新需要模拟更多的步骤才能赶上，这会导致你落后，导致你模拟更多的步骤……</p>\n<p>那么我们如何避免这种情况呢？为了确保稳定的更新，我建议留下一些空间。您确实需要确保实时更新X秒的物理模拟所需的时间 <em>显著</em> 少于X秒。如果你可以做到这一点，那么你的物理引擎可以通过模拟更多帧来“赶上”任何临时峰值。或者，您可以在每帧最大步数处进行钳位，并且在重负载下模拟似乎会减慢。可以说这比螺旋式死亡要好，尤其是如果重负荷只是暂时的高峰。</p>\n<h3 id=\"Free-the-physics\"><a href=\"#Free-the-physics\" class=\"headerlink\" title=\"Free the physics\"></a>Free the physics</h3><p>现在让我们再进一步。在给定相同输入的情况下，如果您想从一次运行到下一次运行需要准确的重现性，该怎么办？这在尝试使用确定性固定步长时，联网物理模拟非常方便，但通常也是一件很好的事情，要知道从一次运行到下一次运行，您的模拟行为完全一样，而根据渲染帧率不同，不会有任何不同行为的可能性。</p>\n<p>但是你问为什么需要完全固定的增量时间来做到这一点？当然，小余数阶段的半固定增量时间“足够好”？是的，你是对的。在大多数情况下它已经足够好了，但由于浮点运算的精度有限，它不完全相同。</p>\n<p>我们现在想要的是两全其美：模拟的固定增量时间值以及以不同帧速率渲染的能力。这两件事似乎完全不一致，它们是 - 除非我们能找到一种方法来解耦模拟和渲染帧率。</p>\n<p>以下是如何做到这一点。在固定dt时间步骤中提前进行物理仿真，同时确保它跟上来自渲染器的定时器值，以便仿真以正确的速率前进。例如，如果显示帧率为50fps，模拟运行速度为100fps，那么我们需要在每次显示更新时采取两个物理步骤。简单吧。</p>\n<p>如果显示帧率是200fps呢？那么在这种情况下，我们需要在每次显示更新时采取一半的物理步骤，但是我们不能这样做，我们必须用固定dt来提前。所以我们每两次更新显示一个物理步骤。</p>\n<p>更棘手的是，如果显示帧率是60fps，但我们希望我们的模拟以100fps运行？没有简单的倍数。没有简单的倍数。如果VSYNC被禁用并且显示帧速率在帧之间波动，该怎么办？</p>\n<p>如果你头脑发生爆炸，不用担心，解决这个问题所需的一切就是改变你的观点。与其认为自己具有一定的帧时间，则必须在渲染之前进行模拟，颠倒视角并认为它是这样的：渲染器产生时间，并且仿真在离散的dt步骤中消耗它。</p>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span>       t = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> dt = <span class=\"number\">0.01</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> currentTime = hires_time_in_seconds();</span><br><span class=\"line\"><span class=\"keyword\">double</span> accumulator = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> newTime   = hires_time_in_seconds();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> frameTime = newTime - currentTime;</span><br><span class=\"line\">    currentTime      = newTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    accumulator += frameTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( accumulator &gt;= dt )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        integrate( state, t, dt );</span><br><span class=\"line\">        accumulator -= dt;</span><br><span class=\"line\">        t += dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，与半固定时间步不同的是，我们只能将步长与dt集成在一起，因此在通常情况下，我们在每个帧的末尾都剩下一些未模拟的时间。随着时间的推移，它通过累加器变量传递到下一帧，不会被丢弃。</p>\n<h3 id=\"The-final-touch\"><a href=\"#The-final-touch\" class=\"headerlink\" title=\"The final touch\"></a>The final touch</h3><p>但是剩下的时间呢？这似乎不正确，不是吗？</p>\n<p>要了解正在发生的事情，请考虑显示帧率为60fps并且物理运行速度为50fps的情况。没有很好的倍数，所以累加器会导致模拟之间交替进行，大多数情况下，当剩余部分“积累”到 dt 之上时，每帧只需要一个和偶尔两个物理步骤。</p>\n<p>现在考虑大多数渲染帧会在累加器中剩余一些剩余帧时间，因为它小于dt，所以无法模拟。这意味着我们在与渲染时间略有不同的时间显示物理模拟的状态，导致屏幕上物理模拟的微妙但在视觉上令人不愉快的口吃。</p>\n<p>解决这个问题的一个方法是基于累加器剩余的时间在先前和当前的物理状态之间进行插值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> t  = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dt = <span class=\"number\">0.01</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> currentTime = hires_time_in_seconds();</span><br><span class=\"line\"><span class=\"keyword\">double</span> accumulator = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">State previous;</span><br><span class=\"line\">State current;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> newTime   = time();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> frameTime = newTime - currentTime;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( frameTime &gt; <span class=\"number\">0.25</span> )</span><br><span class=\"line\">        frameTime = <span class=\"number\">0.25</span>;</span><br><span class=\"line\">    currentTime = newTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    accumulator += frameTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( accumulator &gt;= dt )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        previousState = currentState;</span><br><span class=\"line\">        integrate( currentState, t, dt );</span><br><span class=\"line\">        t += dt;</span><br><span class=\"line\">        accumulator -= dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> alpha = accumulator / dt;</span><br><span class=\"line\"></span><br><span class=\"line\">    State state = currentState * alpha + previousState * ( <span class=\"number\">1.0</span> - alpha );</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这看起来很复杂，但这是一个简单的思考方式。累加器中的任何余数实际上是在另一个整个物理步骤可以进行之前需要多少时间的度量。例如，dt / 2的其余部分意味着我们正处于当前物理步骤和下一步物理步骤之间的一半。dt * 0.1的其余部分意味着更新是当前状态和下一状态之间的十分之一。</p>\n<p>我们可以使用这个余数值来简单地通过除以dt来获得之前和当前物理状态之间的混合因子。这给出了一个在[0,1]范围内的alpha值，用于在两个物理状态之间执行线性插值以获取当前状态。这种插值对于单值和矢量状态值很容易实现。如果将方向作为四元数存储并使用球面线性插值（slerp）在前一个方向和当前方向之间进行混合，则甚至可以将其用于完整的3D刚体动力学。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>翻译<a href=\"https://gafferongames.com/post/fix_your_timestep/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>在<a href=\"https://gafferongames.com/post/integration_basics/\" target=\"_blank\" rel=\"noopener\">前面的文章</a>中，我们讨论了如何使用数值积分器来对运动方程积分。积分听起来很复杂，但它只是一种通过称为“增量时间”（或简称为 dt ）的一小段时间向前推进物理模拟的方法。</p>\n<p>但是如何选择这个增量时间值呢？这可能看起来像一个微不足道的主题，但实际上有很多不同的方法来做到这一点，每个方法都有自己的优势和弱点 - 所以请继续阅读！</p>\n<h3 id=\"固定增量时间（Fixed-delta-time）\"><a href=\"#固定增量时间（Fixed-delta-time）\" class=\"headerlink\" title=\"固定增量时间（Fixed delta time）\"></a>固定增量时间（Fixed delta time）</h3><p>向前迈出的最简单的方法是固定增量时间，如1/60秒：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> t  = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dt = <span class=\"number\">1.0</span> / <span class=\"number\">60.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    integrate( state, t, dt );</span><br><span class=\"line\"></span><br><span class=\"line\">    t += dt;</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在许多方面，这个代码是理想的。如果您足够幸运，您的增量时间与显示器刷新率相匹配，并且您可以确保您的更新循环的实际时间少于一帧，那么您已经拥有了更新物理模拟器的完美解决方案，您可以停止阅读本文。</p>\n<p>但在现实世界中，您可能不会提前知道显示器的刷新率。VSYNC 可以被关闭，或者你可能在一台速度很慢的电脑上运行，这台电脑无法以 60fps 的速度更新并且渲染。</p>\n<p>在这些情况下，您的模拟器运行速度会比您想要的更快或更慢。</p>\n<h3 id=\"可变增量时间（Variable-delta-time）\"><a href=\"#可变增量时间（Variable-delta-time）\" class=\"headerlink\" title=\"可变增量时间（Variable delta time）\"></a>可变增量时间（Variable delta time）</h3><p>解决这个问题 <em>似乎</em> 很简单。只需测量前一帧所需时间，然后将该值作为下一帧的增量时间反馈回来。这当然是有道理的，因为如果电脑速度太慢而无法在 60HZ 下更新并且必须降低到 30fps，那么您将自动以 1/30 的时间传递。同样的，显示器刷新率为 75HZ 而不是 60HZ 时，甚至在快速计算机上关闭 VSYNC 的情况下也是如此：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> t           = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> currentTime = hires_time_in_seconds();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> newTime   = hires_time_in_seconds();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> frameTime = newTime - currentTime;</span><br><span class=\"line\">    currentTime      = newTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    integrate( state, t, frameTime );</span><br><span class=\"line\"></span><br><span class=\"line\">    t += frameTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是现在我将解释一下这个方法存在的一个巨大问题。问题在于你物理模拟器的行为取决于你传入的增量时间。这个效果可能很微小，因为你的游戏根据帧率有一个稍微不同的“感觉”，或者它可能和你的弹簧模拟爆炸到无穷大一样极端，快速移动的物体穿过墙壁和穿过地板的玩家！</p>\n<p>但有一点是肯定的，那就是期望你的模拟器能够正确处理传递给它的任何增量时间，是完全不切实际的。要理解为什么，考虑，如果你用 1/10 秒作为增量时间会发生什么？10 秒？100 秒？最终你会发现一个突破点。</p>\n<h3 id=\"半固定增量时间（Semi-fixed-timestep）\"><a href=\"#半固定增量时间（Semi-fixed-timestep）\" class=\"headerlink\" title=\"半固定增量时间（Semi-fixed timestep）\"></a>半固定增量时间（Semi-fixed timestep）</h3><p>更确实的说，只有当增量时间小于或等于某个最大值时，您的模拟器才能正常运行。在实践中，这通常比试图在广泛的增量时间值上进行仿真更加容易。</p>\n<p>有了这些知识，下面是一个简单的技巧，可以确保您不会在大于最大值的增量时间内传递数据，同时仍能在不同的机器上以正确的速度运行：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> t  = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dt = <span class=\"number\">1</span> / <span class=\"number\">60.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> currentTime = hires_time_in_seconds();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> newTime   = hires_time_in_seconds();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> frameTime = newTime - currentTime;</span><br><span class=\"line\">    currentTime      = newTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( frameTime &gt; <span class=\"number\">0.0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> deltaTime = min( frameTime, dt );</span><br><span class=\"line\"></span><br><span class=\"line\">        integrate( state, t, deltaTime );</span><br><span class=\"line\"></span><br><span class=\"line\">        frameTime -= deltaTime;</span><br><span class=\"line\">        t         += deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法的好处是我们现在有一个增量时间的上限。如果它是我们细分时间步长，它将永远不会大于这个最大值。缺点是我们现在每次显示更新需要多个步骤，包括一个额外的步骤来消耗 dt 不能被 div 整除的剩余帧时间。如果渲染绑定，这不成问题，但如果仿真是框架中最昂贵的部分，则可能会遇到所谓的“死亡螺旋”。</p>\n<p>什么是死亡螺旋？当你的物理模拟无法跟上要求采取的步骤时，会发生什么情况。例如，如果你的仿真被告知：“好的，请模拟 X 秒的物理学价值”，如果 Y&gt; X 时需要Y秒的实时时间，那么爱因斯坦不会意识到随着时间的推移，你的仿真会落后。这就是所谓的死亡螺旋，因为落后导致你的更新需要模拟更多的步骤才能赶上，这会导致你落后，导致你模拟更多的步骤……</p>\n<p>那么我们如何避免这种情况呢？为了确保稳定的更新，我建议留下一些空间。您确实需要确保实时更新X秒的物理模拟所需的时间 <em>显著</em> 少于X秒。如果你可以做到这一点，那么你的物理引擎可以通过模拟更多帧来“赶上”任何临时峰值。或者，您可以在每帧最大步数处进行钳位，并且在重负载下模拟似乎会减慢。可以说这比螺旋式死亡要好，尤其是如果重负荷只是暂时的高峰。</p>\n<h3 id=\"Free-the-physics\"><a href=\"#Free-the-physics\" class=\"headerlink\" title=\"Free the physics\"></a>Free the physics</h3><p>现在让我们再进一步。在给定相同输入的情况下，如果您想从一次运行到下一次运行需要准确的重现性，该怎么办？这在尝试使用确定性固定步长时，联网物理模拟非常方便，但通常也是一件很好的事情，要知道从一次运行到下一次运行，您的模拟行为完全一样，而根据渲染帧率不同，不会有任何不同行为的可能性。</p>\n<p>但是你问为什么需要完全固定的增量时间来做到这一点？当然，小余数阶段的半固定增量时间“足够好”？是的，你是对的。在大多数情况下它已经足够好了，但由于浮点运算的精度有限，它不完全相同。</p>\n<p>我们现在想要的是两全其美：模拟的固定增量时间值以及以不同帧速率渲染的能力。这两件事似乎完全不一致，它们是 - 除非我们能找到一种方法来解耦模拟和渲染帧率。</p>\n<p>以下是如何做到这一点。在固定dt时间步骤中提前进行物理仿真，同时确保它跟上来自渲染器的定时器值，以便仿真以正确的速率前进。例如，如果显示帧率为50fps，模拟运行速度为100fps，那么我们需要在每次显示更新时采取两个物理步骤。简单吧。</p>\n<p>如果显示帧率是200fps呢？那么在这种情况下，我们需要在每次显示更新时采取一半的物理步骤，但是我们不能这样做，我们必须用固定dt来提前。所以我们每两次更新显示一个物理步骤。</p>\n<p>更棘手的是，如果显示帧率是60fps，但我们希望我们的模拟以100fps运行？没有简单的倍数。没有简单的倍数。如果VSYNC被禁用并且显示帧速率在帧之间波动，该怎么办？</p>\n<p>如果你头脑发生爆炸，不用担心，解决这个问题所需的一切就是改变你的观点。与其认为自己具有一定的帧时间，则必须在渲染之前进行模拟，颠倒视角并认为它是这样的：渲染器产生时间，并且仿真在离散的dt步骤中消耗它。</p>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span>       t = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> dt = <span class=\"number\">0.01</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> currentTime = hires_time_in_seconds();</span><br><span class=\"line\"><span class=\"keyword\">double</span> accumulator = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> newTime   = hires_time_in_seconds();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> frameTime = newTime - currentTime;</span><br><span class=\"line\">    currentTime      = newTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    accumulator += frameTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( accumulator &gt;= dt )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        integrate( state, t, dt );</span><br><span class=\"line\">        accumulator -= dt;</span><br><span class=\"line\">        t += dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，与半固定时间步不同的是，我们只能将步长与dt集成在一起，因此在通常情况下，我们在每个帧的末尾都剩下一些未模拟的时间。随着时间的推移，它通过累加器变量传递到下一帧，不会被丢弃。</p>\n<h3 id=\"The-final-touch\"><a href=\"#The-final-touch\" class=\"headerlink\" title=\"The final touch\"></a>The final touch</h3><p>但是剩下的时间呢？这似乎不正确，不是吗？</p>\n<p>要了解正在发生的事情，请考虑显示帧率为60fps并且物理运行速度为50fps的情况。没有很好的倍数，所以累加器会导致模拟之间交替进行，大多数情况下，当剩余部分“积累”到 dt 之上时，每帧只需要一个和偶尔两个物理步骤。</p>\n<p>现在考虑大多数渲染帧会在累加器中剩余一些剩余帧时间，因为它小于dt，所以无法模拟。这意味着我们在与渲染时间略有不同的时间显示物理模拟的状态，导致屏幕上物理模拟的微妙但在视觉上令人不愉快的口吃。</p>\n<p>解决这个问题的一个方法是基于累加器剩余的时间在先前和当前的物理状态之间进行插值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> t  = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dt = <span class=\"number\">0.01</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> currentTime = hires_time_in_seconds();</span><br><span class=\"line\"><span class=\"keyword\">double</span> accumulator = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">State previous;</span><br><span class=\"line\">State current;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( !quit )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> newTime   = time();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> frameTime = newTime - currentTime;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( frameTime &gt; <span class=\"number\">0.25</span> )</span><br><span class=\"line\">        frameTime = <span class=\"number\">0.25</span>;</span><br><span class=\"line\">    currentTime = newTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    accumulator += frameTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( accumulator &gt;= dt )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        previousState = currentState;</span><br><span class=\"line\">        integrate( currentState, t, dt );</span><br><span class=\"line\">        t += dt;</span><br><span class=\"line\">        accumulator -= dt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> alpha = accumulator / dt;</span><br><span class=\"line\"></span><br><span class=\"line\">    State state = currentState * alpha + previousState * ( <span class=\"number\">1.0</span> - alpha );</span><br><span class=\"line\"></span><br><span class=\"line\">    render( state );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这看起来很复杂，但这是一个简单的思考方式。累加器中的任何余数实际上是在另一个整个物理步骤可以进行之前需要多少时间的度量。例如，dt / 2的其余部分意味着我们正处于当前物理步骤和下一步物理步骤之间的一半。dt * 0.1的其余部分意味着更新是当前状态和下一状态之间的十分之一。</p>\n<p>我们可以使用这个余数值来简单地通过除以dt来获得之前和当前物理状态之间的混合因子。这给出了一个在[0,1]范围内的alpha值，用于在两个物理状态之间执行线性插值以获取当前状态。这种插值对于单值和矢量状态值很容易实现。如果将方向作为四元数存储并使用球面线性插值（slerp）在前一个方向和当前方向之间进行混合，则甚至可以将其用于完整的3D刚体动力学。</p>\n"},{"title":"傻瓜函数式编程","date":"2015-12-28T00:50:30.000Z","_content":"\n2006年6月19日，星期一\n\n[原文地址](https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn)\n\n\n### 开篇\n我们这些码农做事都是很拖拉的。每天例行报到后，先来点咖啡，看看邮件还有RSS订阅的文章。然后翻翻新闻还有那些技术网站上的更新，再过一遍编程论坛口水区里那些无聊的论战。最后从头把这些再看一次以免错过什么精彩的内容。然后就可以吃午饭了。饭饱过后，回来盯着IDE发一会呆，再看看邮箱，再去搞杯咖啡。光阴似箭，可以回家了……    \n（在被众人鄙视之前）我唯一想说的是，在这些拖拉的日子里总会时不时读到一些[不明觉厉](http://www.baike.com/wiki/%E4%B8%8D%E6%98%8E%E8%A7%89%E5%8E%89)的文章。如果没有打开不应该打开的网站，每隔几天你都可以看到至少一篇这样的东西。它们的共性：难懂，耗时，于是这些文章就慢慢的堆积成山了。很快你就会发现自己已经累积了一堆的收藏链接还有数不清的PDF文件，此时你只希望隐入一个杳无人烟的深山老林里什么也不做，用一年半载好好的消化这些私藏宝贝。当然，我是说最好每天还是能有人来给送吃的顺带帮忙打扫卫生倒垃圾，哇哈哈。   \n\n我不知道你都收藏了些什么，我的阅读清单里面相当大部分都是函数式编程相关的东东：基本上是最难啃的。这些文章充斥着无比枯燥的教科书语言，我想就连那些在华尔街浸淫10年以上的大牛都无法搞懂这些函数式编程（简称FP）文章到底在说什么。你可以去花旗集团或者德意志银行找个项目经理来问问<sup>1</sup>：你们为什么要选JMS而不用Erlang？答案基本上是：我认为这个学术用的语言还无法胜任实际应用。可是，现有的一些系统不仅非常复杂还需要满足十分严苛的需求，它们就都是用函数式编程的方法来实现的。这，就说不过去了。    \n关于FP的文章确实比较难懂，但我不认为一定要搞得那么晦涩。有一些历史原因造成了这种知识断层，可是FP概念本身并不难理解。我希望这篇文章可以成为一个“FP入门指南”，帮助你从[指令式编程](http://zh.wikipedia.org/zh/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B)走向[函数式编程](http://zh.wikipedia.org/zh/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80)。先来点咖啡，然后继续读下去。很快你对FP的理解就会让同事们刮目相看了。      \n\n什么是函数式编程（Functional Programming，FP）？它从何而来？可以吃吗？倘若它真的像那些鼓吹FP的人说的那么好，为什么实际应用中那么少见？为什么只有那些在读博士的家伙想要用它？而最重要的是，它母亲的怎么就那么难学？那些所谓的closure、continuation，currying，lazy evaluation还有no side effects都是什么东东（译者：本着保留专用术语的原则，此处及下文类似情形均不译）？如果没有那些大学教授的帮忙怎样把它应用到实际工程里去？为什么它和我们熟悉的万能而神圣的指令式编程那么的不一样？      \n我们很快就会解开这些谜团。刚才我说过实际工程和学术界之间的知识断层是有其历史原因的，那么就先让我来解释一下这个问题。答案，就在接下来的一次公园漫步中：\n\n### 公园漫步\n时间机器启动……我们来到公元前380年，也就是2000多年前的雅典城外。这是一个阳光明媚的久违的春天，[柏拉图](http://zh.wikipedia.org/zh/%E6%9F%8F%E6%8B%89%E5%9B%BE)和一个帅气的小男仆走在一片橄榄树荫下。他们正准备前往一个学院。天气很好，吃得很饱，渐渐的，两人的谈话转向了哲学。     \n\n“你看那两个学生，哪一个更高一些？”，柏拉图小心的选择用字，以便让这个问题更好的引导眼前的这个小男孩。     \n小男仆望向水池旁边的两个男生，“他们差不多一样高。”。     \n“‘差不多一样高’是什么意思？”柏拉图问。    \n“嗯……从这里看来他们是一样高的，但是如果走近一点我肯定能看出差别来。”     \n柏拉图笑了。他知道这个小孩已经朝他引导的方向走了。“这么说来你的意思是世界上没有什么东西是完全相同的咯？”     \n思考了一会，小男孩回答：“是的。万物之间都至少有一丁点差别，哪怕我们无法分辨出来。”    \n说到点子上了！“那你说，如果世界上没有什么东西是完全相等的，你怎么理解‘完全相等’这个概念？”     \n小男仆看起来很困惑。“这我就不知道了。”\n\n这是人类第一次试图了解数学的本质。柏拉图认为我们所在的世界中，万事万物都是完美模型的一个近似。他同时意识到虽然我们不能感受到完美的模型，但这丝毫不会阻止我们了解完美模型的概念。柏拉图进而得出结论：完美的数学模型只存在于另外一个世界，而因为某种原因我们却可以通过联系着这两个世界的一个纽带来认识这些模型。一个简单的例子就是完美的圆形。没有人见过这样的一个圆，但是我们知道怎样的圆是完美的圆，而且可以用公式把它描述出来。      \n\n如此说来，什么是数学呢？为什么可以用数学法则来描述我们的这个宇宙？我们所处的这个世界中万事万物都可以用数学来描述吗？<sup>2</sup>\n数理哲学是一门很复杂的学科。它和其他多数哲学一样，更着重于提出问题而不是给出答案。数学就像拼图一样，很多结论都是这样推导出来的：先是确立一些互不冲突的基础原理，以及一些操作这些原理的规则，然后就可以把这些原理以及规则拼凑起来形成新的更加复杂的规则或是定理了。数学家把这种方法称为“形式系统”或是“演算”。如果你想做的话，可以用形式系统描述俄罗斯方块这个游戏。而事实上，俄罗斯方块这个游戏的实现，只要它正确运行，就是一个形式系统。只不过它以一种不常见的形式表现出来罢了。     \n\n如果[半人马阿尔法](http://zh.wikipedia.org/wiki/%E5%8D%8A%E4%BA%BA%E9%A9%AC%E5%BA%A7%CE%B1)上有文明存在的话，那里的生物可能无法解读我们的俄罗斯方块形式系统甚至是简单的圆形的形式系统，因为它们感知世界的唯一器官可能只有鼻子（译者：偶的妈你咋知道？）也许它们是无法得知俄罗斯方块的形式系统了，但是它们很有可能知道圆形。它们的圆形我们可能没法解读，因为我们的鼻子没有它们那么灵敏（译者：那狗可以么？）可是只要越过形式系统的表示方式（比如通过使用“超级鼻子”之类的工具来感知这些用味道表示的形式系统，然后使用标准的解码技术把它们翻译成人类能理解的语言），那么任何有足够智力的文明都可以理解这些形式系统的本质。     \n有意思的是，哪怕宇宙中完全不存在任何文明，类似俄罗斯方块还有圆形这样的形式系统依旧是成立的：只不过没有智慧生物去发现它们而已。这个时候如果忽然一个文明诞生了，那么这些具有智慧的生物就很有可能发现各种各样的形式系统，并且用它们发现的系统去描述各种宇宙法则。不过它们可能不会发现俄罗斯方块这样的形式系统，因为在它们的世界里没有俄罗斯方块这种东西嘛。有很多像俄罗斯方块这样的形式系统是与客观世界无关的，比如说自然数，很难说所有的自然数都与客观世界有关，随便举一个超级大的数，这个数可能就和世界上任何事物无关，因为这个世界可能不是无穷大的。\n\n### 历史回眸<sup>3</sup>\n再次启动时间机……这次到达的是20世纪30年代，离今天近了很多。无论[新](http://zh.wikipedia.org/wiki/%E6%96%B0%E5%A4%A7%E9%99%B8)[旧](http://zh.wikipedia.org/wiki/%E8%88%8A%E5%A4%A7%E9%99%B8)大陆，经济大萧条都造成了巨大的破坏。社会各阶层几乎每一个家庭都深受其害。只有极其少数的几个地方能让人们免于遭受穷困之苦。几乎没有人能够幸运的在这些避难所里度过危机，注意，我说的是几乎没有，还真的有这么些幸运儿，比如说当时普林斯顿大学的数学家们。    \n\n新建成的哥特式办公楼给普林斯顿大学带来一种天堂般的安全感。来自世界各地的逻辑学者应邀来到普林斯顿，他们将组建一个新的学部。正当大部分美国人还在为找不到一片面包做晚餐而发愁的时候，在普林斯顿却是这样一番景象：高高的天花板和木雕包覆的墙，每天品茶论道，漫步丛林。\n一个名叫[阿隆佐·邱奇](http://zh.wikipedia.org/zh/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87)(Alonzo Church)的年轻数学家就过着这样优越的生活。阿隆佐本科毕业于普林斯顿后被留在研究院。他觉得这样的生活完全没有必要，于是他鲜少出现在那些数学茶会中也不喜欢到树林里散心。阿隆佐更喜欢独处：自己一个人的时候他的工作效率更高。尽管如此他还是和普林斯顿学者保持着联系，这些人当中有[艾伦·图灵](http://zh.wikipedia.org/zh/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5)、[约翰·冯·诺伊曼](http://zh.wikipedia.org/zh/%E7%BA%A6%E7%BF%B0%C2%B7%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC)、[库尔特·哥德尔](http://zh.wikipedia.org/zh-hant/%E5%BA%93%E5%B0%94%E7%89%B9%C2%B7%E5%93%A5%E5%BE%B7%E5%B0%94)。     \n这四个人都对形式系统感兴趣。相对于现实世界，他们更关心如何解决抽象的数学问题。而他们的问题都有这么一个共同点：都在尝试解答关于计算的问题。诸如：如果有一台拥有无穷计算能力的超级机器，可以用来解决什么问题？它可以自动的解决这些问题吗？是不是还是有些问题解决不了，如果有的话，是为什么？如果这样的机器采用不同的设计，它们的计算能力相同吗？     \n在与这些人的合作下，阿隆佐设计了一个名为[lambda演算](http://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)的形式系统。这个系统实质上是为其中一个超级机器设计的编程语言。在这种语言里面，函数的参数是函数，返回值也是函数。这种函数用希腊字母lambda（[λ](http://en.wikipedia.org/wiki/Lambda)），这种系统因此得名<sup>4</sup>。有了这种形式系统，阿隆佐终于可以分析前面的那些问题并且能够给出答案了。    \n除了阿隆佐·邱奇，艾伦·图灵也在进行类似的研究。他设计了一种完全不同的系统（后来被称为[图灵机](http://zh.wikipedia.org/zh/%E5%9B%BE%E7%81%B5%E6%9C%BA)），并用这种系统得出了和阿隆佐相似的答案。到了后来人们证明了图灵机和lambda演算的能力是一样的。    \n\n如果二战没有发生，这个故事到这里就应该结束了，我的这篇小文没什么好说的了，你们也可以去看看有什么其他好看的文章。可是二战还是爆发了，整个世界陷于火海之中。那时的美军空前的大量使用炮兵。为了提高轰炸的精度，军方聘请了大批数学家夜以继日的求解各种差分方程用于计算各种火炮发射数据表。后来他们发现单纯手工计算这些方程太耗时了，为了解决这个问题，各种各样的计算设备应运而生。IBM制造的Mark一号就是用来计算这些发射数据表的第一台机器。Mark一号重5吨，由75万个零部件构成，每一秒可以完成3次运算。     \n战后，人们为提高计算能力而做出的努力并没有停止。1949年第一台电子离散变量自动计算机诞生并取得了巨大的成功。它是[冯·诺伊曼设计架构](http://zh.wikipedia.org/zh/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84)的第一个实例，也是一台现实世界中实现的图灵机。相比他的这些同事，那个时候阿隆佐的运气就没那么好了。     \n到了50年代末，一个叫John McCarthy的MIT教授（他也是普林斯顿的硕士）对阿隆佐的成果产生了兴趣。1958年他发明了一种列表处理语言（Lisp），这种语言是一种阿隆佐lambda演算在现实世界的实现，而且它能在冯·诺伊曼计算机上运行！很多计算机科学家都认识到了Lisp强大的能力。1973年在MIT人工智能实验室的一些程序员研发出一种机器，并把它叫做Lisp机。于是阿隆佐的lambda演算也有自己的硬件实现了！\n\n### 函数式编程\n函数式编程是阿隆佐思想的在现实世界中的实现。不过不是全部的lambda演算思想都可以运用到实际中，因lambda演算在设计的时候就不是为了在各种现实世界中的限制下工作的。所以，就像面向对象的编程思想一样，函数式编程只是一系列想法，而不是一套严苛的规定。有很多支持函数式编程的程序语言，它们之间的具体设计都不完全一样。在这里我将用Java写的例子介绍那些被广泛应用的函数式编程思想（没错，如果你是受虐狂你可以用Java写出函数式程序）。在下面的章节中我会在Java语言的基础上，做一些修改让它变成实际可用的函数式编程语言。那么现在就开始吧。     \n\nLambda演算在最初设计的时候就是为了研究计算相关的问题。所以函数式编程主要解决的也是计算问题，而出乎意料的是，是用函数来解决的！（译者：请理解原作者的苦心，我想他是希望加入一点调皮的风格以免读者在中途睡着或是转台……）。函数就是函数式编程中的基础元素，可以完成几乎所有的操作，哪怕最简单的计算，也是用函数完成的。我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式（这样我们就不用把所有的代码都写在同一行里了）。所以我们这里所说的‘变量’是不能被修改的。所有的变量只能被赋一次初值。在Java中就意味着每一个变量都将被声明为final（如果你用C++，就是const）。在FP中，没有非final的变量。     \n\n``` java\nfinal int i = 5;\nfinal int j = i + 3;\n```\n\n既然FP中所有的变量都是final的，可以引出两个规定：一是变量前面就没有必要再加上final这个关键字了，二是变量就不能再叫做‘变量’了……于是现在开始对Java做两个改动：所有Java中声明的变量默认为final，而且我们把所谓的‘变量’称为‘符号’。     \n到现在可能会有人有疑问：这个新创造出来的语言可以用来写什么有用的复杂一些的程序吗？毕竟，如果每个符号的值都是不能修改的，那么我们就什么东西都不能改变了！别紧张，这样的说法不完全正确。阿隆佐在设计lambda演算的时候他并不想要保留状态的值以便稍后修改这些值。他更关心的是基于数据之上的操作（也就是更容易理解的“计算”）。而且，lambda演算和图灵机已经被证明了是具有同样能力的系统，因此指令式编程能做到的函数式编程也同样可以做到。那么，怎样才能做到呢？     \n事实上函数式程序是可以保存状态的，只不过它们用的不是变量，而是函数。状态保存在函数的参数中，也就是说在栈上。如果你需要保存一个状态一段时间并且时不时的修改它，那么你可以编写一个递归函数。举个例子，试着写一个函数，用来反转一个Java的字符串。记住咯，这个程序里的变量都是默认为final的<sup>5</sup>。\n\n``` java\nString reverse(String arg) {\n    if(arg.length == 0) {\n        return arg;\n    }\n    else {\n        return reverse(arg.substring(1, arg.length)) + arg.substring(0, 1);\n    }\n}\n```\n\n这个方程运行起来会相对慢一些，因为它重复调用自己<sup>6</sup>。同时它也会大量的消耗内存，因为它会不断的分配创建内存对象。无论如何，它是用函数式编程思想写出来的。这时候可能有人要问了，为什么要用这种奇怪的方式编写程序呢？嘿，我正准备告诉你。\n\n### FP之优点\n你大概已经在想：上面这种怪胎函数怎么也不合理嘛。在我刚开始学习FP的时候我也这样想的。不过后来我知道我是错的。使用这种方式编程有很多好处。其中一些是主观的。比如说有人认为函数式程序更容易理解。这个我就不说了，哪怕街上随便找个小孩都知道‘容易理解’是多么主观的事情。幸运的是，客观方面的好处还有很多。\n\n#### 单元测试\n因为FP中的每个符号都是final的，于是没有什么函数会有副作用。谁也不能在运行时修改任何东西，也没有函数可以修改在它的作用域之外修改什么值给其他函数继续使用（在指令式编程中可以用类成员或是全局变量做到）。这意味着决定函数执行结果的唯一因素就是它的返回值，而影响其返回值的唯一因素就是它的参数。    \n这正是单元测试工程师梦寐以求的啊。现在测试程序中的函数时只需要关注它的参数就可以了。完全不需要担心函数调用的顺序，也不用费心设置外部某些状态值。唯一需要做的就是传递一些可以代表边界条件的参数给这些函数。相对于指令式编程，如果FP程序中的每一个函数都能通过单元测试，那么我们对这个软件的质量必将信心百倍。反观Java或者C++，仅仅检查函数的返回值是不够的：代码可能修改外部状态值，因此我们还需要验证这些外部的状态值的正确性。在FP语言中呢，就完全不需要。\n\n#### 调试查错\n如果一段FP程序没有按照预期设计那样运行，调试的工作几乎不费吹灰之力。这些错误是百分之一百可以重现的，因为FP程序中的错误不依赖于之前运行过的不相关的代码。而在一个指令式程序中，一个bug可能有时能重现而有些时候又不能。因为这些函数的运行依赖于某些外部状态， 而这些外部状态又需要由某些与这个bug完全不相关的代码通过某个特别的执行流程才能修改。在FP中这种情况完全不存在：如果一个函数的返回值出错了，它一直都会出错，无论你之前运行了什么代码。    \n一旦问题可以重现，解决它就变得非常简单，几乎就是一段愉悦的旅程。中断程序的运行，检查一下栈，就可以看到每一个函数调用时使用的每一个参数，这一点和指令式代码一样。不同的是指令式程序中这些数据还不足够，因为函数的运行还可能依赖于成员变量，全局变量，还有其他类的状态（而这些状态又依赖于类似的变量）。FP中的函数只依赖于传给它的参数，而这些参数就在眼前！还有，对指令式程序中函数返回值的检查并不能保证这个函数是正确运行的。还要逐一检查若干作用域以外的对象以确保这个函数没有对这些牵连的对象做出什么越轨的行为（译者：好吧，翻译到这里我自己已经有点激动了）。对于一个FP程序，你要做的仅仅是看一下函数的返回值。     \n把栈上的数据过一遍就可以得知有哪些参数传给了什么函数，这些函数又返回了什么值。当一个返回值看起来不对头的那一刻，跳进这个函数看看里面发生了什么。一直重复跟进下去就可以找到bug的源头！\n\n#### 并发执行\n不需要任何改动，所有FP程序都是可以并发执行的。由于根本不需要采用锁机制，因此完全不需要担心死锁或是并发竞争的发生。在FP程序中没有哪个线程可以修改任何数据，更不用说多线程之间了。这使得我们可以轻松的添加线程，至于那些祸害并发程序的老问题，想都不用想！     \n既然是这样，为什么没有人在那些高度并行的那些应用程序中采用FP编程呢？事实上，这样的例子并不少见。爱立信开发了一种FP语言，名叫Erlang，并应用在他们的电信交换机上，而这些交换机不仅容错度高而且拓展性强。许多人看到了Erlang的这些优势也纷纷开始使用这一语言。在这里提到的电信交换控制系统远远要比华尔街上使用的系统具有更好的扩展性也更可靠。事实上，用Erlang搭建的系统并不具备可扩展性和可靠性，而Java可以提供这些特性。Erlang只是像岩石一样结实不容易出错而已。     \nFP关于并行的优势不仅于此。就算某个FP程序本身只是单线程的，编译器也可以将其优化成可以在多CPU上运行的并发程序。以下面的程序为例：\n\n``` java\nString s1 = somewhatLongOperation1();\nString s2 = somewhatLongOperation2();\nString s3 = concatenate(s1, s2);\n```\n\n如果是函数式程序，编译器就可以对代码进行分析，然后可能分析出生成字符串s1和s2的两个函数可能会比较耗时，进而安排它们并行运行。这在指令式编程中是无法做到的，因为每一个函数都有可能修改其外部状态，然后接下来的函数又可能依赖于这些状态的值。在函数式编程中，自动分析代码并找到适合并行执行的函数十分简单，和分析C的内联函数没什么两样。从这个角度来说用FP风格编写的程序是“永不过时”的（虽然我一般不喜欢说大话空话，不过这次就算个例外吧）。硬件厂商已经没办法让CPU运行得再快了。他们只能靠增加CPU核的数量然后用并行来提高运算的速度。这些厂商故意忽略一个事实：只有可以并行的软件才能让你花大价钱买来的这些硬件物有所值。指令式的软件中只有很小一部分能做到跨核运行，而所有的函数式软件都能实现这一目标，因为FP的程序从一开始就是可以并行运行的。\n\n#### 热部署\n在Windows早期，如果要更新系统那可是要重启电脑的，而且还要重启很多次。哪怕只是安装一个新版本的播放器。到了XP的时代这种情况得到比较大的改善，尽管还是不理想（我工作的时候用的就是Windows，就在现在，我的系统托盘上就有个讨厌的图标，我不重启机子就不消失）。这一方面Unix好一些，曾经。只需要暂停一些相关的部件而不是整个操作系统，就可以安装更新了。虽然是要好一些了，对很多服务器应用来说这也还是不能接受的。电信系统要求的是100%的在线率，如果一个救急电话因为系统升级而无法拨通，成千上万的人就会因此丧命。同样的，华尔街的那些公司怎么也不能说要安装软件而在整个周末停止他们系统的服务。     \n最理想的情况是更新相关的代码而不用暂停系统的其他部件。对指令性程序来说是不可能的。想想看，试着在系统运行时卸载掉一个Java的类然后再载入这个类的新的实现，这样做的话系统中所有该类的实例都会立刻不能运行，因为该类的相关状态已经丢失了。这种情况下可能需绞尽脑汁设计复杂的版本控制代码，需要将所有这种类正在运行的实例[序列化](http://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97%E5%8C%96)，逐一销毁它们，然后创建新类的实例，将现有数据也序列化后装载到这些新的实例中，最后希望负责装载的程序可以正确的把这些数据移植到新实例中并正常的工作。这种事很麻烦，每次有新的改动都需要手工编写装载程序来完成更新，而且这些装载程序还要很小心，以免破坏了现有对象之间的联系。理论上是没问题，可是实际上完全行不通。    \nFP的程序中所有状态就是传给函数的参数，而参数都是储存在栈上的。这一特性让软件的热部署变得十分简单。只要比较一下正在运行的代码以及新的代码获得一个diff，然后用这个diff更新现有的代码，新代码的热部署就完成了。其它的事情有FP的语言工具自动完成！如果还有人认为这只存在于科幻小说中，他需要再想想：多年来Erlang工程师已经使用这种技术对它们的系统进行升级而完全不用暂停运行了。     \n\n#### 机器辅助优化及证明\nFP语言有一个特性很有意思，那就是它们是可以用数学方法来分析的。FP语言本身就是形式系统的实现，只要是能在纸上写出来的数学运算就可以用这种语言表述出来。于是只要能够用数学方法证明两段代码是一致的，编译器就可以把某段代码解析成在数学上等同的但效率又更高的另外一段代码<sup>7</sup>。 关系数据库已经用这种方法进行优化很多年了。没有理由在常规的软件行业就不能应用这种技术。\n另外，还可以用这种方法来证明代码的正确性，甚至可以设计出能够自动分析代码并为单元测试自动生成边缘测试用例的工具出来！对于那些对缺陷零容忍的系统来说，这一功能简直就是无价之宝。例如心脏起搏器，例如飞行管控系统，这几乎就是必须满足的需求。哪怕你正在开发的程序不是为了完成什么重要核心任务，这些工具也可以帮助你写出更健壮的程序，直接甩竞争对手n条大街。\n\n### 高阶函数\n我还记得在了解到FP以上的各种好处后想到：“这些优势都很吸引人，可是，如果必须非要用这种所有变量都是final的蹩脚语言，估计还是不怎么实用吧”。其实这样的想法是不对的。对于Java这样的指令式语言来说，如果所有的变量都是必须是final的，那么确实很束手束脚。然而对函数式语言来说，情况就不一样了。函数式语言提供了一种特别的抽象工具，这种工具将帮助使用者编写FP代码，让他们甚至都没想到要修改变量的值。高阶函数就是这种工具之一。     \nFP语言中的函数有别于Java或是C。可以说这种函数是一个[全集](http://zh.wikipedia.org/wiki/%E5%85%A8%E9%9B%86)：Java函数可以做到的它都能做，同时它还有更多的能力。首先，像在C里写程序那样创建一个函数：\n\n``` java\nint add(int i, int j) {\n    return i + j;\n}\n```\n\n看起来和C程序没什么区别，但是很快你就可以看出区别来。接下来我们扩展Java的编译器以便支持这种代码，也就是说，当我们写下以上的程序编译器会把它转化成下面的Java程序（别忘了，所有的变量都是final的）：\n\n``` java\nclass add_function_t {\n    int add(int i, int j) {\n        return i + j;\n    }\n}\n\nadd_function_t add = new add_function_t();\n```\n\n在这里，符号add并不是一个函数，它是只有一个函数作为其成员的简单的类。这样做有很多好处，可以在程序中把add当成参数传给其他的函数，也可以把add赋给另外一个符号，还可以在运行时创建add_function_t的实例然后在不再需要这些实例的时候由系统回收机制处理掉。这样做使得函数成为和integer或是string这样的[第一类对象](http://zh.wikipedia.org/zh/%E7%AC%AC%E4%B8%80%E9%A1%9E%E7%89%A9%E4%BB%B6)。对其他函数进行操作（比如说把这些函数当成参数）的函数，就是所谓的高阶函数。别让这个看似高深的名字吓倒你（译者：好死不死起个这个名字，初一看还准备搬出已经尘封的高数教材……），它和Java中操作其他类（也就是把一个类实例传给另外的类）的类没有什么区别。可以称这样的类为“高阶类”，但是没人会在意，因为Java圈里就没有什么很强的学术社团。（译者：这是高级黑吗？）     \n那么什么时候该用高阶函数，又怎样用呢？我很高兴有人问这个问题。设想一下，你写了一大堆程序而不考虑什么类结构设计，然后发现有一部分代码重复了几次，于是你就会把这部分代码独立出来作为一个函数以便多次调用（所幸学校里至少会教这个）。如果你发现这个函数里有一部分逻辑需要在不同的情况下实现不同的行为，那么你可以把这部分逻辑独立出来作为一个高阶函数。搞晕了？下面来看看我工作中的一个真实的例子。\n\n假设有一段Java的客户端程序用来接收消息，用各种方式对消息做转换，然后发给一个服务器。\n\n``` java\nclass MessageHandler {\n    void handleMessage(Message msg) {\n        // ...\n        msg.setClientCode(\"ABCD_123\");\n        // ...\n\n        sendMessage(msg);\n    }\n\n    // ...\n}\n```\n\n再进一步假设，整个系统改变了，现在需要发给两个服务器而不再是一个了。系统其他部分都不变，唯独客户端的代码需要改变：额外的那个服务器需要用另外一种格式发送消息。应该如何处理这种情况呢？我们可以先检查一下消息要发送到哪里，然后选择相应的格式把这个消息发出去：\n\n``` java\nclass MessageHandler {\n    void handleMessage(Message msg) {\n        // ...\n        if(msg.getDestination().equals(\"server1\") {\n            msg.setClientCode(\"ABCD_123\");\n        } else {\n            msg.setClientCode(\"123_ABC\");\n        }\n        // ...\n\n        sendMessage(msg);\n    }\n\n    // ...\n}\n```\n\n可是这样的实现是不具备扩展性的。如果将来需要增加更多的服务器，上面函数的大小将呈线性增长，使得维护这个函数最终变成一场噩梦。面向对象的编程方法告诉我们，可以把MessageHandler变成一个基类，然后将针对不同格式的消息编写相应的子类。\n\n``` java\nabstract class MessageHandler {\n    void handleMessage(Message msg) {\n        // ...\n        msg.setClientCode(getClientCode());\n        // ...\n\n        sendMessage(msg);\n    }\n\n    abstract String getClientCode();\n\n    // ...\n}\n\nclass MessageHandlerOne extends MessageHandler {\n    String getClientCode() {\n        return \"ABCD_123\";\n    }\n}\n\nclass MessageHandlerTwo extends MessageHandler {\n    String getClientCode() {\n        return \"123_ABCD\";\n    }\n}\n```\n\n这样一来就可以为每一个接收消息的服务器生成一个相应的类对象，添加服务器就变得更加容易维护了。可是，这一个简单的改动引出了很多的代码。仅仅是为了支持不同的客户端行为代码，就要定义两种新的类型！现在来试试用我们刚才改造的语言来做同样的事情，注意，这种语言支持高阶函数：\n\n``` java\nclass MessageHandler {\n    void handleMessage(Message msg, Function getClientCode) {\n        // ...\n        Message msg1 = msg.setClientCode(getClientCode());\n        // ...\n\n        sendMessage(msg1);\n    }\n\n    // ...\n}\n\nString getClientCodeOne() {\n    return \"ABCD_123\";\n}\n\nString getClientCodeTwo() {\n    return \"123_ABCD\";\n}\n\nMessageHandler handler = new MessageHandler();\nhandler.handleMessage(someMsg, getClientCodeOne);\n```\n\n在上面的程序里，我们没有创建任何新的类型或是多层类的结构。仅仅是把相应的函数作为参数进行传递，就做到了和用面向对象编程一样的事情，而且还有额外的好处：一是不再受限于多层类的结构。这样做可以做运行时传递新的函数，可以在任何时候改变这些函数，而且这些改变不仅更加精准而且触碰的代码更少。这种情况下编译器其实就是在替我们编写面向对象的“粘合”代码（译者：又称胶水代码，粘接代码）！除此之外我们还可以享用FP编程的其他所有优势。函数式编程能提供的抽象服务还远不止于此。高阶函数只不过是个开始。\n\n### Currying\n我遇见的大多数码农都读过“[四人帮](http://baike.baidu.com/view/66964.htm#2)”的那本《设计模式》。任何稍有自尊心的码农都会说这本书和语言无关，因此无论你用什么编程语言，当中提到的那些模式大体上适用于所有软件工程。听起来很厉害，然而事实却不是这样。    \n函数式语言的表达能力很强。用这种语言编程的时候基本不需要设计模式，因为这种语言层次已经足够高，使得使用者可以以概念编程，从而完全不需要设计模式了。以[适配器模式](http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F)为例（有人知道这个模式和[外观模式](http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F)有什么区别吗？怎么觉得有人为了出版合同的要求而硬生生凑页数？）（译者：您不愧是高级黑啊）。对于一个支持currying技术的语言来说，这个模式就是多余的。     \n在Java中最有名的适配器模式就是在其“默认”抽象单元中的应用：类。在函数式语言中这种模式其实就是函数。在这个模式中，一个接口被转换成另外一个接口，让不同的用户代码调用。接下来就有一个适配器模式的例子：\n\n``` java\nint pow(int i, int j);\nint square(int i)\n{\n    return pow(i, 2);\n}\n```\n\n上面的代码中square函数计算一个整数的平方，这个函数的接口被转换成计算一个整数的任意整数次幂。在学术圈里这种简单的技术就被叫做currying（因为逻辑学家[哈斯凯尔·加里](http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F)用其数学技巧将这种技术描述出来，于是就以他的名字来命名了）。在一个FP语言中函数（而不是类）被作为参数进行传递，currying常常用于转化一个函数的接口以便于其他代码调用。函数的接口就是它的参数，于是currying通常用于减少函数参数的数量（见前例）。     \n函数式语言生来就支持这一技术，于是没有必要为某个函数手工创建另外一个函数去包装并转换它的接口，这些函数式语言已经为你做好了。我们继续拓展Java来支持这一功能。    \n\n``` java\nsquare = int pow(int i, 2);\n```\n\n上面的语句实现了一个平方计算函数，它只需要一个参数。它会继而调用pow函数并且把第二个参数置为2。编译过后将生成以下Java代码：\n\n``` java\nclass square_function_t {\n    int square(int i) {\n        return pow(i, 2);\n    }\n}\nsquare_function_t square = new square_function_t();\n```\n\n从上面的例子可以看到，很简单的，函数pow的封装函数就创建出来了。在FP语言中currying就这么简单：一种可以快速且简单的实现函数封装的捷径。我们可以更专注于自己的设计，编译器则会为你编写正确的代码！什么时候使用currying呢？很简单，当你想要用适配器模式（或是封装函数）的时候，就是用currying的时候。\n\n### [惰性求值](http://zh.wikipedia.org/zh/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC)\n惰性求值（或是延迟求值）是一种有趣的技术，而当我们投入函数式编程的怀抱后这种技术就有了得以实现的可能。前面介绍并发执行的时候已经提到过如下代码：\n\n``` java\nString s1 = somewhatLongOperation1();\nString s2 = somewhatLongOperation2();\nString s3 = concatenate(s1, s2);\n```\n\n在指令式语言中以上代码执行的顺序是显而易见的。由于每个函数都有可能改动或者依赖于其外部的状态，因此必须顺序执行。先是计算somewhatLongOperation1，然后到somewhatLongOperation2，最后执行concatenate。函数式语言就不一样了。    \n在前面讨论过，somewhatLongOperation1和somewhatLongOperation2是可以并发执行的，因为函数式语言保证了一点：没有函数会影响或者依赖于全局状态。可是万一我们不想要这两个函数并发执行呢？这种情况下是不是也还是要顺序执行这些函数？答案是否定的。只有到了执行需要s1、s2作为参数的函数的时候，才真正需要执行这两个函数。于是在concatenate这个函数没有执行之前，都没有需要去执行这两个函数：这些函数的执行可以一直推迟到concatenate()中需要用到s1和s2的时候。假如把concatenate换成另外一个函数，这个函数中有条件判断语句而且实际上只会需要两个参数中的其中一个，那么就完全没有必要执行计算另外一个参数的函数了！Haskell语言就是一个支持惰性求值的例子。Haskell不能保证任何语句会顺序执行（甚至完全不会执行到），因为Haskell的代码只有在需要的时候才会被执行到。       \n除了这些优点，惰性求值也有缺点。这里介绍了它的优点，我们将在下一章节介绍这些缺点以及如何克服它们。     \n\n#### 代码优化\n惰性求值使得代码具备了巨大的优化潜能。支持惰性求值的编译器会像数学家看待代数表达式那样看待函数式程序：抵消相同项从而避免执行无谓的代码，安排代码执行顺序从而实现更高的执行效率甚至是减少错误。在此基础上优化是不会破坏代码正常运行的。严格使用形式系统的基本元素进行编程带来的最大的好处，是可以用数学方法分析处理代码，因为这样的程序是完全符合数学法则的。\n\n#### 抽象化控制结构\n惰性求值技术提供了更高阶的抽象能力，这提供了实现程序设计独特的方法。比如说下面的控制结构：\n\n``` java\nunless(stock.isEuropean()) {\n    sendToSEC(stock);\n}\n```\n\n程序中只有在stock为European的时候才执行sendToSEC。如何实现例子中的unless？如果没有惰性求值就需要求助于某种形式的宏（译者：用if不行么？），不过在像Haskell这样的语言中就不需要那么麻烦了。直接实现一个unless函数就可以！\n\n``` java\nvoid unless(boolean condition, List code) {\n    if(!condition)\n        code;\n}\n```\n\n请注意，如果condition值为真，那就不会计算code。在其他严格语言（见[严格求值](http://zh.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5#.E4.B8.A5.E6.A0.BC.E6.B1.82.E5.80.BC_.28Strict_evaluation.29)）中这种行为是做不到的，因为在进入unless这个函数之前，作为参数的code已经被计算过了。\n#### 无穷数据结构\n惰性求值技术允许定义无穷数据结构，这要在严格语言中实现将非常复杂。例如一个储存Fibonacci数列数字的列表。很明显这样一个列表是无法在有限的时间内计算出这个无穷的数列并存储在内存中的。在像Java这样的严格语言中，可以定义一个Fibonacci函数，返回这个序列中的某个数。而在Haskell或是类似的语言中，可以把这个函数进一步抽象化并定义一个Fibonacci数列的无穷列表结构。由于语言本身支持惰性求值，这个列表中只有真正会被用到的数才会被计算出来。这让我们可以把很多问题抽象化，然后在更高的层面上解决它们（比如可以在一个列表处理函数中处理无穷多数据的列表）。\n#### 不足之处\n俗话说天下没有免费的午餐™。惰性求值当然也有其缺点。其中最大的一个就是，嗯，惰性。现实世界中很多问题还是需要严格求值的。比如说下面的例子：   \n\n``` java\nSystem.out.println(\"Please enter your name: \");\nSystem.in.readLine();\n```\n\n在惰性语言中没人能保证第一行会中第二行之前执行！这也就意味着我们不能处理IO，不能调用系统函数做任何有用的事情（这些函数需要按照顺序执行，因为它们依赖于外部状态），也就是说不能和外界交互了！如果在代码中引入支持顺序执行的代码原语，那么我们就失去了用数学方式分析处理代码的优势（而这也意味着失去了函数式编程的所有优势）。幸运的是我们还不算一无所有。数学家们研究了不同的方法用以保证代码按一定的顺序执行（in a functional setting?）。这一来我们就可以同时利用到函数式和指令式编程的优点了！这些方法有continuations，monads以及uniqueness typing。这篇文章仅仅介绍了continuations，以后再讨论monads和uniqueness typing。有意思的是呢，coutinuations处理强制代码以特定顺序执行之外还有其他很多出处，这些我们在后面也会提及。\n\n### Continuation\ncontinuation对于编程，就像是达芬奇密码对于人类历史一样：它揭开了人类有史以来最大的谜团。好吧，也许没有那么夸张，不过它们的影响至少和当年发现负数有平方根不相上下。\n\n我们对函数的理解只有一半是正确的，因为这样的理解基于一个错误的假设：函数一定要把其返回值返回给调用者。按照这样的理解，continuation就是更加广义的函数。这里的函数不一定要把返回值传回给调用者，相反，它可以把返回值传给程序中的任意代码。continuation就是一种特别的参数，把这种参数传到函数中，函数就能够根据continuation将返回值传递到程序中的某段代码中。说得很高深，实际上没那么复杂。直接来看看下面的例子好了：\n\n``` java\nint i = add(5, 10);\nint j = square(i);\n```\n\nadd这个函数将返回15然后这个值会赋给i，这也是add被调用的地方。接下来i的值又会被用于调用square。请注意支持惰性求值的编译器是不能打乱这段代码执行顺序的，因为第二个函数的执行依赖于第一个函数成功执行并返回结果。这段代码可以用Continuation Pass Style（CPS）技术重写，这样一来add的返回值就不是传给其调用者，而是直接传到square里去了。     \n\n``` java\nint j = add(5, 10, square);\n```\n\n在上例中，add多了一个参数：一个函数，add必须在完成自己的计算后，调用这个函数并把结果传给它。这时square就是add的一个continuation。上面两段程序中j的值都是225。    \n\n这样，我们学习到了强制惰性语言顺序执行两个表达式的第一个技巧。再来看看下面IO程序（是不是有点眼熟？）：\n\n``` java\nSystem.out.println(\"Please enter your name: \");\nSystem.in.readLine();\n```\n\n这两行代码彼此之间没有依赖关系，因此编译器可以随意的重新安排它们的执行顺序。可是只要用CPS重写它，编译器就必须顺序执行了，因为重写后的代码存在依赖关系了。\n\n``` java\nSystem.out.println(\"Please enter your name: \", System.in.readLine);\n```\n\n这段新的代码中println需要结合其计算结果调用readLine，然后再返回readLine的返回值。这使得两个函数得以保证按顺序执行而且readLine总被执行（这是由于整个运算需要它的返回值作为最终结果）。Java的println是没有返回值的，但是如果它可以返回一个能被readnLine接受的抽象值，问题就解决了！（译者：别忘了，这里作者一开始就在Java的基础上修改搭建自己的语言）当然，如果一直把函数按照这种方法串下去，代码很快就变得不可读了，可是没有人要求你一定要这样做。可以通过在语言中添加[语法糖](http://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96)的方式来解决这个问题，这样程序员只要按照顺序写代码，编译器负责自动把它们串起来就好了。于是就可以任意安排代码的执行顺序而不用担心会失去FP带来的好处了（包括可以用数学方法来分析我们的程序）！如果到这里还有人感到困惑，可以这样理解，函数只是有唯一成员的类的实例而已。试着重写上面两行程序，让println和readLine编程这种类的实例，所有问题就都搞清楚了。       \n到这里本章基本可以结束了，而我们仅仅了解到continuation的一点皮毛，对它的用途也知之甚少。我们可以用CPS完成整个程序，程序里所有的函数都有一个额外的continuation作为参数接受其他函数的返回值。还可以把任何程序转换为CPS的，需要做的只是把当中的函数看作是特殊的continuation（总是将返回值传给调用者的continuation）就可以了，简单到完全可以由工具自动完成（史上很多编译器就是这样做的）。    \n\n一旦将程序转为CPS的风格，有些事情就变得显而易见了：每一条指令都会有一些continuation，都会将它的计算结果传给某一个函数并调用它，在一个普通的程序中这个函数就是该指令被调用并且返回的地方。随便找个之前提到过的代码，比如说add(5,10)好了。如果add属于一个用CPS风格写出的程序，add的continuation很明显就是当它执行结束后要调用的那个函数。可是在一个非CPS的程序中，add的continuation又是什么呢？当然我们还是可以把这段程序转成CPS的，可是有必要这样做吗？     \n事实上没有必要。注意观察整个CPS转换过程，如果有人尝试要为CPS程序写编译器并且认真思考过就会发现：CPS的程序是不需要栈的！在这里完全没有函数需要做传统意义上的“返回”操作，函数执行完后仅需要接着调用另外一个函数就可以了。于是就不需要在每次调用函数的时候把参数压栈再将它们从中取出，只要把这些参数存放在一片内存中然后使用跳转指令就解决问题了。也完全不需要保留原来的参数：因为这种程序里的函数都不返回，所以它们不会被用第二次！     \n简单点说呢，用CPS风格写出来的程序不需要栈，但是每次调用函数的时候都会要多加一个参数。非CPS风格的程序不需要额外的参数但又需要栈才能运行。栈里面存的是什么？仅仅是参数还有一个供函数运行结束后返回的程序指针而已。这个时候你是不是已经恍然大悟了？对啊，栈里面的数据实际上就是continuation的信息！栈上的程序返回指针实质上就是CPS程序中需要调用的下一个函数！想要知道add(5, 10)的continuation是什么？只要看它运行时栈的内容就可以了。      \n接下来就简单多了。continuation和栈上指示函数返回地址的指针其实是同一样东西，只是continuation是显式的传递该地址并且因此代码就不局限于只能返回到函数被调用的地方了。前面说过，continuation就是函数，而在我们特制的语言中函数就是类的实例，那么可以得知栈上指向函数返回地址的指针和continuation的参数是一样的，因为我们所谓的函数（就像类的一个实例）其实就是指针。这也意味着在程序运行的任何时候，你都可以得到当前的continuation（就是栈上的信息）。     \n\n好了，我们已经搞清楚当前的continuation是什么了。接下来要弄明白它的存在有什么意义。只要得到了当前的continuation并将它保存起来，就相当于保存了程序的当前状态：在时间轴上把它冻结起来了。这有点像操作系统进入休眠状态。continuation对象保存了足够的信息随时可以从指定的某个状态继续运行程序。在切换线程的时候操作系统也是这样做的。唯一的区别在于它保留了所有的控制权利。当请求某个continuation对象时（在Scheme语言中是通过调用call-with-current-continuation函数实现的）得到的是一个存有当前continuation的对象，也就是栈对象（在CPS中也就是下一个要执行的函数）。可以把这个对象保存做一个变量中（或者是存在磁盘上）。当以该continuation对象“重启”该程序时，程序的状态就会立即“转换”为该对象中保存的状态。这一点和切换回一个被暂停的线程或是从系统休眠中唤醒很相像，唯一不同的是continuatoin对象可以反复的这样使用。当系统唤醒后，休眠前保存的信息就会销毁，否则你也可以反复的从该点唤醒系统，就像乘时光机回到过去一样。有了continuation你就可以做到这一点！       \n\n那么continuation在什么情况下有用呢？有一些应用程序天生就没有状态，如果要在这样的系统中模拟出状态以简化工作的时候，就可以用到continuation。最合适的应用场合之一就是网页应用程序。微软的ASP.NET为了让程序员更轻松的编写应用程序，花了大量的精力去模拟各种状态。假如C#支持continuation的话，那么ASP.NET的复杂度将减半：因为只要把某一时刻的continuation保存起来，下次用户再次发起同样请求的时候，重新载入这个continuation即可。对于网络应用的程序员来说就再也没有中断了：轻轻松松程序就从下一行开始继续运行了！对于一些实际问题来说，continuation是一种非常有用的抽象工具。如今大量的传统胖客户端（见[瘦客户端](http://zh.wikipedia.org/wiki/%E7%98%A6%E5%AE%A2%E6%88%B7%E7%AB%AF)）正纷纷走进网络，continuation在未来将扮演越来越重要的角色。\n\n### 模式匹配\n模式匹配并不是什么新功能。而事实上它和函数式编程也没有什么太大的关系。它之所以常常被认为是FP的一个特性，是因为在函数式语言已经支持模式匹配很长一段时间后的今天，指令式语言是还没有这个功能。\n\n还是直接用例子来看看什么是模式匹配吧，这是一个用Java写的Fibonacci函数：\n\n``` java\nint fib(int n) {\n    if(n == 0) return 1;\n    if(n == 1) return 1;\n\n    return fib(n - 2) + fib(n - 1);\n}\n```\n\n再看看用我们基于Java修改过的新语言写出来的Fibonacci函数，这种新语言就支持模式匹配：\n\n``` java\nint fib(0) {\n    return 1;\n}\nint fib(1) {\n    return 1;\n}\nint fib(int n) {\n    return fib(n - 2) + fib(n - 1);\n}\n```\n\n区别在哪里呢？在于后者的编译器替我们实现了程序的分支。    \n这有什么了不起的？确实也没什么。只是有人注意到很多函数中有非常复杂的switch结构（对于函数式程序而言更是如此），于是想到如果能把这层结构也抽象化就更好了。然后就把这个复杂的函数拆分成若干新的函数，并在这些函数的某些参数中应用模式（这和[重载](http://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD)有点类似）。这样依赖当这个函数被调用的时候，编译器会在运行时将调用者传入的参数与各个新函数的参数定义进行比较，找出合适的那个函数来执行。合适的函数往往是参数定义上最具体最接近传入参数的那个函数。在这个例子中，当n为1时，可以用函数int fib(int n)，不过真正调用的是int fib(1)因为这个函数更具体更接近调用者的要求。     \n模式匹配一般来说要比这里举的例子更加复杂。比如说，高级模式匹配系统可以支持下面的操作：\n\n``` java\nint f(int n < 10) { ... }\nint f(int n) { ... }\n```\n\n那么什么情况下模式匹配会有用呢？在需要处理一大堆程序分支的时候！每当需要实现复杂的嵌套if语句的时候，模式匹配可以帮助你用更少的代码更好的完成任务。我所知道的一个这样的函数是标准的WndProc函数，该函数是所有Win32应用程序必须具备的（尽管它经常会被抽象化）。模式匹配系统一般都可以像匹配简单数值一样匹配数据集合。举个例子，对于一个接受数组作为参数的函数，可以通过模式匹配数组中第一个数字为1并且第三个数字大于3的输入。\n模式匹配的另外一个好处是每当需要添加或者修改程序分支时，再也不用面对那个庞大臃肿的函数了。只要添加（或者修改）相关的函数定义即可。有了模式匹配就不再需要四人帮的很多设计模式了。程序分支越多越复杂，模式匹配就越有用。而在习惯使用这一技术之后，你可能会怀疑没有它你一天都过不下去了。\n\n### Closure\n目前为止关于函数式编程各种功能的讨论都只局限在“纯”函数式语言范围内：这些语言都是lambda演算的实现并且都没有那些和阿隆佐形式系统相冲突的特性。然而，很多函数式语言的特性哪怕是在lambda演算框架之外都是很有用的。确实，如果一个公理系统的实现可以用数学思维来看待程序，那么这个实现还是很有用的，但这样的实现却不一定可以付诸实践。很多现实中的语言都选择吸收函数式编程的一些元素，却又不完全受限于函数式教条的束缚。很多这样的语言（比如Common Lisp）都不要求所有的变量必须为final，可以修改他们的值。也不要求函数只能依赖于它们的参数，而是可以读写函数外部的状态。同时这些语言又包含了FP的特性，如高阶函数。与在lambda演算限制下将函数作为参数传递不同，在指令式语言中要做到同样的事情需要支持一个有趣的特性，人们常把它称为lexical closure。还是来看看例子。要注意的是，这个例子中变量不是final，而且函数也可以读写其外部的变量：\n\n``` java\nFunction makePowerFn(int power) {\n    int powerFn(int base) {\n        return pow(base, power);\n    }\n\n    return powerFn;\n}\n\nFunction square = makePowerFn(2);\nsquare(3); // returns 9\n```\n\nmakePowerFn函数返回另一个函数，这个新的函数需要一个整数参数然后返回它的平方值。执行square(3)的时候具体发生了什么事呢？变量power并不在powerFn的域内，因为makePowerFn早就运行结束返回了，所以它的栈也已经不存在了。那么square又是怎么正常工作的呢？这个时候需要语言通过某种方式支持继续存储power的值，以便square后面继续使用。那么如果再定义一个函数，cube，用来计算立方，又应该怎么做呢？那么运行中的程序就必须存储两份power的值，提供给makePowerFn生成的两个函数分别使用。这种保存变量值的方法就叫做closure。closure不仅仅保存宿主函数的参数值，还可以用在下例的用法中：\n\n``` java\nFunction makeIncrementer() {\n    int n = 0;\n\n    int increment() {\n        return ++n;\n    }\n}\n\nFunction inc1 = makeIncrementer();\nFunction inc2 = makeIncrementer();\n\ninc1(); // returns 1;\ninc1(); // returns 2;\ninc1(); // returns 3;\ninc2(); // returns 1;\ninc2(); // returns 2;\ninc2(); // returns 3;\n```\n\n运行中的程序负责存储n的值，以便incrementer稍后可以访问它。与此同时，程序还会保存多份n的拷贝，虽然这些值应该在makeIncrementer返回后就消失，但在这个情况下却继续保留下来给每一个incrementer对象使用。这样的代码编译之后会是什么样子？closure幕后的真正工作机理又是什么？这次运气不错，我们有一个后台通行证，可以一窥究竟。    \n一点小常识往往可以帮大忙。乍一看这些本地变量已经不再受限于基本的域限制并拥有无限的生命周期了。于是可以得出一个很明显的结论：它们已经不是存在栈上，而是堆上了<sup>8</sup>。这么说来closure的实现和前面讨论过的函数差不多，只不过closure多了一个额外的引用指向其外部的变量而已：\n\n``` java\nclass some_function_t {\n    SymbolTable parentScope;\n\n    // ...\n}\n```\n\n当closure需要访问不在它本地域的变量时，就可以通过这个引用到更外一层的父域中寻找该变量。谜底揭开了！closure将函数编程与面向对象的方法结合了起来。下一次为了保存并传递某些状态而创建类的时候，想想closure。它能在运行时从相应的域中获得变量，从而可以把该变量当初“成员变量”来访问，也因为这样，就不再需要去创建一个成员变量了。\n\n### 路在何方？\n这篇文章仅仅涉及到函数式编程的一些皮毛。考虑到有时候星星之火可以燎原，所以如果它能给你一些帮助那就再好不过了。接下来我计划就[范畴论](http://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA)、monads、函数式编程数据结构、函数式语言中的[类型系统](http://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1)、并行函数式编程、数据库的函数式编程以及更多的话题写些类似的文章。如果我可以写出（在我学习的同时）以上清单的一半，我的人生就完整了。于此同时，Google将是我们的良师益友。\n\n### 欢迎联系\n如果您有任何问题，评价或者建议，请发邮件到coffeemug@gmail.com（译者：如果翻译方面的问题／建议请发到yang.huang@ymail.com:)）。期待您的回复。\n\n注：     \n<sup>1</sup>当我在2005年求职时的的确确经常问别人这个问题。看着那些茫然的面孔实在是很好玩的事情。你们这些年薪30万美金的家伙，至少应该对自己可以利用的工具有个起码的理解嘛。     \n<sup>2</sup>这是个有争议的问题。物理学家和数学家不得不承认目前还无法确定宇宙万物是不是都遵从可以用数学方法描述的各种法则。     \n<sup>3</sup>我一直一来都很讨厌在历史课上罗列一堆枯燥无味的时间、人名、事件。对我来说历史就是关于那些改变世界的人们活生生的故事，是他们行为背后的个人动机，是那些他们用以影响芸芸众生的方法和工具。从这个角度来说，接下来的这堂历史课是不完整的，很遗憾。只有那些非常相关的人和事会被提及。     \n<sup>4</sup>在我学习函数式编程的时候，“lambda”这个术语搞得我很烦，因为我不知道它到底是什么意思。在这里lambda就是一个函数，在数学符号中用这个希腊字母只是因为它更容易写。所以以后在谈及函数式编程的时候只要你听到lambda，把它在脑中翻译为“函数”就可以了。      \n<sup>5</sup>有意思的是不论如何Java中的字符串总是不可修改的。讨论这种背叛Java的设计背后的原因会很有意思，可惜这样会让我们跑题的。     \n<sup>6</sup>大部分函数式语言的编译器都会尽量将迭代函数转换为对等的循环语句。这种做法叫做[尾调用优化](http://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8)。      \n<sup>7</sup>反之则不一定成立。尽管有时候可以证明两段代码是等价的，但不是在所有的情况下都可以得出这样的结论。      \n<sup>8</sup>实际上这样做并不比栈上存储要慢，因为在引入[垃圾回收机制](http://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8))后，内存分配操作的时间代价仅为O(1)。     \n","source":"_posts/functional-programming.md","raw":"---\ntitle: \"傻瓜函数式编程\"\ndate: 2015-12-28 16:50:30 +08:00\ntags: functional\n---\n\n2006年6月19日，星期一\n\n[原文地址](https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn)\n\n\n### 开篇\n我们这些码农做事都是很拖拉的。每天例行报到后，先来点咖啡，看看邮件还有RSS订阅的文章。然后翻翻新闻还有那些技术网站上的更新，再过一遍编程论坛口水区里那些无聊的论战。最后从头把这些再看一次以免错过什么精彩的内容。然后就可以吃午饭了。饭饱过后，回来盯着IDE发一会呆，再看看邮箱，再去搞杯咖啡。光阴似箭，可以回家了……    \n（在被众人鄙视之前）我唯一想说的是，在这些拖拉的日子里总会时不时读到一些[不明觉厉](http://www.baike.com/wiki/%E4%B8%8D%E6%98%8E%E8%A7%89%E5%8E%89)的文章。如果没有打开不应该打开的网站，每隔几天你都可以看到至少一篇这样的东西。它们的共性：难懂，耗时，于是这些文章就慢慢的堆积成山了。很快你就会发现自己已经累积了一堆的收藏链接还有数不清的PDF文件，此时你只希望隐入一个杳无人烟的深山老林里什么也不做，用一年半载好好的消化这些私藏宝贝。当然，我是说最好每天还是能有人来给送吃的顺带帮忙打扫卫生倒垃圾，哇哈哈。   \n\n我不知道你都收藏了些什么，我的阅读清单里面相当大部分都是函数式编程相关的东东：基本上是最难啃的。这些文章充斥着无比枯燥的教科书语言，我想就连那些在华尔街浸淫10年以上的大牛都无法搞懂这些函数式编程（简称FP）文章到底在说什么。你可以去花旗集团或者德意志银行找个项目经理来问问<sup>1</sup>：你们为什么要选JMS而不用Erlang？答案基本上是：我认为这个学术用的语言还无法胜任实际应用。可是，现有的一些系统不仅非常复杂还需要满足十分严苛的需求，它们就都是用函数式编程的方法来实现的。这，就说不过去了。    \n关于FP的文章确实比较难懂，但我不认为一定要搞得那么晦涩。有一些历史原因造成了这种知识断层，可是FP概念本身并不难理解。我希望这篇文章可以成为一个“FP入门指南”，帮助你从[指令式编程](http://zh.wikipedia.org/zh/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B)走向[函数式编程](http://zh.wikipedia.org/zh/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80)。先来点咖啡，然后继续读下去。很快你对FP的理解就会让同事们刮目相看了。      \n\n什么是函数式编程（Functional Programming，FP）？它从何而来？可以吃吗？倘若它真的像那些鼓吹FP的人说的那么好，为什么实际应用中那么少见？为什么只有那些在读博士的家伙想要用它？而最重要的是，它母亲的怎么就那么难学？那些所谓的closure、continuation，currying，lazy evaluation还有no side effects都是什么东东（译者：本着保留专用术语的原则，此处及下文类似情形均不译）？如果没有那些大学教授的帮忙怎样把它应用到实际工程里去？为什么它和我们熟悉的万能而神圣的指令式编程那么的不一样？      \n我们很快就会解开这些谜团。刚才我说过实际工程和学术界之间的知识断层是有其历史原因的，那么就先让我来解释一下这个问题。答案，就在接下来的一次公园漫步中：\n\n### 公园漫步\n时间机器启动……我们来到公元前380年，也就是2000多年前的雅典城外。这是一个阳光明媚的久违的春天，[柏拉图](http://zh.wikipedia.org/zh/%E6%9F%8F%E6%8B%89%E5%9B%BE)和一个帅气的小男仆走在一片橄榄树荫下。他们正准备前往一个学院。天气很好，吃得很饱，渐渐的，两人的谈话转向了哲学。     \n\n“你看那两个学生，哪一个更高一些？”，柏拉图小心的选择用字，以便让这个问题更好的引导眼前的这个小男孩。     \n小男仆望向水池旁边的两个男生，“他们差不多一样高。”。     \n“‘差不多一样高’是什么意思？”柏拉图问。    \n“嗯……从这里看来他们是一样高的，但是如果走近一点我肯定能看出差别来。”     \n柏拉图笑了。他知道这个小孩已经朝他引导的方向走了。“这么说来你的意思是世界上没有什么东西是完全相同的咯？”     \n思考了一会，小男孩回答：“是的。万物之间都至少有一丁点差别，哪怕我们无法分辨出来。”    \n说到点子上了！“那你说，如果世界上没有什么东西是完全相等的，你怎么理解‘完全相等’这个概念？”     \n小男仆看起来很困惑。“这我就不知道了。”\n\n这是人类第一次试图了解数学的本质。柏拉图认为我们所在的世界中，万事万物都是完美模型的一个近似。他同时意识到虽然我们不能感受到完美的模型，但这丝毫不会阻止我们了解完美模型的概念。柏拉图进而得出结论：完美的数学模型只存在于另外一个世界，而因为某种原因我们却可以通过联系着这两个世界的一个纽带来认识这些模型。一个简单的例子就是完美的圆形。没有人见过这样的一个圆，但是我们知道怎样的圆是完美的圆，而且可以用公式把它描述出来。      \n\n如此说来，什么是数学呢？为什么可以用数学法则来描述我们的这个宇宙？我们所处的这个世界中万事万物都可以用数学来描述吗？<sup>2</sup>\n数理哲学是一门很复杂的学科。它和其他多数哲学一样，更着重于提出问题而不是给出答案。数学就像拼图一样，很多结论都是这样推导出来的：先是确立一些互不冲突的基础原理，以及一些操作这些原理的规则，然后就可以把这些原理以及规则拼凑起来形成新的更加复杂的规则或是定理了。数学家把这种方法称为“形式系统”或是“演算”。如果你想做的话，可以用形式系统描述俄罗斯方块这个游戏。而事实上，俄罗斯方块这个游戏的实现，只要它正确运行，就是一个形式系统。只不过它以一种不常见的形式表现出来罢了。     \n\n如果[半人马阿尔法](http://zh.wikipedia.org/wiki/%E5%8D%8A%E4%BA%BA%E9%A9%AC%E5%BA%A7%CE%B1)上有文明存在的话，那里的生物可能无法解读我们的俄罗斯方块形式系统甚至是简单的圆形的形式系统，因为它们感知世界的唯一器官可能只有鼻子（译者：偶的妈你咋知道？）也许它们是无法得知俄罗斯方块的形式系统了，但是它们很有可能知道圆形。它们的圆形我们可能没法解读，因为我们的鼻子没有它们那么灵敏（译者：那狗可以么？）可是只要越过形式系统的表示方式（比如通过使用“超级鼻子”之类的工具来感知这些用味道表示的形式系统，然后使用标准的解码技术把它们翻译成人类能理解的语言），那么任何有足够智力的文明都可以理解这些形式系统的本质。     \n有意思的是，哪怕宇宙中完全不存在任何文明，类似俄罗斯方块还有圆形这样的形式系统依旧是成立的：只不过没有智慧生物去发现它们而已。这个时候如果忽然一个文明诞生了，那么这些具有智慧的生物就很有可能发现各种各样的形式系统，并且用它们发现的系统去描述各种宇宙法则。不过它们可能不会发现俄罗斯方块这样的形式系统，因为在它们的世界里没有俄罗斯方块这种东西嘛。有很多像俄罗斯方块这样的形式系统是与客观世界无关的，比如说自然数，很难说所有的自然数都与客观世界有关，随便举一个超级大的数，这个数可能就和世界上任何事物无关，因为这个世界可能不是无穷大的。\n\n### 历史回眸<sup>3</sup>\n再次启动时间机……这次到达的是20世纪30年代，离今天近了很多。无论[新](http://zh.wikipedia.org/wiki/%E6%96%B0%E5%A4%A7%E9%99%B8)[旧](http://zh.wikipedia.org/wiki/%E8%88%8A%E5%A4%A7%E9%99%B8)大陆，经济大萧条都造成了巨大的破坏。社会各阶层几乎每一个家庭都深受其害。只有极其少数的几个地方能让人们免于遭受穷困之苦。几乎没有人能够幸运的在这些避难所里度过危机，注意，我说的是几乎没有，还真的有这么些幸运儿，比如说当时普林斯顿大学的数学家们。    \n\n新建成的哥特式办公楼给普林斯顿大学带来一种天堂般的安全感。来自世界各地的逻辑学者应邀来到普林斯顿，他们将组建一个新的学部。正当大部分美国人还在为找不到一片面包做晚餐而发愁的时候，在普林斯顿却是这样一番景象：高高的天花板和木雕包覆的墙，每天品茶论道，漫步丛林。\n一个名叫[阿隆佐·邱奇](http://zh.wikipedia.org/zh/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87)(Alonzo Church)的年轻数学家就过着这样优越的生活。阿隆佐本科毕业于普林斯顿后被留在研究院。他觉得这样的生活完全没有必要，于是他鲜少出现在那些数学茶会中也不喜欢到树林里散心。阿隆佐更喜欢独处：自己一个人的时候他的工作效率更高。尽管如此他还是和普林斯顿学者保持着联系，这些人当中有[艾伦·图灵](http://zh.wikipedia.org/zh/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5)、[约翰·冯·诺伊曼](http://zh.wikipedia.org/zh/%E7%BA%A6%E7%BF%B0%C2%B7%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC)、[库尔特·哥德尔](http://zh.wikipedia.org/zh-hant/%E5%BA%93%E5%B0%94%E7%89%B9%C2%B7%E5%93%A5%E5%BE%B7%E5%B0%94)。     \n这四个人都对形式系统感兴趣。相对于现实世界，他们更关心如何解决抽象的数学问题。而他们的问题都有这么一个共同点：都在尝试解答关于计算的问题。诸如：如果有一台拥有无穷计算能力的超级机器，可以用来解决什么问题？它可以自动的解决这些问题吗？是不是还是有些问题解决不了，如果有的话，是为什么？如果这样的机器采用不同的设计，它们的计算能力相同吗？     \n在与这些人的合作下，阿隆佐设计了一个名为[lambda演算](http://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)的形式系统。这个系统实质上是为其中一个超级机器设计的编程语言。在这种语言里面，函数的参数是函数，返回值也是函数。这种函数用希腊字母lambda（[λ](http://en.wikipedia.org/wiki/Lambda)），这种系统因此得名<sup>4</sup>。有了这种形式系统，阿隆佐终于可以分析前面的那些问题并且能够给出答案了。    \n除了阿隆佐·邱奇，艾伦·图灵也在进行类似的研究。他设计了一种完全不同的系统（后来被称为[图灵机](http://zh.wikipedia.org/zh/%E5%9B%BE%E7%81%B5%E6%9C%BA)），并用这种系统得出了和阿隆佐相似的答案。到了后来人们证明了图灵机和lambda演算的能力是一样的。    \n\n如果二战没有发生，这个故事到这里就应该结束了，我的这篇小文没什么好说的了，你们也可以去看看有什么其他好看的文章。可是二战还是爆发了，整个世界陷于火海之中。那时的美军空前的大量使用炮兵。为了提高轰炸的精度，军方聘请了大批数学家夜以继日的求解各种差分方程用于计算各种火炮发射数据表。后来他们发现单纯手工计算这些方程太耗时了，为了解决这个问题，各种各样的计算设备应运而生。IBM制造的Mark一号就是用来计算这些发射数据表的第一台机器。Mark一号重5吨，由75万个零部件构成，每一秒可以完成3次运算。     \n战后，人们为提高计算能力而做出的努力并没有停止。1949年第一台电子离散变量自动计算机诞生并取得了巨大的成功。它是[冯·诺伊曼设计架构](http://zh.wikipedia.org/zh/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84)的第一个实例，也是一台现实世界中实现的图灵机。相比他的这些同事，那个时候阿隆佐的运气就没那么好了。     \n到了50年代末，一个叫John McCarthy的MIT教授（他也是普林斯顿的硕士）对阿隆佐的成果产生了兴趣。1958年他发明了一种列表处理语言（Lisp），这种语言是一种阿隆佐lambda演算在现实世界的实现，而且它能在冯·诺伊曼计算机上运行！很多计算机科学家都认识到了Lisp强大的能力。1973年在MIT人工智能实验室的一些程序员研发出一种机器，并把它叫做Lisp机。于是阿隆佐的lambda演算也有自己的硬件实现了！\n\n### 函数式编程\n函数式编程是阿隆佐思想的在现实世界中的实现。不过不是全部的lambda演算思想都可以运用到实际中，因lambda演算在设计的时候就不是为了在各种现实世界中的限制下工作的。所以，就像面向对象的编程思想一样，函数式编程只是一系列想法，而不是一套严苛的规定。有很多支持函数式编程的程序语言，它们之间的具体设计都不完全一样。在这里我将用Java写的例子介绍那些被广泛应用的函数式编程思想（没错，如果你是受虐狂你可以用Java写出函数式程序）。在下面的章节中我会在Java语言的基础上，做一些修改让它变成实际可用的函数式编程语言。那么现在就开始吧。     \n\nLambda演算在最初设计的时候就是为了研究计算相关的问题。所以函数式编程主要解决的也是计算问题，而出乎意料的是，是用函数来解决的！（译者：请理解原作者的苦心，我想他是希望加入一点调皮的风格以免读者在中途睡着或是转台……）。函数就是函数式编程中的基础元素，可以完成几乎所有的操作，哪怕最简单的计算，也是用函数完成的。我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式（这样我们就不用把所有的代码都写在同一行里了）。所以我们这里所说的‘变量’是不能被修改的。所有的变量只能被赋一次初值。在Java中就意味着每一个变量都将被声明为final（如果你用C++，就是const）。在FP中，没有非final的变量。     \n\n``` java\nfinal int i = 5;\nfinal int j = i + 3;\n```\n\n既然FP中所有的变量都是final的，可以引出两个规定：一是变量前面就没有必要再加上final这个关键字了，二是变量就不能再叫做‘变量’了……于是现在开始对Java做两个改动：所有Java中声明的变量默认为final，而且我们把所谓的‘变量’称为‘符号’。     \n到现在可能会有人有疑问：这个新创造出来的语言可以用来写什么有用的复杂一些的程序吗？毕竟，如果每个符号的值都是不能修改的，那么我们就什么东西都不能改变了！别紧张，这样的说法不完全正确。阿隆佐在设计lambda演算的时候他并不想要保留状态的值以便稍后修改这些值。他更关心的是基于数据之上的操作（也就是更容易理解的“计算”）。而且，lambda演算和图灵机已经被证明了是具有同样能力的系统，因此指令式编程能做到的函数式编程也同样可以做到。那么，怎样才能做到呢？     \n事实上函数式程序是可以保存状态的，只不过它们用的不是变量，而是函数。状态保存在函数的参数中，也就是说在栈上。如果你需要保存一个状态一段时间并且时不时的修改它，那么你可以编写一个递归函数。举个例子，试着写一个函数，用来反转一个Java的字符串。记住咯，这个程序里的变量都是默认为final的<sup>5</sup>。\n\n``` java\nString reverse(String arg) {\n    if(arg.length == 0) {\n        return arg;\n    }\n    else {\n        return reverse(arg.substring(1, arg.length)) + arg.substring(0, 1);\n    }\n}\n```\n\n这个方程运行起来会相对慢一些，因为它重复调用自己<sup>6</sup>。同时它也会大量的消耗内存，因为它会不断的分配创建内存对象。无论如何，它是用函数式编程思想写出来的。这时候可能有人要问了，为什么要用这种奇怪的方式编写程序呢？嘿，我正准备告诉你。\n\n### FP之优点\n你大概已经在想：上面这种怪胎函数怎么也不合理嘛。在我刚开始学习FP的时候我也这样想的。不过后来我知道我是错的。使用这种方式编程有很多好处。其中一些是主观的。比如说有人认为函数式程序更容易理解。这个我就不说了，哪怕街上随便找个小孩都知道‘容易理解’是多么主观的事情。幸运的是，客观方面的好处还有很多。\n\n#### 单元测试\n因为FP中的每个符号都是final的，于是没有什么函数会有副作用。谁也不能在运行时修改任何东西，也没有函数可以修改在它的作用域之外修改什么值给其他函数继续使用（在指令式编程中可以用类成员或是全局变量做到）。这意味着决定函数执行结果的唯一因素就是它的返回值，而影响其返回值的唯一因素就是它的参数。    \n这正是单元测试工程师梦寐以求的啊。现在测试程序中的函数时只需要关注它的参数就可以了。完全不需要担心函数调用的顺序，也不用费心设置外部某些状态值。唯一需要做的就是传递一些可以代表边界条件的参数给这些函数。相对于指令式编程，如果FP程序中的每一个函数都能通过单元测试，那么我们对这个软件的质量必将信心百倍。反观Java或者C++，仅仅检查函数的返回值是不够的：代码可能修改外部状态值，因此我们还需要验证这些外部的状态值的正确性。在FP语言中呢，就完全不需要。\n\n#### 调试查错\n如果一段FP程序没有按照预期设计那样运行，调试的工作几乎不费吹灰之力。这些错误是百分之一百可以重现的，因为FP程序中的错误不依赖于之前运行过的不相关的代码。而在一个指令式程序中，一个bug可能有时能重现而有些时候又不能。因为这些函数的运行依赖于某些外部状态， 而这些外部状态又需要由某些与这个bug完全不相关的代码通过某个特别的执行流程才能修改。在FP中这种情况完全不存在：如果一个函数的返回值出错了，它一直都会出错，无论你之前运行了什么代码。    \n一旦问题可以重现，解决它就变得非常简单，几乎就是一段愉悦的旅程。中断程序的运行，检查一下栈，就可以看到每一个函数调用时使用的每一个参数，这一点和指令式代码一样。不同的是指令式程序中这些数据还不足够，因为函数的运行还可能依赖于成员变量，全局变量，还有其他类的状态（而这些状态又依赖于类似的变量）。FP中的函数只依赖于传给它的参数，而这些参数就在眼前！还有，对指令式程序中函数返回值的检查并不能保证这个函数是正确运行的。还要逐一检查若干作用域以外的对象以确保这个函数没有对这些牵连的对象做出什么越轨的行为（译者：好吧，翻译到这里我自己已经有点激动了）。对于一个FP程序，你要做的仅仅是看一下函数的返回值。     \n把栈上的数据过一遍就可以得知有哪些参数传给了什么函数，这些函数又返回了什么值。当一个返回值看起来不对头的那一刻，跳进这个函数看看里面发生了什么。一直重复跟进下去就可以找到bug的源头！\n\n#### 并发执行\n不需要任何改动，所有FP程序都是可以并发执行的。由于根本不需要采用锁机制，因此完全不需要担心死锁或是并发竞争的发生。在FP程序中没有哪个线程可以修改任何数据，更不用说多线程之间了。这使得我们可以轻松的添加线程，至于那些祸害并发程序的老问题，想都不用想！     \n既然是这样，为什么没有人在那些高度并行的那些应用程序中采用FP编程呢？事实上，这样的例子并不少见。爱立信开发了一种FP语言，名叫Erlang，并应用在他们的电信交换机上，而这些交换机不仅容错度高而且拓展性强。许多人看到了Erlang的这些优势也纷纷开始使用这一语言。在这里提到的电信交换控制系统远远要比华尔街上使用的系统具有更好的扩展性也更可靠。事实上，用Erlang搭建的系统并不具备可扩展性和可靠性，而Java可以提供这些特性。Erlang只是像岩石一样结实不容易出错而已。     \nFP关于并行的优势不仅于此。就算某个FP程序本身只是单线程的，编译器也可以将其优化成可以在多CPU上运行的并发程序。以下面的程序为例：\n\n``` java\nString s1 = somewhatLongOperation1();\nString s2 = somewhatLongOperation2();\nString s3 = concatenate(s1, s2);\n```\n\n如果是函数式程序，编译器就可以对代码进行分析，然后可能分析出生成字符串s1和s2的两个函数可能会比较耗时，进而安排它们并行运行。这在指令式编程中是无法做到的，因为每一个函数都有可能修改其外部状态，然后接下来的函数又可能依赖于这些状态的值。在函数式编程中，自动分析代码并找到适合并行执行的函数十分简单，和分析C的内联函数没什么两样。从这个角度来说用FP风格编写的程序是“永不过时”的（虽然我一般不喜欢说大话空话，不过这次就算个例外吧）。硬件厂商已经没办法让CPU运行得再快了。他们只能靠增加CPU核的数量然后用并行来提高运算的速度。这些厂商故意忽略一个事实：只有可以并行的软件才能让你花大价钱买来的这些硬件物有所值。指令式的软件中只有很小一部分能做到跨核运行，而所有的函数式软件都能实现这一目标，因为FP的程序从一开始就是可以并行运行的。\n\n#### 热部署\n在Windows早期，如果要更新系统那可是要重启电脑的，而且还要重启很多次。哪怕只是安装一个新版本的播放器。到了XP的时代这种情况得到比较大的改善，尽管还是不理想（我工作的时候用的就是Windows，就在现在，我的系统托盘上就有个讨厌的图标，我不重启机子就不消失）。这一方面Unix好一些，曾经。只需要暂停一些相关的部件而不是整个操作系统，就可以安装更新了。虽然是要好一些了，对很多服务器应用来说这也还是不能接受的。电信系统要求的是100%的在线率，如果一个救急电话因为系统升级而无法拨通，成千上万的人就会因此丧命。同样的，华尔街的那些公司怎么也不能说要安装软件而在整个周末停止他们系统的服务。     \n最理想的情况是更新相关的代码而不用暂停系统的其他部件。对指令性程序来说是不可能的。想想看，试着在系统运行时卸载掉一个Java的类然后再载入这个类的新的实现，这样做的话系统中所有该类的实例都会立刻不能运行，因为该类的相关状态已经丢失了。这种情况下可能需绞尽脑汁设计复杂的版本控制代码，需要将所有这种类正在运行的实例[序列化](http://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97%E5%8C%96)，逐一销毁它们，然后创建新类的实例，将现有数据也序列化后装载到这些新的实例中，最后希望负责装载的程序可以正确的把这些数据移植到新实例中并正常的工作。这种事很麻烦，每次有新的改动都需要手工编写装载程序来完成更新，而且这些装载程序还要很小心，以免破坏了现有对象之间的联系。理论上是没问题，可是实际上完全行不通。    \nFP的程序中所有状态就是传给函数的参数，而参数都是储存在栈上的。这一特性让软件的热部署变得十分简单。只要比较一下正在运行的代码以及新的代码获得一个diff，然后用这个diff更新现有的代码，新代码的热部署就完成了。其它的事情有FP的语言工具自动完成！如果还有人认为这只存在于科幻小说中，他需要再想想：多年来Erlang工程师已经使用这种技术对它们的系统进行升级而完全不用暂停运行了。     \n\n#### 机器辅助优化及证明\nFP语言有一个特性很有意思，那就是它们是可以用数学方法来分析的。FP语言本身就是形式系统的实现，只要是能在纸上写出来的数学运算就可以用这种语言表述出来。于是只要能够用数学方法证明两段代码是一致的，编译器就可以把某段代码解析成在数学上等同的但效率又更高的另外一段代码<sup>7</sup>。 关系数据库已经用这种方法进行优化很多年了。没有理由在常规的软件行业就不能应用这种技术。\n另外，还可以用这种方法来证明代码的正确性，甚至可以设计出能够自动分析代码并为单元测试自动生成边缘测试用例的工具出来！对于那些对缺陷零容忍的系统来说，这一功能简直就是无价之宝。例如心脏起搏器，例如飞行管控系统，这几乎就是必须满足的需求。哪怕你正在开发的程序不是为了完成什么重要核心任务，这些工具也可以帮助你写出更健壮的程序，直接甩竞争对手n条大街。\n\n### 高阶函数\n我还记得在了解到FP以上的各种好处后想到：“这些优势都很吸引人，可是，如果必须非要用这种所有变量都是final的蹩脚语言，估计还是不怎么实用吧”。其实这样的想法是不对的。对于Java这样的指令式语言来说，如果所有的变量都是必须是final的，那么确实很束手束脚。然而对函数式语言来说，情况就不一样了。函数式语言提供了一种特别的抽象工具，这种工具将帮助使用者编写FP代码，让他们甚至都没想到要修改变量的值。高阶函数就是这种工具之一。     \nFP语言中的函数有别于Java或是C。可以说这种函数是一个[全集](http://zh.wikipedia.org/wiki/%E5%85%A8%E9%9B%86)：Java函数可以做到的它都能做，同时它还有更多的能力。首先，像在C里写程序那样创建一个函数：\n\n``` java\nint add(int i, int j) {\n    return i + j;\n}\n```\n\n看起来和C程序没什么区别，但是很快你就可以看出区别来。接下来我们扩展Java的编译器以便支持这种代码，也就是说，当我们写下以上的程序编译器会把它转化成下面的Java程序（别忘了，所有的变量都是final的）：\n\n``` java\nclass add_function_t {\n    int add(int i, int j) {\n        return i + j;\n    }\n}\n\nadd_function_t add = new add_function_t();\n```\n\n在这里，符号add并不是一个函数，它是只有一个函数作为其成员的简单的类。这样做有很多好处，可以在程序中把add当成参数传给其他的函数，也可以把add赋给另外一个符号，还可以在运行时创建add_function_t的实例然后在不再需要这些实例的时候由系统回收机制处理掉。这样做使得函数成为和integer或是string这样的[第一类对象](http://zh.wikipedia.org/zh/%E7%AC%AC%E4%B8%80%E9%A1%9E%E7%89%A9%E4%BB%B6)。对其他函数进行操作（比如说把这些函数当成参数）的函数，就是所谓的高阶函数。别让这个看似高深的名字吓倒你（译者：好死不死起个这个名字，初一看还准备搬出已经尘封的高数教材……），它和Java中操作其他类（也就是把一个类实例传给另外的类）的类没有什么区别。可以称这样的类为“高阶类”，但是没人会在意，因为Java圈里就没有什么很强的学术社团。（译者：这是高级黑吗？）     \n那么什么时候该用高阶函数，又怎样用呢？我很高兴有人问这个问题。设想一下，你写了一大堆程序而不考虑什么类结构设计，然后发现有一部分代码重复了几次，于是你就会把这部分代码独立出来作为一个函数以便多次调用（所幸学校里至少会教这个）。如果你发现这个函数里有一部分逻辑需要在不同的情况下实现不同的行为，那么你可以把这部分逻辑独立出来作为一个高阶函数。搞晕了？下面来看看我工作中的一个真实的例子。\n\n假设有一段Java的客户端程序用来接收消息，用各种方式对消息做转换，然后发给一个服务器。\n\n``` java\nclass MessageHandler {\n    void handleMessage(Message msg) {\n        // ...\n        msg.setClientCode(\"ABCD_123\");\n        // ...\n\n        sendMessage(msg);\n    }\n\n    // ...\n}\n```\n\n再进一步假设，整个系统改变了，现在需要发给两个服务器而不再是一个了。系统其他部分都不变，唯独客户端的代码需要改变：额外的那个服务器需要用另外一种格式发送消息。应该如何处理这种情况呢？我们可以先检查一下消息要发送到哪里，然后选择相应的格式把这个消息发出去：\n\n``` java\nclass MessageHandler {\n    void handleMessage(Message msg) {\n        // ...\n        if(msg.getDestination().equals(\"server1\") {\n            msg.setClientCode(\"ABCD_123\");\n        } else {\n            msg.setClientCode(\"123_ABC\");\n        }\n        // ...\n\n        sendMessage(msg);\n    }\n\n    // ...\n}\n```\n\n可是这样的实现是不具备扩展性的。如果将来需要增加更多的服务器，上面函数的大小将呈线性增长，使得维护这个函数最终变成一场噩梦。面向对象的编程方法告诉我们，可以把MessageHandler变成一个基类，然后将针对不同格式的消息编写相应的子类。\n\n``` java\nabstract class MessageHandler {\n    void handleMessage(Message msg) {\n        // ...\n        msg.setClientCode(getClientCode());\n        // ...\n\n        sendMessage(msg);\n    }\n\n    abstract String getClientCode();\n\n    // ...\n}\n\nclass MessageHandlerOne extends MessageHandler {\n    String getClientCode() {\n        return \"ABCD_123\";\n    }\n}\n\nclass MessageHandlerTwo extends MessageHandler {\n    String getClientCode() {\n        return \"123_ABCD\";\n    }\n}\n```\n\n这样一来就可以为每一个接收消息的服务器生成一个相应的类对象，添加服务器就变得更加容易维护了。可是，这一个简单的改动引出了很多的代码。仅仅是为了支持不同的客户端行为代码，就要定义两种新的类型！现在来试试用我们刚才改造的语言来做同样的事情，注意，这种语言支持高阶函数：\n\n``` java\nclass MessageHandler {\n    void handleMessage(Message msg, Function getClientCode) {\n        // ...\n        Message msg1 = msg.setClientCode(getClientCode());\n        // ...\n\n        sendMessage(msg1);\n    }\n\n    // ...\n}\n\nString getClientCodeOne() {\n    return \"ABCD_123\";\n}\n\nString getClientCodeTwo() {\n    return \"123_ABCD\";\n}\n\nMessageHandler handler = new MessageHandler();\nhandler.handleMessage(someMsg, getClientCodeOne);\n```\n\n在上面的程序里，我们没有创建任何新的类型或是多层类的结构。仅仅是把相应的函数作为参数进行传递，就做到了和用面向对象编程一样的事情，而且还有额外的好处：一是不再受限于多层类的结构。这样做可以做运行时传递新的函数，可以在任何时候改变这些函数，而且这些改变不仅更加精准而且触碰的代码更少。这种情况下编译器其实就是在替我们编写面向对象的“粘合”代码（译者：又称胶水代码，粘接代码）！除此之外我们还可以享用FP编程的其他所有优势。函数式编程能提供的抽象服务还远不止于此。高阶函数只不过是个开始。\n\n### Currying\n我遇见的大多数码农都读过“[四人帮](http://baike.baidu.com/view/66964.htm#2)”的那本《设计模式》。任何稍有自尊心的码农都会说这本书和语言无关，因此无论你用什么编程语言，当中提到的那些模式大体上适用于所有软件工程。听起来很厉害，然而事实却不是这样。    \n函数式语言的表达能力很强。用这种语言编程的时候基本不需要设计模式，因为这种语言层次已经足够高，使得使用者可以以概念编程，从而完全不需要设计模式了。以[适配器模式](http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F)为例（有人知道这个模式和[外观模式](http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F)有什么区别吗？怎么觉得有人为了出版合同的要求而硬生生凑页数？）（译者：您不愧是高级黑啊）。对于一个支持currying技术的语言来说，这个模式就是多余的。     \n在Java中最有名的适配器模式就是在其“默认”抽象单元中的应用：类。在函数式语言中这种模式其实就是函数。在这个模式中，一个接口被转换成另外一个接口，让不同的用户代码调用。接下来就有一个适配器模式的例子：\n\n``` java\nint pow(int i, int j);\nint square(int i)\n{\n    return pow(i, 2);\n}\n```\n\n上面的代码中square函数计算一个整数的平方，这个函数的接口被转换成计算一个整数的任意整数次幂。在学术圈里这种简单的技术就被叫做currying（因为逻辑学家[哈斯凯尔·加里](http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F)用其数学技巧将这种技术描述出来，于是就以他的名字来命名了）。在一个FP语言中函数（而不是类）被作为参数进行传递，currying常常用于转化一个函数的接口以便于其他代码调用。函数的接口就是它的参数，于是currying通常用于减少函数参数的数量（见前例）。     \n函数式语言生来就支持这一技术，于是没有必要为某个函数手工创建另外一个函数去包装并转换它的接口，这些函数式语言已经为你做好了。我们继续拓展Java来支持这一功能。    \n\n``` java\nsquare = int pow(int i, 2);\n```\n\n上面的语句实现了一个平方计算函数，它只需要一个参数。它会继而调用pow函数并且把第二个参数置为2。编译过后将生成以下Java代码：\n\n``` java\nclass square_function_t {\n    int square(int i) {\n        return pow(i, 2);\n    }\n}\nsquare_function_t square = new square_function_t();\n```\n\n从上面的例子可以看到，很简单的，函数pow的封装函数就创建出来了。在FP语言中currying就这么简单：一种可以快速且简单的实现函数封装的捷径。我们可以更专注于自己的设计，编译器则会为你编写正确的代码！什么时候使用currying呢？很简单，当你想要用适配器模式（或是封装函数）的时候，就是用currying的时候。\n\n### [惰性求值](http://zh.wikipedia.org/zh/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC)\n惰性求值（或是延迟求值）是一种有趣的技术，而当我们投入函数式编程的怀抱后这种技术就有了得以实现的可能。前面介绍并发执行的时候已经提到过如下代码：\n\n``` java\nString s1 = somewhatLongOperation1();\nString s2 = somewhatLongOperation2();\nString s3 = concatenate(s1, s2);\n```\n\n在指令式语言中以上代码执行的顺序是显而易见的。由于每个函数都有可能改动或者依赖于其外部的状态，因此必须顺序执行。先是计算somewhatLongOperation1，然后到somewhatLongOperation2，最后执行concatenate。函数式语言就不一样了。    \n在前面讨论过，somewhatLongOperation1和somewhatLongOperation2是可以并发执行的，因为函数式语言保证了一点：没有函数会影响或者依赖于全局状态。可是万一我们不想要这两个函数并发执行呢？这种情况下是不是也还是要顺序执行这些函数？答案是否定的。只有到了执行需要s1、s2作为参数的函数的时候，才真正需要执行这两个函数。于是在concatenate这个函数没有执行之前，都没有需要去执行这两个函数：这些函数的执行可以一直推迟到concatenate()中需要用到s1和s2的时候。假如把concatenate换成另外一个函数，这个函数中有条件判断语句而且实际上只会需要两个参数中的其中一个，那么就完全没有必要执行计算另外一个参数的函数了！Haskell语言就是一个支持惰性求值的例子。Haskell不能保证任何语句会顺序执行（甚至完全不会执行到），因为Haskell的代码只有在需要的时候才会被执行到。       \n除了这些优点，惰性求值也有缺点。这里介绍了它的优点，我们将在下一章节介绍这些缺点以及如何克服它们。     \n\n#### 代码优化\n惰性求值使得代码具备了巨大的优化潜能。支持惰性求值的编译器会像数学家看待代数表达式那样看待函数式程序：抵消相同项从而避免执行无谓的代码，安排代码执行顺序从而实现更高的执行效率甚至是减少错误。在此基础上优化是不会破坏代码正常运行的。严格使用形式系统的基本元素进行编程带来的最大的好处，是可以用数学方法分析处理代码，因为这样的程序是完全符合数学法则的。\n\n#### 抽象化控制结构\n惰性求值技术提供了更高阶的抽象能力，这提供了实现程序设计独特的方法。比如说下面的控制结构：\n\n``` java\nunless(stock.isEuropean()) {\n    sendToSEC(stock);\n}\n```\n\n程序中只有在stock为European的时候才执行sendToSEC。如何实现例子中的unless？如果没有惰性求值就需要求助于某种形式的宏（译者：用if不行么？），不过在像Haskell这样的语言中就不需要那么麻烦了。直接实现一个unless函数就可以！\n\n``` java\nvoid unless(boolean condition, List code) {\n    if(!condition)\n        code;\n}\n```\n\n请注意，如果condition值为真，那就不会计算code。在其他严格语言（见[严格求值](http://zh.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5#.E4.B8.A5.E6.A0.BC.E6.B1.82.E5.80.BC_.28Strict_evaluation.29)）中这种行为是做不到的，因为在进入unless这个函数之前，作为参数的code已经被计算过了。\n#### 无穷数据结构\n惰性求值技术允许定义无穷数据结构，这要在严格语言中实现将非常复杂。例如一个储存Fibonacci数列数字的列表。很明显这样一个列表是无法在有限的时间内计算出这个无穷的数列并存储在内存中的。在像Java这样的严格语言中，可以定义一个Fibonacci函数，返回这个序列中的某个数。而在Haskell或是类似的语言中，可以把这个函数进一步抽象化并定义一个Fibonacci数列的无穷列表结构。由于语言本身支持惰性求值，这个列表中只有真正会被用到的数才会被计算出来。这让我们可以把很多问题抽象化，然后在更高的层面上解决它们（比如可以在一个列表处理函数中处理无穷多数据的列表）。\n#### 不足之处\n俗话说天下没有免费的午餐™。惰性求值当然也有其缺点。其中最大的一个就是，嗯，惰性。现实世界中很多问题还是需要严格求值的。比如说下面的例子：   \n\n``` java\nSystem.out.println(\"Please enter your name: \");\nSystem.in.readLine();\n```\n\n在惰性语言中没人能保证第一行会中第二行之前执行！这也就意味着我们不能处理IO，不能调用系统函数做任何有用的事情（这些函数需要按照顺序执行，因为它们依赖于外部状态），也就是说不能和外界交互了！如果在代码中引入支持顺序执行的代码原语，那么我们就失去了用数学方式分析处理代码的优势（而这也意味着失去了函数式编程的所有优势）。幸运的是我们还不算一无所有。数学家们研究了不同的方法用以保证代码按一定的顺序执行（in a functional setting?）。这一来我们就可以同时利用到函数式和指令式编程的优点了！这些方法有continuations，monads以及uniqueness typing。这篇文章仅仅介绍了continuations，以后再讨论monads和uniqueness typing。有意思的是呢，coutinuations处理强制代码以特定顺序执行之外还有其他很多出处，这些我们在后面也会提及。\n\n### Continuation\ncontinuation对于编程，就像是达芬奇密码对于人类历史一样：它揭开了人类有史以来最大的谜团。好吧，也许没有那么夸张，不过它们的影响至少和当年发现负数有平方根不相上下。\n\n我们对函数的理解只有一半是正确的，因为这样的理解基于一个错误的假设：函数一定要把其返回值返回给调用者。按照这样的理解，continuation就是更加广义的函数。这里的函数不一定要把返回值传回给调用者，相反，它可以把返回值传给程序中的任意代码。continuation就是一种特别的参数，把这种参数传到函数中，函数就能够根据continuation将返回值传递到程序中的某段代码中。说得很高深，实际上没那么复杂。直接来看看下面的例子好了：\n\n``` java\nint i = add(5, 10);\nint j = square(i);\n```\n\nadd这个函数将返回15然后这个值会赋给i，这也是add被调用的地方。接下来i的值又会被用于调用square。请注意支持惰性求值的编译器是不能打乱这段代码执行顺序的，因为第二个函数的执行依赖于第一个函数成功执行并返回结果。这段代码可以用Continuation Pass Style（CPS）技术重写，这样一来add的返回值就不是传给其调用者，而是直接传到square里去了。     \n\n``` java\nint j = add(5, 10, square);\n```\n\n在上例中，add多了一个参数：一个函数，add必须在完成自己的计算后，调用这个函数并把结果传给它。这时square就是add的一个continuation。上面两段程序中j的值都是225。    \n\n这样，我们学习到了强制惰性语言顺序执行两个表达式的第一个技巧。再来看看下面IO程序（是不是有点眼熟？）：\n\n``` java\nSystem.out.println(\"Please enter your name: \");\nSystem.in.readLine();\n```\n\n这两行代码彼此之间没有依赖关系，因此编译器可以随意的重新安排它们的执行顺序。可是只要用CPS重写它，编译器就必须顺序执行了，因为重写后的代码存在依赖关系了。\n\n``` java\nSystem.out.println(\"Please enter your name: \", System.in.readLine);\n```\n\n这段新的代码中println需要结合其计算结果调用readLine，然后再返回readLine的返回值。这使得两个函数得以保证按顺序执行而且readLine总被执行（这是由于整个运算需要它的返回值作为最终结果）。Java的println是没有返回值的，但是如果它可以返回一个能被readnLine接受的抽象值，问题就解决了！（译者：别忘了，这里作者一开始就在Java的基础上修改搭建自己的语言）当然，如果一直把函数按照这种方法串下去，代码很快就变得不可读了，可是没有人要求你一定要这样做。可以通过在语言中添加[语法糖](http://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96)的方式来解决这个问题，这样程序员只要按照顺序写代码，编译器负责自动把它们串起来就好了。于是就可以任意安排代码的执行顺序而不用担心会失去FP带来的好处了（包括可以用数学方法来分析我们的程序）！如果到这里还有人感到困惑，可以这样理解，函数只是有唯一成员的类的实例而已。试着重写上面两行程序，让println和readLine编程这种类的实例，所有问题就都搞清楚了。       \n到这里本章基本可以结束了，而我们仅仅了解到continuation的一点皮毛，对它的用途也知之甚少。我们可以用CPS完成整个程序，程序里所有的函数都有一个额外的continuation作为参数接受其他函数的返回值。还可以把任何程序转换为CPS的，需要做的只是把当中的函数看作是特殊的continuation（总是将返回值传给调用者的continuation）就可以了，简单到完全可以由工具自动完成（史上很多编译器就是这样做的）。    \n\n一旦将程序转为CPS的风格，有些事情就变得显而易见了：每一条指令都会有一些continuation，都会将它的计算结果传给某一个函数并调用它，在一个普通的程序中这个函数就是该指令被调用并且返回的地方。随便找个之前提到过的代码，比如说add(5,10)好了。如果add属于一个用CPS风格写出的程序，add的continuation很明显就是当它执行结束后要调用的那个函数。可是在一个非CPS的程序中，add的continuation又是什么呢？当然我们还是可以把这段程序转成CPS的，可是有必要这样做吗？     \n事实上没有必要。注意观察整个CPS转换过程，如果有人尝试要为CPS程序写编译器并且认真思考过就会发现：CPS的程序是不需要栈的！在这里完全没有函数需要做传统意义上的“返回”操作，函数执行完后仅需要接着调用另外一个函数就可以了。于是就不需要在每次调用函数的时候把参数压栈再将它们从中取出，只要把这些参数存放在一片内存中然后使用跳转指令就解决问题了。也完全不需要保留原来的参数：因为这种程序里的函数都不返回，所以它们不会被用第二次！     \n简单点说呢，用CPS风格写出来的程序不需要栈，但是每次调用函数的时候都会要多加一个参数。非CPS风格的程序不需要额外的参数但又需要栈才能运行。栈里面存的是什么？仅仅是参数还有一个供函数运行结束后返回的程序指针而已。这个时候你是不是已经恍然大悟了？对啊，栈里面的数据实际上就是continuation的信息！栈上的程序返回指针实质上就是CPS程序中需要调用的下一个函数！想要知道add(5, 10)的continuation是什么？只要看它运行时栈的内容就可以了。      \n接下来就简单多了。continuation和栈上指示函数返回地址的指针其实是同一样东西，只是continuation是显式的传递该地址并且因此代码就不局限于只能返回到函数被调用的地方了。前面说过，continuation就是函数，而在我们特制的语言中函数就是类的实例，那么可以得知栈上指向函数返回地址的指针和continuation的参数是一样的，因为我们所谓的函数（就像类的一个实例）其实就是指针。这也意味着在程序运行的任何时候，你都可以得到当前的continuation（就是栈上的信息）。     \n\n好了，我们已经搞清楚当前的continuation是什么了。接下来要弄明白它的存在有什么意义。只要得到了当前的continuation并将它保存起来，就相当于保存了程序的当前状态：在时间轴上把它冻结起来了。这有点像操作系统进入休眠状态。continuation对象保存了足够的信息随时可以从指定的某个状态继续运行程序。在切换线程的时候操作系统也是这样做的。唯一的区别在于它保留了所有的控制权利。当请求某个continuation对象时（在Scheme语言中是通过调用call-with-current-continuation函数实现的）得到的是一个存有当前continuation的对象，也就是栈对象（在CPS中也就是下一个要执行的函数）。可以把这个对象保存做一个变量中（或者是存在磁盘上）。当以该continuation对象“重启”该程序时，程序的状态就会立即“转换”为该对象中保存的状态。这一点和切换回一个被暂停的线程或是从系统休眠中唤醒很相像，唯一不同的是continuatoin对象可以反复的这样使用。当系统唤醒后，休眠前保存的信息就会销毁，否则你也可以反复的从该点唤醒系统，就像乘时光机回到过去一样。有了continuation你就可以做到这一点！       \n\n那么continuation在什么情况下有用呢？有一些应用程序天生就没有状态，如果要在这样的系统中模拟出状态以简化工作的时候，就可以用到continuation。最合适的应用场合之一就是网页应用程序。微软的ASP.NET为了让程序员更轻松的编写应用程序，花了大量的精力去模拟各种状态。假如C#支持continuation的话，那么ASP.NET的复杂度将减半：因为只要把某一时刻的continuation保存起来，下次用户再次发起同样请求的时候，重新载入这个continuation即可。对于网络应用的程序员来说就再也没有中断了：轻轻松松程序就从下一行开始继续运行了！对于一些实际问题来说，continuation是一种非常有用的抽象工具。如今大量的传统胖客户端（见[瘦客户端](http://zh.wikipedia.org/wiki/%E7%98%A6%E5%AE%A2%E6%88%B7%E7%AB%AF)）正纷纷走进网络，continuation在未来将扮演越来越重要的角色。\n\n### 模式匹配\n模式匹配并不是什么新功能。而事实上它和函数式编程也没有什么太大的关系。它之所以常常被认为是FP的一个特性，是因为在函数式语言已经支持模式匹配很长一段时间后的今天，指令式语言是还没有这个功能。\n\n还是直接用例子来看看什么是模式匹配吧，这是一个用Java写的Fibonacci函数：\n\n``` java\nint fib(int n) {\n    if(n == 0) return 1;\n    if(n == 1) return 1;\n\n    return fib(n - 2) + fib(n - 1);\n}\n```\n\n再看看用我们基于Java修改过的新语言写出来的Fibonacci函数，这种新语言就支持模式匹配：\n\n``` java\nint fib(0) {\n    return 1;\n}\nint fib(1) {\n    return 1;\n}\nint fib(int n) {\n    return fib(n - 2) + fib(n - 1);\n}\n```\n\n区别在哪里呢？在于后者的编译器替我们实现了程序的分支。    \n这有什么了不起的？确实也没什么。只是有人注意到很多函数中有非常复杂的switch结构（对于函数式程序而言更是如此），于是想到如果能把这层结构也抽象化就更好了。然后就把这个复杂的函数拆分成若干新的函数，并在这些函数的某些参数中应用模式（这和[重载](http://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD)有点类似）。这样依赖当这个函数被调用的时候，编译器会在运行时将调用者传入的参数与各个新函数的参数定义进行比较，找出合适的那个函数来执行。合适的函数往往是参数定义上最具体最接近传入参数的那个函数。在这个例子中，当n为1时，可以用函数int fib(int n)，不过真正调用的是int fib(1)因为这个函数更具体更接近调用者的要求。     \n模式匹配一般来说要比这里举的例子更加复杂。比如说，高级模式匹配系统可以支持下面的操作：\n\n``` java\nint f(int n < 10) { ... }\nint f(int n) { ... }\n```\n\n那么什么情况下模式匹配会有用呢？在需要处理一大堆程序分支的时候！每当需要实现复杂的嵌套if语句的时候，模式匹配可以帮助你用更少的代码更好的完成任务。我所知道的一个这样的函数是标准的WndProc函数，该函数是所有Win32应用程序必须具备的（尽管它经常会被抽象化）。模式匹配系统一般都可以像匹配简单数值一样匹配数据集合。举个例子，对于一个接受数组作为参数的函数，可以通过模式匹配数组中第一个数字为1并且第三个数字大于3的输入。\n模式匹配的另外一个好处是每当需要添加或者修改程序分支时，再也不用面对那个庞大臃肿的函数了。只要添加（或者修改）相关的函数定义即可。有了模式匹配就不再需要四人帮的很多设计模式了。程序分支越多越复杂，模式匹配就越有用。而在习惯使用这一技术之后，你可能会怀疑没有它你一天都过不下去了。\n\n### Closure\n目前为止关于函数式编程各种功能的讨论都只局限在“纯”函数式语言范围内：这些语言都是lambda演算的实现并且都没有那些和阿隆佐形式系统相冲突的特性。然而，很多函数式语言的特性哪怕是在lambda演算框架之外都是很有用的。确实，如果一个公理系统的实现可以用数学思维来看待程序，那么这个实现还是很有用的，但这样的实现却不一定可以付诸实践。很多现实中的语言都选择吸收函数式编程的一些元素，却又不完全受限于函数式教条的束缚。很多这样的语言（比如Common Lisp）都不要求所有的变量必须为final，可以修改他们的值。也不要求函数只能依赖于它们的参数，而是可以读写函数外部的状态。同时这些语言又包含了FP的特性，如高阶函数。与在lambda演算限制下将函数作为参数传递不同，在指令式语言中要做到同样的事情需要支持一个有趣的特性，人们常把它称为lexical closure。还是来看看例子。要注意的是，这个例子中变量不是final，而且函数也可以读写其外部的变量：\n\n``` java\nFunction makePowerFn(int power) {\n    int powerFn(int base) {\n        return pow(base, power);\n    }\n\n    return powerFn;\n}\n\nFunction square = makePowerFn(2);\nsquare(3); // returns 9\n```\n\nmakePowerFn函数返回另一个函数，这个新的函数需要一个整数参数然后返回它的平方值。执行square(3)的时候具体发生了什么事呢？变量power并不在powerFn的域内，因为makePowerFn早就运行结束返回了，所以它的栈也已经不存在了。那么square又是怎么正常工作的呢？这个时候需要语言通过某种方式支持继续存储power的值，以便square后面继续使用。那么如果再定义一个函数，cube，用来计算立方，又应该怎么做呢？那么运行中的程序就必须存储两份power的值，提供给makePowerFn生成的两个函数分别使用。这种保存变量值的方法就叫做closure。closure不仅仅保存宿主函数的参数值，还可以用在下例的用法中：\n\n``` java\nFunction makeIncrementer() {\n    int n = 0;\n\n    int increment() {\n        return ++n;\n    }\n}\n\nFunction inc1 = makeIncrementer();\nFunction inc2 = makeIncrementer();\n\ninc1(); // returns 1;\ninc1(); // returns 2;\ninc1(); // returns 3;\ninc2(); // returns 1;\ninc2(); // returns 2;\ninc2(); // returns 3;\n```\n\n运行中的程序负责存储n的值，以便incrementer稍后可以访问它。与此同时，程序还会保存多份n的拷贝，虽然这些值应该在makeIncrementer返回后就消失，但在这个情况下却继续保留下来给每一个incrementer对象使用。这样的代码编译之后会是什么样子？closure幕后的真正工作机理又是什么？这次运气不错，我们有一个后台通行证，可以一窥究竟。    \n一点小常识往往可以帮大忙。乍一看这些本地变量已经不再受限于基本的域限制并拥有无限的生命周期了。于是可以得出一个很明显的结论：它们已经不是存在栈上，而是堆上了<sup>8</sup>。这么说来closure的实现和前面讨论过的函数差不多，只不过closure多了一个额外的引用指向其外部的变量而已：\n\n``` java\nclass some_function_t {\n    SymbolTable parentScope;\n\n    // ...\n}\n```\n\n当closure需要访问不在它本地域的变量时，就可以通过这个引用到更外一层的父域中寻找该变量。谜底揭开了！closure将函数编程与面向对象的方法结合了起来。下一次为了保存并传递某些状态而创建类的时候，想想closure。它能在运行时从相应的域中获得变量，从而可以把该变量当初“成员变量”来访问，也因为这样，就不再需要去创建一个成员变量了。\n\n### 路在何方？\n这篇文章仅仅涉及到函数式编程的一些皮毛。考虑到有时候星星之火可以燎原，所以如果它能给你一些帮助那就再好不过了。接下来我计划就[范畴论](http://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA)、monads、函数式编程数据结构、函数式语言中的[类型系统](http://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1)、并行函数式编程、数据库的函数式编程以及更多的话题写些类似的文章。如果我可以写出（在我学习的同时）以上清单的一半，我的人生就完整了。于此同时，Google将是我们的良师益友。\n\n### 欢迎联系\n如果您有任何问题，评价或者建议，请发邮件到coffeemug@gmail.com（译者：如果翻译方面的问题／建议请发到yang.huang@ymail.com:)）。期待您的回复。\n\n注：     \n<sup>1</sup>当我在2005年求职时的的确确经常问别人这个问题。看着那些茫然的面孔实在是很好玩的事情。你们这些年薪30万美金的家伙，至少应该对自己可以利用的工具有个起码的理解嘛。     \n<sup>2</sup>这是个有争议的问题。物理学家和数学家不得不承认目前还无法确定宇宙万物是不是都遵从可以用数学方法描述的各种法则。     \n<sup>3</sup>我一直一来都很讨厌在历史课上罗列一堆枯燥无味的时间、人名、事件。对我来说历史就是关于那些改变世界的人们活生生的故事，是他们行为背后的个人动机，是那些他们用以影响芸芸众生的方法和工具。从这个角度来说，接下来的这堂历史课是不完整的，很遗憾。只有那些非常相关的人和事会被提及。     \n<sup>4</sup>在我学习函数式编程的时候，“lambda”这个术语搞得我很烦，因为我不知道它到底是什么意思。在这里lambda就是一个函数，在数学符号中用这个希腊字母只是因为它更容易写。所以以后在谈及函数式编程的时候只要你听到lambda，把它在脑中翻译为“函数”就可以了。      \n<sup>5</sup>有意思的是不论如何Java中的字符串总是不可修改的。讨论这种背叛Java的设计背后的原因会很有意思，可惜这样会让我们跑题的。     \n<sup>6</sup>大部分函数式语言的编译器都会尽量将迭代函数转换为对等的循环语句。这种做法叫做[尾调用优化](http://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8)。      \n<sup>7</sup>反之则不一定成立。尽管有时候可以证明两段代码是等价的，但不是在所有的情况下都可以得出这样的结论。      \n<sup>8</sup>实际上这样做并不比栈上存储要慢，因为在引入[垃圾回收机制](http://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8))后，内存分配操作的时间代价仅为O(1)。     \n","slug":"functional-programming","published":1,"updated":"2018-11-06T12:47:13.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo6iq747000k51vh0khvfx9b","content":"<p>2006年6月19日，星期一</p>\n<p><a href=\"https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<h3 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h3><p>我们这些码农做事都是很拖拉的。每天例行报到后，先来点咖啡，看看邮件还有RSS订阅的文章。然后翻翻新闻还有那些技术网站上的更新，再过一遍编程论坛口水区里那些无聊的论战。最后从头把这些再看一次以免错过什么精彩的内容。然后就可以吃午饭了。饭饱过后，回来盯着IDE发一会呆，再看看邮箱，再去搞杯咖啡。光阴似箭，可以回家了……<br>（在被众人鄙视之前）我唯一想说的是，在这些拖拉的日子里总会时不时读到一些<a href=\"http://www.baike.com/wiki/%E4%B8%8D%E6%98%8E%E8%A7%89%E5%8E%89\" target=\"_blank\" rel=\"noopener\">不明觉厉</a>的文章。如果没有打开不应该打开的网站，每隔几天你都可以看到至少一篇这样的东西。它们的共性：难懂，耗时，于是这些文章就慢慢的堆积成山了。很快你就会发现自己已经累积了一堆的收藏链接还有数不清的PDF文件，此时你只希望隐入一个杳无人烟的深山老林里什么也不做，用一年半载好好的消化这些私藏宝贝。当然，我是说最好每天还是能有人来给送吃的顺带帮忙打扫卫生倒垃圾，哇哈哈。   </p>\n<p>我不知道你都收藏了些什么，我的阅读清单里面相当大部分都是函数式编程相关的东东：基本上是最难啃的。这些文章充斥着无比枯燥的教科书语言，我想就连那些在华尔街浸淫10年以上的大牛都无法搞懂这些函数式编程（简称FP）文章到底在说什么。你可以去花旗集团或者德意志银行找个项目经理来问问<sup>1</sup>：你们为什么要选JMS而不用Erlang？答案基本上是：我认为这个学术用的语言还无法胜任实际应用。可是，现有的一些系统不仅非常复杂还需要满足十分严苛的需求，它们就都是用函数式编程的方法来实现的。这，就说不过去了。<br>关于FP的文章确实比较难懂，但我不认为一定要搞得那么晦涩。有一些历史原因造成了这种知识断层，可是FP概念本身并不难理解。我希望这篇文章可以成为一个“FP入门指南”，帮助你从<a href=\"http://zh.wikipedia.org/zh/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">指令式编程</a>走向<a href=\"http://zh.wikipedia.org/zh/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80\" target=\"_blank\" rel=\"noopener\">函数式编程</a>。先来点咖啡，然后继续读下去。很快你对FP的理解就会让同事们刮目相看了。      </p>\n<p>什么是函数式编程（Functional Programming，FP）？它从何而来？可以吃吗？倘若它真的像那些鼓吹FP的人说的那么好，为什么实际应用中那么少见？为什么只有那些在读博士的家伙想要用它？而最重要的是，它母亲的怎么就那么难学？那些所谓的closure、continuation，currying，lazy evaluation还有no side effects都是什么东东（译者：本着保留专用术语的原则，此处及下文类似情形均不译）？如果没有那些大学教授的帮忙怎样把它应用到实际工程里去？为什么它和我们熟悉的万能而神圣的指令式编程那么的不一样？<br>我们很快就会解开这些谜团。刚才我说过实际工程和学术界之间的知识断层是有其历史原因的，那么就先让我来解释一下这个问题。答案，就在接下来的一次公园漫步中：</p>\n<h3 id=\"公园漫步\"><a href=\"#公园漫步\" class=\"headerlink\" title=\"公园漫步\"></a>公园漫步</h3><p>时间机器启动……我们来到公元前380年，也就是2000多年前的雅典城外。这是一个阳光明媚的久违的春天，<a href=\"http://zh.wikipedia.org/zh/%E6%9F%8F%E6%8B%89%E5%9B%BE\" target=\"_blank\" rel=\"noopener\">柏拉图</a>和一个帅气的小男仆走在一片橄榄树荫下。他们正准备前往一个学院。天气很好，吃得很饱，渐渐的，两人的谈话转向了哲学。     </p>\n<p>“你看那两个学生，哪一个更高一些？”，柏拉图小心的选择用字，以便让这个问题更好的引导眼前的这个小男孩。<br>小男仆望向水池旁边的两个男生，“他们差不多一样高。”。<br>“‘差不多一样高’是什么意思？”柏拉图问。<br>“嗯……从这里看来他们是一样高的，但是如果走近一点我肯定能看出差别来。”<br>柏拉图笑了。他知道这个小孩已经朝他引导的方向走了。“这么说来你的意思是世界上没有什么东西是完全相同的咯？”<br>思考了一会，小男孩回答：“是的。万物之间都至少有一丁点差别，哪怕我们无法分辨出来。”<br>说到点子上了！“那你说，如果世界上没有什么东西是完全相等的，你怎么理解‘完全相等’这个概念？”<br>小男仆看起来很困惑。“这我就不知道了。”</p>\n<p>这是人类第一次试图了解数学的本质。柏拉图认为我们所在的世界中，万事万物都是完美模型的一个近似。他同时意识到虽然我们不能感受到完美的模型，但这丝毫不会阻止我们了解完美模型的概念。柏拉图进而得出结论：完美的数学模型只存在于另外一个世界，而因为某种原因我们却可以通过联系着这两个世界的一个纽带来认识这些模型。一个简单的例子就是完美的圆形。没有人见过这样的一个圆，但是我们知道怎样的圆是完美的圆，而且可以用公式把它描述出来。      </p>\n<p>如此说来，什么是数学呢？为什么可以用数学法则来描述我们的这个宇宙？我们所处的这个世界中万事万物都可以用数学来描述吗？<sup>2</sup><br>数理哲学是一门很复杂的学科。它和其他多数哲学一样，更着重于提出问题而不是给出答案。数学就像拼图一样，很多结论都是这样推导出来的：先是确立一些互不冲突的基础原理，以及一些操作这些原理的规则，然后就可以把这些原理以及规则拼凑起来形成新的更加复杂的规则或是定理了。数学家把这种方法称为“形式系统”或是“演算”。如果你想做的话，可以用形式系统描述俄罗斯方块这个游戏。而事实上，俄罗斯方块这个游戏的实现，只要它正确运行，就是一个形式系统。只不过它以一种不常见的形式表现出来罢了。     </p>\n<p>如果<a href=\"http://zh.wikipedia.org/wiki/%E5%8D%8A%E4%BA%BA%E9%A9%AC%E5%BA%A7%CE%B1\" target=\"_blank\" rel=\"noopener\">半人马阿尔法</a>上有文明存在的话，那里的生物可能无法解读我们的俄罗斯方块形式系统甚至是简单的圆形的形式系统，因为它们感知世界的唯一器官可能只有鼻子（译者：偶的妈你咋知道？）也许它们是无法得知俄罗斯方块的形式系统了，但是它们很有可能知道圆形。它们的圆形我们可能没法解读，因为我们的鼻子没有它们那么灵敏（译者：那狗可以么？）可是只要越过形式系统的表示方式（比如通过使用“超级鼻子”之类的工具来感知这些用味道表示的形式系统，然后使用标准的解码技术把它们翻译成人类能理解的语言），那么任何有足够智力的文明都可以理解这些形式系统的本质。<br>有意思的是，哪怕宇宙中完全不存在任何文明，类似俄罗斯方块还有圆形这样的形式系统依旧是成立的：只不过没有智慧生物去发现它们而已。这个时候如果忽然一个文明诞生了，那么这些具有智慧的生物就很有可能发现各种各样的形式系统，并且用它们发现的系统去描述各种宇宙法则。不过它们可能不会发现俄罗斯方块这样的形式系统，因为在它们的世界里没有俄罗斯方块这种东西嘛。有很多像俄罗斯方块这样的形式系统是与客观世界无关的，比如说自然数，很难说所有的自然数都与客观世界有关，随便举一个超级大的数，这个数可能就和世界上任何事物无关，因为这个世界可能不是无穷大的。</p>\n<h3 id=\"历史回眸3\"><a href=\"#历史回眸3\" class=\"headerlink\" title=\"历史回眸3\"></a>历史回眸<sup>3</sup></h3><p>再次启动时间机……这次到达的是20世纪30年代，离今天近了很多。无论<a href=\"http://zh.wikipedia.org/wiki/%E6%96%B0%E5%A4%A7%E9%99%B8\" target=\"_blank\" rel=\"noopener\">新</a><a href=\"http://zh.wikipedia.org/wiki/%E8%88%8A%E5%A4%A7%E9%99%B8\" target=\"_blank\" rel=\"noopener\">旧</a>大陆，经济大萧条都造成了巨大的破坏。社会各阶层几乎每一个家庭都深受其害。只有极其少数的几个地方能让人们免于遭受穷困之苦。几乎没有人能够幸运的在这些避难所里度过危机，注意，我说的是几乎没有，还真的有这么些幸运儿，比如说当时普林斯顿大学的数学家们。    </p>\n<p>新建成的哥特式办公楼给普林斯顿大学带来一种天堂般的安全感。来自世界各地的逻辑学者应邀来到普林斯顿，他们将组建一个新的学部。正当大部分美国人还在为找不到一片面包做晚餐而发愁的时候，在普林斯顿却是这样一番景象：高高的天花板和木雕包覆的墙，每天品茶论道，漫步丛林。<br>一个名叫<a href=\"http://zh.wikipedia.org/zh/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87\" target=\"_blank\" rel=\"noopener\">阿隆佐·邱奇</a>(Alonzo Church)的年轻数学家就过着这样优越的生活。阿隆佐本科毕业于普林斯顿后被留在研究院。他觉得这样的生活完全没有必要，于是他鲜少出现在那些数学茶会中也不喜欢到树林里散心。阿隆佐更喜欢独处：自己一个人的时候他的工作效率更高。尽管如此他还是和普林斯顿学者保持着联系，这些人当中有<a href=\"http://zh.wikipedia.org/zh/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5\" target=\"_blank\" rel=\"noopener\">艾伦·图灵</a>、<a href=\"http://zh.wikipedia.org/zh/%E7%BA%A6%E7%BF%B0%C2%B7%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC\" target=\"_blank\" rel=\"noopener\">约翰·冯·诺伊曼</a>、<a href=\"http://zh.wikipedia.org/zh-hant/%E5%BA%93%E5%B0%94%E7%89%B9%C2%B7%E5%93%A5%E5%BE%B7%E5%B0%94\" target=\"_blank\" rel=\"noopener\">库尔特·哥德尔</a>。<br>这四个人都对形式系统感兴趣。相对于现实世界，他们更关心如何解决抽象的数学问题。而他们的问题都有这么一个共同点：都在尝试解答关于计算的问题。诸如：如果有一台拥有无穷计算能力的超级机器，可以用来解决什么问题？它可以自动的解决这些问题吗？是不是还是有些问题解决不了，如果有的话，是为什么？如果这样的机器采用不同的设计，它们的计算能力相同吗？<br>在与这些人的合作下，阿隆佐设计了一个名为<a href=\"http://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\" target=\"_blank\" rel=\"noopener\">lambda演算</a>的形式系统。这个系统实质上是为其中一个超级机器设计的编程语言。在这种语言里面，函数的参数是函数，返回值也是函数。这种函数用希腊字母lambda（<a href=\"http://en.wikipedia.org/wiki/Lambda\" target=\"_blank\" rel=\"noopener\">λ</a>），这种系统因此得名<sup>4</sup>。有了这种形式系统，阿隆佐终于可以分析前面的那些问题并且能够给出答案了。<br>除了阿隆佐·邱奇，艾伦·图灵也在进行类似的研究。他设计了一种完全不同的系统（后来被称为<a href=\"http://zh.wikipedia.org/zh/%E5%9B%BE%E7%81%B5%E6%9C%BA\" target=\"_blank\" rel=\"noopener\">图灵机</a>），并用这种系统得出了和阿隆佐相似的答案。到了后来人们证明了图灵机和lambda演算的能力是一样的。    </p>\n<p>如果二战没有发生，这个故事到这里就应该结束了，我的这篇小文没什么好说的了，你们也可以去看看有什么其他好看的文章。可是二战还是爆发了，整个世界陷于火海之中。那时的美军空前的大量使用炮兵。为了提高轰炸的精度，军方聘请了大批数学家夜以继日的求解各种差分方程用于计算各种火炮发射数据表。后来他们发现单纯手工计算这些方程太耗时了，为了解决这个问题，各种各样的计算设备应运而生。IBM制造的Mark一号就是用来计算这些发射数据表的第一台机器。Mark一号重5吨，由75万个零部件构成，每一秒可以完成3次运算。<br>战后，人们为提高计算能力而做出的努力并没有停止。1949年第一台电子离散变量自动计算机诞生并取得了巨大的成功。它是<a href=\"http://zh.wikipedia.org/zh/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84\" target=\"_blank\" rel=\"noopener\">冯·诺伊曼设计架构</a>的第一个实例，也是一台现实世界中实现的图灵机。相比他的这些同事，那个时候阿隆佐的运气就没那么好了。<br>到了50年代末，一个叫John McCarthy的MIT教授（他也是普林斯顿的硕士）对阿隆佐的成果产生了兴趣。1958年他发明了一种列表处理语言（Lisp），这种语言是一种阿隆佐lambda演算在现实世界的实现，而且它能在冯·诺伊曼计算机上运行！很多计算机科学家都认识到了Lisp强大的能力。1973年在MIT人工智能实验室的一些程序员研发出一种机器，并把它叫做Lisp机。于是阿隆佐的lambda演算也有自己的硬件实现了！</p>\n<h3 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h3><p>函数式编程是阿隆佐思想的在现实世界中的实现。不过不是全部的lambda演算思想都可以运用到实际中，因lambda演算在设计的时候就不是为了在各种现实世界中的限制下工作的。所以，就像面向对象的编程思想一样，函数式编程只是一系列想法，而不是一套严苛的规定。有很多支持函数式编程的程序语言，它们之间的具体设计都不完全一样。在这里我将用Java写的例子介绍那些被广泛应用的函数式编程思想（没错，如果你是受虐狂你可以用Java写出函数式程序）。在下面的章节中我会在Java语言的基础上，做一些修改让它变成实际可用的函数式编程语言。那么现在就开始吧。     </p>\n<p>Lambda演算在最初设计的时候就是为了研究计算相关的问题。所以函数式编程主要解决的也是计算问题，而出乎意料的是，是用函数来解决的！（译者：请理解原作者的苦心，我想他是希望加入一点调皮的风格以免读者在中途睡着或是转台……）。函数就是函数式编程中的基础元素，可以完成几乎所有的操作，哪怕最简单的计算，也是用函数完成的。我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式（这样我们就不用把所有的代码都写在同一行里了）。所以我们这里所说的‘变量’是不能被修改的。所有的变量只能被赋一次初值。在Java中就意味着每一个变量都将被声明为final（如果你用C++，就是const）。在FP中，没有非final的变量。     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = i + <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>既然FP中所有的变量都是final的，可以引出两个规定：一是变量前面就没有必要再加上final这个关键字了，二是变量就不能再叫做‘变量’了……于是现在开始对Java做两个改动：所有Java中声明的变量默认为final，而且我们把所谓的‘变量’称为‘符号’。<br>到现在可能会有人有疑问：这个新创造出来的语言可以用来写什么有用的复杂一些的程序吗？毕竟，如果每个符号的值都是不能修改的，那么我们就什么东西都不能改变了！别紧张，这样的说法不完全正确。阿隆佐在设计lambda演算的时候他并不想要保留状态的值以便稍后修改这些值。他更关心的是基于数据之上的操作（也就是更容易理解的“计算”）。而且，lambda演算和图灵机已经被证明了是具有同样能力的系统，因此指令式编程能做到的函数式编程也同样可以做到。那么，怎样才能做到呢？<br>事实上函数式程序是可以保存状态的，只不过它们用的不是变量，而是函数。状态保存在函数的参数中，也就是说在栈上。如果你需要保存一个状态一段时间并且时不时的修改它，那么你可以编写一个递归函数。举个例子，试着写一个函数，用来反转一个Java的字符串。记住咯，这个程序里的变量都是默认为final的<sup>5</sup>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">reverse</span><span class=\"params\">(String arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arg.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reverse(arg.substring(<span class=\"number\">1</span>, arg.length)) + arg.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方程运行起来会相对慢一些，因为它重复调用自己<sup>6</sup>。同时它也会大量的消耗内存，因为它会不断的分配创建内存对象。无论如何，它是用函数式编程思想写出来的。这时候可能有人要问了，为什么要用这种奇怪的方式编写程序呢？嘿，我正准备告诉你。</p>\n<h3 id=\"FP之优点\"><a href=\"#FP之优点\" class=\"headerlink\" title=\"FP之优点\"></a>FP之优点</h3><p>你大概已经在想：上面这种怪胎函数怎么也不合理嘛。在我刚开始学习FP的时候我也这样想的。不过后来我知道我是错的。使用这种方式编程有很多好处。其中一些是主观的。比如说有人认为函数式程序更容易理解。这个我就不说了，哪怕街上随便找个小孩都知道‘容易理解’是多么主观的事情。幸运的是，客观方面的好处还有很多。</p>\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><p>因为FP中的每个符号都是final的，于是没有什么函数会有副作用。谁也不能在运行时修改任何东西，也没有函数可以修改在它的作用域之外修改什么值给其他函数继续使用（在指令式编程中可以用类成员或是全局变量做到）。这意味着决定函数执行结果的唯一因素就是它的返回值，而影响其返回值的唯一因素就是它的参数。<br>这正是单元测试工程师梦寐以求的啊。现在测试程序中的函数时只需要关注它的参数就可以了。完全不需要担心函数调用的顺序，也不用费心设置外部某些状态值。唯一需要做的就是传递一些可以代表边界条件的参数给这些函数。相对于指令式编程，如果FP程序中的每一个函数都能通过单元测试，那么我们对这个软件的质量必将信心百倍。反观Java或者C++，仅仅检查函数的返回值是不够的：代码可能修改外部状态值，因此我们还需要验证这些外部的状态值的正确性。在FP语言中呢，就完全不需要。</p>\n<h4 id=\"调试查错\"><a href=\"#调试查错\" class=\"headerlink\" title=\"调试查错\"></a>调试查错</h4><p>如果一段FP程序没有按照预期设计那样运行，调试的工作几乎不费吹灰之力。这些错误是百分之一百可以重现的，因为FP程序中的错误不依赖于之前运行过的不相关的代码。而在一个指令式程序中，一个bug可能有时能重现而有些时候又不能。因为这些函数的运行依赖于某些外部状态， 而这些外部状态又需要由某些与这个bug完全不相关的代码通过某个特别的执行流程才能修改。在FP中这种情况完全不存在：如果一个函数的返回值出错了，它一直都会出错，无论你之前运行了什么代码。<br>一旦问题可以重现，解决它就变得非常简单，几乎就是一段愉悦的旅程。中断程序的运行，检查一下栈，就可以看到每一个函数调用时使用的每一个参数，这一点和指令式代码一样。不同的是指令式程序中这些数据还不足够，因为函数的运行还可能依赖于成员变量，全局变量，还有其他类的状态（而这些状态又依赖于类似的变量）。FP中的函数只依赖于传给它的参数，而这些参数就在眼前！还有，对指令式程序中函数返回值的检查并不能保证这个函数是正确运行的。还要逐一检查若干作用域以外的对象以确保这个函数没有对这些牵连的对象做出什么越轨的行为（译者：好吧，翻译到这里我自己已经有点激动了）。对于一个FP程序，你要做的仅仅是看一下函数的返回值。<br>把栈上的数据过一遍就可以得知有哪些参数传给了什么函数，这些函数又返回了什么值。当一个返回值看起来不对头的那一刻，跳进这个函数看看里面发生了什么。一直重复跟进下去就可以找到bug的源头！</p>\n<h4 id=\"并发执行\"><a href=\"#并发执行\" class=\"headerlink\" title=\"并发执行\"></a>并发执行</h4><p>不需要任何改动，所有FP程序都是可以并发执行的。由于根本不需要采用锁机制，因此完全不需要担心死锁或是并发竞争的发生。在FP程序中没有哪个线程可以修改任何数据，更不用说多线程之间了。这使得我们可以轻松的添加线程，至于那些祸害并发程序的老问题，想都不用想！<br>既然是这样，为什么没有人在那些高度并行的那些应用程序中采用FP编程呢？事实上，这样的例子并不少见。爱立信开发了一种FP语言，名叫Erlang，并应用在他们的电信交换机上，而这些交换机不仅容错度高而且拓展性强。许多人看到了Erlang的这些优势也纷纷开始使用这一语言。在这里提到的电信交换控制系统远远要比华尔街上使用的系统具有更好的扩展性也更可靠。事实上，用Erlang搭建的系统并不具备可扩展性和可靠性，而Java可以提供这些特性。Erlang只是像岩石一样结实不容易出错而已。<br>FP关于并行的优势不仅于此。就算某个FP程序本身只是单线程的，编译器也可以将其优化成可以在多CPU上运行的并发程序。以下面的程序为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = somewhatLongOperation1();</span><br><span class=\"line\">String s2 = somewhatLongOperation2();</span><br><span class=\"line\">String s3 = concatenate(s1, s2);</span><br></pre></td></tr></table></figure>\n<p>如果是函数式程序，编译器就可以对代码进行分析，然后可能分析出生成字符串s1和s2的两个函数可能会比较耗时，进而安排它们并行运行。这在指令式编程中是无法做到的，因为每一个函数都有可能修改其外部状态，然后接下来的函数又可能依赖于这些状态的值。在函数式编程中，自动分析代码并找到适合并行执行的函数十分简单，和分析C的内联函数没什么两样。从这个角度来说用FP风格编写的程序是“永不过时”的（虽然我一般不喜欢说大话空话，不过这次就算个例外吧）。硬件厂商已经没办法让CPU运行得再快了。他们只能靠增加CPU核的数量然后用并行来提高运算的速度。这些厂商故意忽略一个事实：只有可以并行的软件才能让你花大价钱买来的这些硬件物有所值。指令式的软件中只有很小一部分能做到跨核运行，而所有的函数式软件都能实现这一目标，因为FP的程序从一开始就是可以并行运行的。</p>\n<h4 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h4><p>在Windows早期，如果要更新系统那可是要重启电脑的，而且还要重启很多次。哪怕只是安装一个新版本的播放器。到了XP的时代这种情况得到比较大的改善，尽管还是不理想（我工作的时候用的就是Windows，就在现在，我的系统托盘上就有个讨厌的图标，我不重启机子就不消失）。这一方面Unix好一些，曾经。只需要暂停一些相关的部件而不是整个操作系统，就可以安装更新了。虽然是要好一些了，对很多服务器应用来说这也还是不能接受的。电信系统要求的是100%的在线率，如果一个救急电话因为系统升级而无法拨通，成千上万的人就会因此丧命。同样的，华尔街的那些公司怎么也不能说要安装软件而在整个周末停止他们系统的服务。<br>最理想的情况是更新相关的代码而不用暂停系统的其他部件。对指令性程序来说是不可能的。想想看，试着在系统运行时卸载掉一个Java的类然后再载入这个类的新的实现，这样做的话系统中所有该类的实例都会立刻不能运行，因为该类的相关状态已经丢失了。这种情况下可能需绞尽脑汁设计复杂的版本控制代码，需要将所有这种类正在运行的实例<a href=\"http://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97%E5%8C%96\" target=\"_blank\" rel=\"noopener\">序列化</a>，逐一销毁它们，然后创建新类的实例，将现有数据也序列化后装载到这些新的实例中，最后希望负责装载的程序可以正确的把这些数据移植到新实例中并正常的工作。这种事很麻烦，每次有新的改动都需要手工编写装载程序来完成更新，而且这些装载程序还要很小心，以免破坏了现有对象之间的联系。理论上是没问题，可是实际上完全行不通。<br>FP的程序中所有状态就是传给函数的参数，而参数都是储存在栈上的。这一特性让软件的热部署变得十分简单。只要比较一下正在运行的代码以及新的代码获得一个diff，然后用这个diff更新现有的代码，新代码的热部署就完成了。其它的事情有FP的语言工具自动完成！如果还有人认为这只存在于科幻小说中，他需要再想想：多年来Erlang工程师已经使用这种技术对它们的系统进行升级而完全不用暂停运行了。     </p>\n<h4 id=\"机器辅助优化及证明\"><a href=\"#机器辅助优化及证明\" class=\"headerlink\" title=\"机器辅助优化及证明\"></a>机器辅助优化及证明</h4><p>FP语言有一个特性很有意思，那就是它们是可以用数学方法来分析的。FP语言本身就是形式系统的实现，只要是能在纸上写出来的数学运算就可以用这种语言表述出来。于是只要能够用数学方法证明两段代码是一致的，编译器就可以把某段代码解析成在数学上等同的但效率又更高的另外一段代码<sup>7</sup>。 关系数据库已经用这种方法进行优化很多年了。没有理由在常规的软件行业就不能应用这种技术。<br>另外，还可以用这种方法来证明代码的正确性，甚至可以设计出能够自动分析代码并为单元测试自动生成边缘测试用例的工具出来！对于那些对缺陷零容忍的系统来说，这一功能简直就是无价之宝。例如心脏起搏器，例如飞行管控系统，这几乎就是必须满足的需求。哪怕你正在开发的程序不是为了完成什么重要核心任务，这些工具也可以帮助你写出更健壮的程序，直接甩竞争对手n条大街。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>我还记得在了解到FP以上的各种好处后想到：“这些优势都很吸引人，可是，如果必须非要用这种所有变量都是final的蹩脚语言，估计还是不怎么实用吧”。其实这样的想法是不对的。对于Java这样的指令式语言来说，如果所有的变量都是必须是final的，那么确实很束手束脚。然而对函数式语言来说，情况就不一样了。函数式语言提供了一种特别的抽象工具，这种工具将帮助使用者编写FP代码，让他们甚至都没想到要修改变量的值。高阶函数就是这种工具之一。<br>FP语言中的函数有别于Java或是C。可以说这种函数是一个<a href=\"http://zh.wikipedia.org/wiki/%E5%85%A8%E9%9B%86\" target=\"_blank\" rel=\"noopener\">全集</a>：Java函数可以做到的它都能做，同时它还有更多的能力。首先，像在C里写程序那样创建一个函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看起来和C程序没什么区别，但是很快你就可以看出区别来。接下来我们扩展Java的编译器以便支持这种代码，也就是说，当我们写下以上的程序编译器会把它转化成下面的Java程序（别忘了，所有的变量都是final的）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">add_function_t</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i + j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add_function_t add = <span class=\"keyword\">new</span> add_function_t();</span><br></pre></td></tr></table></figure>\n<p>在这里，符号add并不是一个函数，它是只有一个函数作为其成员的简单的类。这样做有很多好处，可以在程序中把add当成参数传给其他的函数，也可以把add赋给另外一个符号，还可以在运行时创建add_function_t的实例然后在不再需要这些实例的时候由系统回收机制处理掉。这样做使得函数成为和integer或是string这样的<a href=\"http://zh.wikipedia.org/zh/%E7%AC%AC%E4%B8%80%E9%A1%9E%E7%89%A9%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">第一类对象</a>。对其他函数进行操作（比如说把这些函数当成参数）的函数，就是所谓的高阶函数。别让这个看似高深的名字吓倒你（译者：好死不死起个这个名字，初一看还准备搬出已经尘封的高数教材……），它和Java中操作其他类（也就是把一个类实例传给另外的类）的类没有什么区别。可以称这样的类为“高阶类”，但是没人会在意，因为Java圈里就没有什么很强的学术社团。（译者：这是高级黑吗？）<br>那么什么时候该用高阶函数，又怎样用呢？我很高兴有人问这个问题。设想一下，你写了一大堆程序而不考虑什么类结构设计，然后发现有一部分代码重复了几次，于是你就会把这部分代码独立出来作为一个函数以便多次调用（所幸学校里至少会教这个）。如果你发现这个函数里有一部分逻辑需要在不同的情况下实现不同的行为，那么你可以把这部分逻辑独立出来作为一个高阶函数。搞晕了？下面来看看我工作中的一个真实的例子。</p>\n<p>假设有一段Java的客户端程序用来接收消息，用各种方式对消息做转换，然后发给一个服务器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        msg.setClientCode(<span class=\"string\">\"ABCD_123\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sendMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再进一步假设，整个系统改变了，现在需要发给两个服务器而不再是一个了。系统其他部分都不变，唯独客户端的代码需要改变：额外的那个服务器需要用另外一种格式发送消息。应该如何处理这种情况呢？我们可以先检查一下消息要发送到哪里，然后选择相应的格式把这个消息发出去：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(msg.getDestination().equals(<span class=\"string\">\"server1\"</span>) &#123;</span><br><span class=\"line\">            msg.setClientCode(<span class=\"string\">\"ABCD_123\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msg.setClientCode(<span class=\"string\">\"123_ABC\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sendMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可是这样的实现是不具备扩展性的。如果将来需要增加更多的服务器，上面函数的大小将呈线性增长，使得维护这个函数最终变成一场噩梦。面向对象的编程方法告诉我们，可以把MessageHandler变成一个基类，然后将针对不同格式的消息编写相应的子类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        msg.setClientCode(getClientCode());</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sendMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> String <span class=\"title\">getClientCode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandlerOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getClientCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ABCD_123\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandlerTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getClientCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"123_ABCD\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来就可以为每一个接收消息的服务器生成一个相应的类对象，添加服务器就变得更加容易维护了。可是，这一个简单的改动引出了很多的代码。仅仅是为了支持不同的客户端行为代码，就要定义两种新的类型！现在来试试用我们刚才改造的语言来做同样的事情，注意，这种语言支持高阶函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg, Function getClientCode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        Message msg1 = msg.setClientCode(getClientCode());</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sendMessage(msg1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getClientCodeOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"ABCD_123\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getClientCodeTwo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"123_ABCD\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MessageHandler handler = <span class=\"keyword\">new</span> MessageHandler();</span><br><span class=\"line\">handler.handleMessage(someMsg, getClientCodeOne);</span><br></pre></td></tr></table></figure>\n<p>在上面的程序里，我们没有创建任何新的类型或是多层类的结构。仅仅是把相应的函数作为参数进行传递，就做到了和用面向对象编程一样的事情，而且还有额外的好处：一是不再受限于多层类的结构。这样做可以做运行时传递新的函数，可以在任何时候改变这些函数，而且这些改变不仅更加精准而且触碰的代码更少。这种情况下编译器其实就是在替我们编写面向对象的“粘合”代码（译者：又称胶水代码，粘接代码）！除此之外我们还可以享用FP编程的其他所有优势。函数式编程能提供的抽象服务还远不止于此。高阶函数只不过是个开始。</p>\n<h3 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h3><p>我遇见的大多数码农都读过“<a href=\"http://baike.baidu.com/view/66964.htm#2\" target=\"_blank\" rel=\"noopener\">四人帮</a>”的那本《设计模式》。任何稍有自尊心的码农都会说这本书和语言无关，因此无论你用什么编程语言，当中提到的那些模式大体上适用于所有软件工程。听起来很厉害，然而事实却不是这样。<br>函数式语言的表达能力很强。用这种语言编程的时候基本不需要设计模式，因为这种语言层次已经足够高，使得使用者可以以概念编程，从而完全不需要设计模式了。以<a href=\"http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">适配器模式</a>为例（有人知道这个模式和<a href=\"http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">外观模式</a>有什么区别吗？怎么觉得有人为了出版合同的要求而硬生生凑页数？）（译者：您不愧是高级黑啊）。对于一个支持currying技术的语言来说，这个模式就是多余的。<br>在Java中最有名的适配器模式就是在其“默认”抽象单元中的应用：类。在函数式语言中这种模式其实就是函数。在这个模式中，一个接口被转换成另外一个接口，让不同的用户代码调用。接下来就有一个适配器模式的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pow(i, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中square函数计算一个整数的平方，这个函数的接口被转换成计算一个整数的任意整数次幂。在学术圈里这种简单的技术就被叫做currying（因为逻辑学家<a href=\"http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">哈斯凯尔·加里</a>用其数学技巧将这种技术描述出来，于是就以他的名字来命名了）。在一个FP语言中函数（而不是类）被作为参数进行传递，currying常常用于转化一个函数的接口以便于其他代码调用。函数的接口就是它的参数，于是currying通常用于减少函数参数的数量（见前例）。<br>函数式语言生来就支持这一技术，于是没有必要为某个函数手工创建另外一个函数去包装并转换它的接口，这些函数式语言已经为你做好了。我们继续拓展Java来支持这一功能。    </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">square = <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"number\">2</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>上面的语句实现了一个平方计算函数，它只需要一个参数。它会继而调用pow函数并且把第二个参数置为2。编译过后将生成以下Java代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">square_function_t</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pow(i, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">square_function_t square = <span class=\"keyword\">new</span> square_function_t();</span><br></pre></td></tr></table></figure>\n<p>从上面的例子可以看到，很简单的，函数pow的封装函数就创建出来了。在FP语言中currying就这么简单：一种可以快速且简单的实现函数封装的捷径。我们可以更专注于自己的设计，编译器则会为你编写正确的代码！什么时候使用currying呢？很简单，当你想要用适配器模式（或是封装函数）的时候，就是用currying的时候。</p>\n<h3 id=\"惰性求值\"><a href=\"#惰性求值\" class=\"headerlink\" title=\"惰性求值\"></a><a href=\"http://zh.wikipedia.org/zh/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC\" target=\"_blank\" rel=\"noopener\">惰性求值</a></h3><p>惰性求值（或是延迟求值）是一种有趣的技术，而当我们投入函数式编程的怀抱后这种技术就有了得以实现的可能。前面介绍并发执行的时候已经提到过如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = somewhatLongOperation1();</span><br><span class=\"line\">String s2 = somewhatLongOperation2();</span><br><span class=\"line\">String s3 = concatenate(s1, s2);</span><br></pre></td></tr></table></figure>\n<p>在指令式语言中以上代码执行的顺序是显而易见的。由于每个函数都有可能改动或者依赖于其外部的状态，因此必须顺序执行。先是计算somewhatLongOperation1，然后到somewhatLongOperation2，最后执行concatenate。函数式语言就不一样了。<br>在前面讨论过，somewhatLongOperation1和somewhatLongOperation2是可以并发执行的，因为函数式语言保证了一点：没有函数会影响或者依赖于全局状态。可是万一我们不想要这两个函数并发执行呢？这种情况下是不是也还是要顺序执行这些函数？答案是否定的。只有到了执行需要s1、s2作为参数的函数的时候，才真正需要执行这两个函数。于是在concatenate这个函数没有执行之前，都没有需要去执行这两个函数：这些函数的执行可以一直推迟到concatenate()中需要用到s1和s2的时候。假如把concatenate换成另外一个函数，这个函数中有条件判断语句而且实际上只会需要两个参数中的其中一个，那么就完全没有必要执行计算另外一个参数的函数了！Haskell语言就是一个支持惰性求值的例子。Haskell不能保证任何语句会顺序执行（甚至完全不会执行到），因为Haskell的代码只有在需要的时候才会被执行到。<br>除了这些优点，惰性求值也有缺点。这里介绍了它的优点，我们将在下一章节介绍这些缺点以及如何克服它们。     </p>\n<h4 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h4><p>惰性求值使得代码具备了巨大的优化潜能。支持惰性求值的编译器会像数学家看待代数表达式那样看待函数式程序：抵消相同项从而避免执行无谓的代码，安排代码执行顺序从而实现更高的执行效率甚至是减少错误。在此基础上优化是不会破坏代码正常运行的。严格使用形式系统的基本元素进行编程带来的最大的好处，是可以用数学方法分析处理代码，因为这样的程序是完全符合数学法则的。</p>\n<h4 id=\"抽象化控制结构\"><a href=\"#抽象化控制结构\" class=\"headerlink\" title=\"抽象化控制结构\"></a>抽象化控制结构</h4><p>惰性求值技术提供了更高阶的抽象能力，这提供了实现程序设计独特的方法。比如说下面的控制结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unless(stock.isEuropean()) &#123;</span><br><span class=\"line\">    sendToSEC(stock);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序中只有在stock为European的时候才执行sendToSEC。如何实现例子中的unless？如果没有惰性求值就需要求助于某种形式的宏（译者：用if不行么？），不过在像Haskell这样的语言中就不需要那么麻烦了。直接实现一个unless函数就可以！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unless</span><span class=\"params\">(<span class=\"keyword\">boolean</span> condition, List code)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!condition)</span><br><span class=\"line\">        code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意，如果condition值为真，那就不会计算code。在其他严格语言（见<a href=\"http://zh.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5#.E4.B8.A5.E6.A0.BC.E6.B1.82.E5.80.BC_.28Strict_evaluation.29\" target=\"_blank\" rel=\"noopener\">严格求值</a>）中这种行为是做不到的，因为在进入unless这个函数之前，作为参数的code已经被计算过了。</p>\n<h4 id=\"无穷数据结构\"><a href=\"#无穷数据结构\" class=\"headerlink\" title=\"无穷数据结构\"></a>无穷数据结构</h4><p>惰性求值技术允许定义无穷数据结构，这要在严格语言中实现将非常复杂。例如一个储存Fibonacci数列数字的列表。很明显这样一个列表是无法在有限的时间内计算出这个无穷的数列并存储在内存中的。在像Java这样的严格语言中，可以定义一个Fibonacci函数，返回这个序列中的某个数。而在Haskell或是类似的语言中，可以把这个函数进一步抽象化并定义一个Fibonacci数列的无穷列表结构。由于语言本身支持惰性求值，这个列表中只有真正会被用到的数才会被计算出来。这让我们可以把很多问题抽象化，然后在更高的层面上解决它们（比如可以在一个列表处理函数中处理无穷多数据的列表）。</p>\n<h4 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h4><p>俗话说天下没有免费的午餐™。惰性求值当然也有其缺点。其中最大的一个就是，嗯，惰性。现实世界中很多问题还是需要严格求值的。比如说下面的例子：   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"Please enter your name: \"</span>);</span><br><span class=\"line\">System.in.readLine();</span><br></pre></td></tr></table></figure>\n<p>在惰性语言中没人能保证第一行会中第二行之前执行！这也就意味着我们不能处理IO，不能调用系统函数做任何有用的事情（这些函数需要按照顺序执行，因为它们依赖于外部状态），也就是说不能和外界交互了！如果在代码中引入支持顺序执行的代码原语，那么我们就失去了用数学方式分析处理代码的优势（而这也意味着失去了函数式编程的所有优势）。幸运的是我们还不算一无所有。数学家们研究了不同的方法用以保证代码按一定的顺序执行（in a functional setting?）。这一来我们就可以同时利用到函数式和指令式编程的优点了！这些方法有continuations，monads以及uniqueness typing。这篇文章仅仅介绍了continuations，以后再讨论monads和uniqueness typing。有意思的是呢，coutinuations处理强制代码以特定顺序执行之外还有其他很多出处，这些我们在后面也会提及。</p>\n<h3 id=\"Continuation\"><a href=\"#Continuation\" class=\"headerlink\" title=\"Continuation\"></a>Continuation</h3><p>continuation对于编程，就像是达芬奇密码对于人类历史一样：它揭开了人类有史以来最大的谜团。好吧，也许没有那么夸张，不过它们的影响至少和当年发现负数有平方根不相上下。</p>\n<p>我们对函数的理解只有一半是正确的，因为这样的理解基于一个错误的假设：函数一定要把其返回值返回给调用者。按照这样的理解，continuation就是更加广义的函数。这里的函数不一定要把返回值传回给调用者，相反，它可以把返回值传给程序中的任意代码。continuation就是一种特别的参数，把这种参数传到函数中，函数就能够根据continuation将返回值传递到程序中的某段代码中。说得很高深，实际上没那么复杂。直接来看看下面的例子好了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = add(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> j = square(i);</span><br></pre></td></tr></table></figure>\n<p>add这个函数将返回15然后这个值会赋给i，这也是add被调用的地方。接下来i的值又会被用于调用square。请注意支持惰性求值的编译器是不能打乱这段代码执行顺序的，因为第二个函数的执行依赖于第一个函数成功执行并返回结果。这段代码可以用Continuation Pass Style（CPS）技术重写，这样一来add的返回值就不是传给其调用者，而是直接传到square里去了。     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> j = add(<span class=\"number\">5</span>, <span class=\"number\">10</span>, square);</span><br></pre></td></tr></table></figure>\n<p>在上例中，add多了一个参数：一个函数，add必须在完成自己的计算后，调用这个函数并把结果传给它。这时square就是add的一个continuation。上面两段程序中j的值都是225。    </p>\n<p>这样，我们学习到了强制惰性语言顺序执行两个表达式的第一个技巧。再来看看下面IO程序（是不是有点眼熟？）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"Please enter your name: \"</span>);</span><br><span class=\"line\">System.in.readLine();</span><br></pre></td></tr></table></figure>\n<p>这两行代码彼此之间没有依赖关系，因此编译器可以随意的重新安排它们的执行顺序。可是只要用CPS重写它，编译器就必须顺序执行了，因为重写后的代码存在依赖关系了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"Please enter your name: \"</span>, System.in.readLine);</span><br></pre></td></tr></table></figure>\n<p>这段新的代码中println需要结合其计算结果调用readLine，然后再返回readLine的返回值。这使得两个函数得以保证按顺序执行而且readLine总被执行（这是由于整个运算需要它的返回值作为最终结果）。Java的println是没有返回值的，但是如果它可以返回一个能被readnLine接受的抽象值，问题就解决了！（译者：别忘了，这里作者一开始就在Java的基础上修改搭建自己的语言）当然，如果一直把函数按照这种方法串下去，代码很快就变得不可读了，可是没有人要求你一定要这样做。可以通过在语言中添加<a href=\"http://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96\" target=\"_blank\" rel=\"noopener\">语法糖</a>的方式来解决这个问题，这样程序员只要按照顺序写代码，编译器负责自动把它们串起来就好了。于是就可以任意安排代码的执行顺序而不用担心会失去FP带来的好处了（包括可以用数学方法来分析我们的程序）！如果到这里还有人感到困惑，可以这样理解，函数只是有唯一成员的类的实例而已。试着重写上面两行程序，让println和readLine编程这种类的实例，所有问题就都搞清楚了。<br>到这里本章基本可以结束了，而我们仅仅了解到continuation的一点皮毛，对它的用途也知之甚少。我们可以用CPS完成整个程序，程序里所有的函数都有一个额外的continuation作为参数接受其他函数的返回值。还可以把任何程序转换为CPS的，需要做的只是把当中的函数看作是特殊的continuation（总是将返回值传给调用者的continuation）就可以了，简单到完全可以由工具自动完成（史上很多编译器就是这样做的）。    </p>\n<p>一旦将程序转为CPS的风格，有些事情就变得显而易见了：每一条指令都会有一些continuation，都会将它的计算结果传给某一个函数并调用它，在一个普通的程序中这个函数就是该指令被调用并且返回的地方。随便找个之前提到过的代码，比如说add(5,10)好了。如果add属于一个用CPS风格写出的程序，add的continuation很明显就是当它执行结束后要调用的那个函数。可是在一个非CPS的程序中，add的continuation又是什么呢？当然我们还是可以把这段程序转成CPS的，可是有必要这样做吗？<br>事实上没有必要。注意观察整个CPS转换过程，如果有人尝试要为CPS程序写编译器并且认真思考过就会发现：CPS的程序是不需要栈的！在这里完全没有函数需要做传统意义上的“返回”操作，函数执行完后仅需要接着调用另外一个函数就可以了。于是就不需要在每次调用函数的时候把参数压栈再将它们从中取出，只要把这些参数存放在一片内存中然后使用跳转指令就解决问题了。也完全不需要保留原来的参数：因为这种程序里的函数都不返回，所以它们不会被用第二次！<br>简单点说呢，用CPS风格写出来的程序不需要栈，但是每次调用函数的时候都会要多加一个参数。非CPS风格的程序不需要额外的参数但又需要栈才能运行。栈里面存的是什么？仅仅是参数还有一个供函数运行结束后返回的程序指针而已。这个时候你是不是已经恍然大悟了？对啊，栈里面的数据实际上就是continuation的信息！栈上的程序返回指针实质上就是CPS程序中需要调用的下一个函数！想要知道add(5, 10)的continuation是什么？只要看它运行时栈的内容就可以了。<br>接下来就简单多了。continuation和栈上指示函数返回地址的指针其实是同一样东西，只是continuation是显式的传递该地址并且因此代码就不局限于只能返回到函数被调用的地方了。前面说过，continuation就是函数，而在我们特制的语言中函数就是类的实例，那么可以得知栈上指向函数返回地址的指针和continuation的参数是一样的，因为我们所谓的函数（就像类的一个实例）其实就是指针。这也意味着在程序运行的任何时候，你都可以得到当前的continuation（就是栈上的信息）。     </p>\n<p>好了，我们已经搞清楚当前的continuation是什么了。接下来要弄明白它的存在有什么意义。只要得到了当前的continuation并将它保存起来，就相当于保存了程序的当前状态：在时间轴上把它冻结起来了。这有点像操作系统进入休眠状态。continuation对象保存了足够的信息随时可以从指定的某个状态继续运行程序。在切换线程的时候操作系统也是这样做的。唯一的区别在于它保留了所有的控制权利。当请求某个continuation对象时（在Scheme语言中是通过调用call-with-current-continuation函数实现的）得到的是一个存有当前continuation的对象，也就是栈对象（在CPS中也就是下一个要执行的函数）。可以把这个对象保存做一个变量中（或者是存在磁盘上）。当以该continuation对象“重启”该程序时，程序的状态就会立即“转换”为该对象中保存的状态。这一点和切换回一个被暂停的线程或是从系统休眠中唤醒很相像，唯一不同的是continuatoin对象可以反复的这样使用。当系统唤醒后，休眠前保存的信息就会销毁，否则你也可以反复的从该点唤醒系统，就像乘时光机回到过去一样。有了continuation你就可以做到这一点！       </p>\n<p>那么continuation在什么情况下有用呢？有一些应用程序天生就没有状态，如果要在这样的系统中模拟出状态以简化工作的时候，就可以用到continuation。最合适的应用场合之一就是网页应用程序。微软的ASP.NET为了让程序员更轻松的编写应用程序，花了大量的精力去模拟各种状态。假如C#支持continuation的话，那么ASP.NET的复杂度将减半：因为只要把某一时刻的continuation保存起来，下次用户再次发起同样请求的时候，重新载入这个continuation即可。对于网络应用的程序员来说就再也没有中断了：轻轻松松程序就从下一行开始继续运行了！对于一些实际问题来说，continuation是一种非常有用的抽象工具。如今大量的传统胖客户端（见<a href=\"http://zh.wikipedia.org/wiki/%E7%98%A6%E5%AE%A2%E6%88%B7%E7%AB%AF\" target=\"_blank\" rel=\"noopener\">瘦客户端</a>）正纷纷走进网络，continuation在未来将扮演越来越重要的角色。</p>\n<h3 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h3><p>模式匹配并不是什么新功能。而事实上它和函数式编程也没有什么太大的关系。它之所以常常被认为是FP的一个特性，是因为在函数式语言已经支持模式匹配很长一段时间后的今天，指令式语言是还没有这个功能。</p>\n<p>还是直接用例子来看看什么是模式匹配吧，这是一个用Java写的Fibonacci函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(n - <span class=\"number\">2</span>) + fib(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再看看用我们基于Java修改过的新语言写出来的Fibonacci函数，这种新语言就支持模式匹配：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(n - <span class=\"number\">2</span>) + fib(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>区别在哪里呢？在于后者的编译器替我们实现了程序的分支。<br>这有什么了不起的？确实也没什么。只是有人注意到很多函数中有非常复杂的switch结构（对于函数式程序而言更是如此），于是想到如果能把这层结构也抽象化就更好了。然后就把这个复杂的函数拆分成若干新的函数，并在这些函数的某些参数中应用模式（这和<a href=\"http://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\" target=\"_blank\" rel=\"noopener\">重载</a>有点类似）。这样依赖当这个函数被调用的时候，编译器会在运行时将调用者传入的参数与各个新函数的参数定义进行比较，找出合适的那个函数来执行。合适的函数往往是参数定义上最具体最接近传入参数的那个函数。在这个例子中，当n为1时，可以用函数int fib(int n)，不过真正调用的是int fib(1)因为这个函数更具体更接近调用者的要求。<br>模式匹配一般来说要比这里举的例子更加复杂。比如说，高级模式匹配系统可以支持下面的操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n &lt; <span class=\"number\">10</span>)</span> </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>那么什么情况下模式匹配会有用呢？在需要处理一大堆程序分支的时候！每当需要实现复杂的嵌套if语句的时候，模式匹配可以帮助你用更少的代码更好的完成任务。我所知道的一个这样的函数是标准的WndProc函数，该函数是所有Win32应用程序必须具备的（尽管它经常会被抽象化）。模式匹配系统一般都可以像匹配简单数值一样匹配数据集合。举个例子，对于一个接受数组作为参数的函数，可以通过模式匹配数组中第一个数字为1并且第三个数字大于3的输入。<br>模式匹配的另外一个好处是每当需要添加或者修改程序分支时，再也不用面对那个庞大臃肿的函数了。只要添加（或者修改）相关的函数定义即可。有了模式匹配就不再需要四人帮的很多设计模式了。程序分支越多越复杂，模式匹配就越有用。而在习惯使用这一技术之后，你可能会怀疑没有它你一天都过不下去了。</p>\n<h3 id=\"Closure\"><a href=\"#Closure\" class=\"headerlink\" title=\"Closure\"></a>Closure</h3><p>目前为止关于函数式编程各种功能的讨论都只局限在“纯”函数式语言范围内：这些语言都是lambda演算的实现并且都没有那些和阿隆佐形式系统相冲突的特性。然而，很多函数式语言的特性哪怕是在lambda演算框架之外都是很有用的。确实，如果一个公理系统的实现可以用数学思维来看待程序，那么这个实现还是很有用的，但这样的实现却不一定可以付诸实践。很多现实中的语言都选择吸收函数式编程的一些元素，却又不完全受限于函数式教条的束缚。很多这样的语言（比如Common Lisp）都不要求所有的变量必须为final，可以修改他们的值。也不要求函数只能依赖于它们的参数，而是可以读写函数外部的状态。同时这些语言又包含了FP的特性，如高阶函数。与在lambda演算限制下将函数作为参数传递不同，在指令式语言中要做到同样的事情需要支持一个有趣的特性，人们常把它称为lexical closure。还是来看看例子。要注意的是，这个例子中变量不是final，而且函数也可以读写其外部的变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Function <span class=\"title\">makePowerFn</span><span class=\"params\">(<span class=\"keyword\">int</span> power)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">powerFn</span><span class=\"params\">(<span class=\"keyword\">int</span> base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pow(base, power);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> powerFn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Function square = makePowerFn(<span class=\"number\">2</span>);</span><br><span class=\"line\">square(<span class=\"number\">3</span>); <span class=\"comment\">// returns 9</span></span><br></pre></td></tr></table></figure>\n<p>makePowerFn函数返回另一个函数，这个新的函数需要一个整数参数然后返回它的平方值。执行square(3)的时候具体发生了什么事呢？变量power并不在powerFn的域内，因为makePowerFn早就运行结束返回了，所以它的栈也已经不存在了。那么square又是怎么正常工作的呢？这个时候需要语言通过某种方式支持继续存储power的值，以便square后面继续使用。那么如果再定义一个函数，cube，用来计算立方，又应该怎么做呢？那么运行中的程序就必须存储两份power的值，提供给makePowerFn生成的两个函数分别使用。这种保存变量值的方法就叫做closure。closure不仅仅保存宿主函数的参数值，还可以用在下例的用法中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Function <span class=\"title\">makeIncrementer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Function inc1 = makeIncrementer();</span><br><span class=\"line\">Function inc2 = makeIncrementer();</span><br><span class=\"line\"></span><br><span class=\"line\">inc1(); <span class=\"comment\">// returns 1;</span></span><br><span class=\"line\">inc1(); <span class=\"comment\">// returns 2;</span></span><br><span class=\"line\">inc1(); <span class=\"comment\">// returns 3;</span></span><br><span class=\"line\">inc2(); <span class=\"comment\">// returns 1;</span></span><br><span class=\"line\">inc2(); <span class=\"comment\">// returns 2;</span></span><br><span class=\"line\">inc2(); <span class=\"comment\">// returns 3;</span></span><br></pre></td></tr></table></figure>\n<p>运行中的程序负责存储n的值，以便incrementer稍后可以访问它。与此同时，程序还会保存多份n的拷贝，虽然这些值应该在makeIncrementer返回后就消失，但在这个情况下却继续保留下来给每一个incrementer对象使用。这样的代码编译之后会是什么样子？closure幕后的真正工作机理又是什么？这次运气不错，我们有一个后台通行证，可以一窥究竟。<br>一点小常识往往可以帮大忙。乍一看这些本地变量已经不再受限于基本的域限制并拥有无限的生命周期了。于是可以得出一个很明显的结论：它们已经不是存在栈上，而是堆上了<sup>8</sup>。这么说来closure的实现和前面讨论过的函数差不多，只不过closure多了一个额外的引用指向其外部的变量而已：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">some_function_t</span> </span>&#123;</span><br><span class=\"line\">    SymbolTable parentScope;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当closure需要访问不在它本地域的变量时，就可以通过这个引用到更外一层的父域中寻找该变量。谜底揭开了！closure将函数编程与面向对象的方法结合了起来。下一次为了保存并传递某些状态而创建类的时候，想想closure。它能在运行时从相应的域中获得变量，从而可以把该变量当初“成员变量”来访问，也因为这样，就不再需要去创建一个成员变量了。</p>\n<h3 id=\"路在何方？\"><a href=\"#路在何方？\" class=\"headerlink\" title=\"路在何方？\"></a>路在何方？</h3><p>这篇文章仅仅涉及到函数式编程的一些皮毛。考虑到有时候星星之火可以燎原，所以如果它能给你一些帮助那就再好不过了。接下来我计划就<a href=\"http://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA\" target=\"_blank\" rel=\"noopener\">范畴论</a>、monads、函数式编程数据结构、函数式语言中的<a href=\"http://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"noopener\">类型系统</a>、并行函数式编程、数据库的函数式编程以及更多的话题写些类似的文章。如果我可以写出（在我学习的同时）以上清单的一半，我的人生就完整了。于此同时，Google将是我们的良师益友。</p>\n<h3 id=\"欢迎联系\"><a href=\"#欢迎联系\" class=\"headerlink\" title=\"欢迎联系\"></a>欢迎联系</h3><p>如果您有任何问题，评价或者建议，请发邮件到<a href=\"mailto:coffeemug@gmail.com\" target=\"_blank\" rel=\"noopener\">coffeemug@gmail.com</a>（译者：如果翻译方面的问题／建议请发到<a href=\"mailto:yang.huang@ymail.com\" target=\"_blank\" rel=\"noopener\">yang.huang@ymail.com</a>:)）。期待您的回复。</p>\n<p>注：<br><sup>1</sup>当我在2005年求职时的的确确经常问别人这个问题。看着那些茫然的面孔实在是很好玩的事情。你们这些年薪30万美金的家伙，至少应该对自己可以利用的工具有个起码的理解嘛。<br><sup>2</sup>这是个有争议的问题。物理学家和数学家不得不承认目前还无法确定宇宙万物是不是都遵从可以用数学方法描述的各种法则。<br><sup>3</sup>我一直一来都很讨厌在历史课上罗列一堆枯燥无味的时间、人名、事件。对我来说历史就是关于那些改变世界的人们活生生的故事，是他们行为背后的个人动机，是那些他们用以影响芸芸众生的方法和工具。从这个角度来说，接下来的这堂历史课是不完整的，很遗憾。只有那些非常相关的人和事会被提及。<br><sup>4</sup>在我学习函数式编程的时候，“lambda”这个术语搞得我很烦，因为我不知道它到底是什么意思。在这里lambda就是一个函数，在数学符号中用这个希腊字母只是因为它更容易写。所以以后在谈及函数式编程的时候只要你听到lambda，把它在脑中翻译为“函数”就可以了。<br><sup>5</sup>有意思的是不论如何Java中的字符串总是不可修改的。讨论这种背叛Java的设计背后的原因会很有意思，可惜这样会让我们跑题的。<br><sup>6</sup>大部分函数式语言的编译器都会尽量将迭代函数转换为对等的循环语句。这种做法叫做<a href=\"http://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\" target=\"_blank\" rel=\"noopener\">尾调用优化</a>。<br><sup>7</sup>反之则不一定成立。尽管有时候可以证明两段代码是等价的，但不是在所有的情况下都可以得出这样的结论。<br><sup>8</sup>实际上这样做并不比栈上存储要慢，因为在引入<a href=\"http://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"noopener\">垃圾回收机制</a>)后，内存分配操作的时间代价仅为O(1)。     </p>\n","site":{"data":{}},"excerpt":"","more":"<p>2006年6月19日，星期一</p>\n<p><a href=\"https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<h3 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h3><p>我们这些码农做事都是很拖拉的。每天例行报到后，先来点咖啡，看看邮件还有RSS订阅的文章。然后翻翻新闻还有那些技术网站上的更新，再过一遍编程论坛口水区里那些无聊的论战。最后从头把这些再看一次以免错过什么精彩的内容。然后就可以吃午饭了。饭饱过后，回来盯着IDE发一会呆，再看看邮箱，再去搞杯咖啡。光阴似箭，可以回家了……<br>（在被众人鄙视之前）我唯一想说的是，在这些拖拉的日子里总会时不时读到一些<a href=\"http://www.baike.com/wiki/%E4%B8%8D%E6%98%8E%E8%A7%89%E5%8E%89\" target=\"_blank\" rel=\"noopener\">不明觉厉</a>的文章。如果没有打开不应该打开的网站，每隔几天你都可以看到至少一篇这样的东西。它们的共性：难懂，耗时，于是这些文章就慢慢的堆积成山了。很快你就会发现自己已经累积了一堆的收藏链接还有数不清的PDF文件，此时你只希望隐入一个杳无人烟的深山老林里什么也不做，用一年半载好好的消化这些私藏宝贝。当然，我是说最好每天还是能有人来给送吃的顺带帮忙打扫卫生倒垃圾，哇哈哈。   </p>\n<p>我不知道你都收藏了些什么，我的阅读清单里面相当大部分都是函数式编程相关的东东：基本上是最难啃的。这些文章充斥着无比枯燥的教科书语言，我想就连那些在华尔街浸淫10年以上的大牛都无法搞懂这些函数式编程（简称FP）文章到底在说什么。你可以去花旗集团或者德意志银行找个项目经理来问问<sup>1</sup>：你们为什么要选JMS而不用Erlang？答案基本上是：我认为这个学术用的语言还无法胜任实际应用。可是，现有的一些系统不仅非常复杂还需要满足十分严苛的需求，它们就都是用函数式编程的方法来实现的。这，就说不过去了。<br>关于FP的文章确实比较难懂，但我不认为一定要搞得那么晦涩。有一些历史原因造成了这种知识断层，可是FP概念本身并不难理解。我希望这篇文章可以成为一个“FP入门指南”，帮助你从<a href=\"http://zh.wikipedia.org/zh/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">指令式编程</a>走向<a href=\"http://zh.wikipedia.org/zh/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80\" target=\"_blank\" rel=\"noopener\">函数式编程</a>。先来点咖啡，然后继续读下去。很快你对FP的理解就会让同事们刮目相看了。      </p>\n<p>什么是函数式编程（Functional Programming，FP）？它从何而来？可以吃吗？倘若它真的像那些鼓吹FP的人说的那么好，为什么实际应用中那么少见？为什么只有那些在读博士的家伙想要用它？而最重要的是，它母亲的怎么就那么难学？那些所谓的closure、continuation，currying，lazy evaluation还有no side effects都是什么东东（译者：本着保留专用术语的原则，此处及下文类似情形均不译）？如果没有那些大学教授的帮忙怎样把它应用到实际工程里去？为什么它和我们熟悉的万能而神圣的指令式编程那么的不一样？<br>我们很快就会解开这些谜团。刚才我说过实际工程和学术界之间的知识断层是有其历史原因的，那么就先让我来解释一下这个问题。答案，就在接下来的一次公园漫步中：</p>\n<h3 id=\"公园漫步\"><a href=\"#公园漫步\" class=\"headerlink\" title=\"公园漫步\"></a>公园漫步</h3><p>时间机器启动……我们来到公元前380年，也就是2000多年前的雅典城外。这是一个阳光明媚的久违的春天，<a href=\"http://zh.wikipedia.org/zh/%E6%9F%8F%E6%8B%89%E5%9B%BE\" target=\"_blank\" rel=\"noopener\">柏拉图</a>和一个帅气的小男仆走在一片橄榄树荫下。他们正准备前往一个学院。天气很好，吃得很饱，渐渐的，两人的谈话转向了哲学。     </p>\n<p>“你看那两个学生，哪一个更高一些？”，柏拉图小心的选择用字，以便让这个问题更好的引导眼前的这个小男孩。<br>小男仆望向水池旁边的两个男生，“他们差不多一样高。”。<br>“‘差不多一样高’是什么意思？”柏拉图问。<br>“嗯……从这里看来他们是一样高的，但是如果走近一点我肯定能看出差别来。”<br>柏拉图笑了。他知道这个小孩已经朝他引导的方向走了。“这么说来你的意思是世界上没有什么东西是完全相同的咯？”<br>思考了一会，小男孩回答：“是的。万物之间都至少有一丁点差别，哪怕我们无法分辨出来。”<br>说到点子上了！“那你说，如果世界上没有什么东西是完全相等的，你怎么理解‘完全相等’这个概念？”<br>小男仆看起来很困惑。“这我就不知道了。”</p>\n<p>这是人类第一次试图了解数学的本质。柏拉图认为我们所在的世界中，万事万物都是完美模型的一个近似。他同时意识到虽然我们不能感受到完美的模型，但这丝毫不会阻止我们了解完美模型的概念。柏拉图进而得出结论：完美的数学模型只存在于另外一个世界，而因为某种原因我们却可以通过联系着这两个世界的一个纽带来认识这些模型。一个简单的例子就是完美的圆形。没有人见过这样的一个圆，但是我们知道怎样的圆是完美的圆，而且可以用公式把它描述出来。      </p>\n<p>如此说来，什么是数学呢？为什么可以用数学法则来描述我们的这个宇宙？我们所处的这个世界中万事万物都可以用数学来描述吗？<sup>2</sup><br>数理哲学是一门很复杂的学科。它和其他多数哲学一样，更着重于提出问题而不是给出答案。数学就像拼图一样，很多结论都是这样推导出来的：先是确立一些互不冲突的基础原理，以及一些操作这些原理的规则，然后就可以把这些原理以及规则拼凑起来形成新的更加复杂的规则或是定理了。数学家把这种方法称为“形式系统”或是“演算”。如果你想做的话，可以用形式系统描述俄罗斯方块这个游戏。而事实上，俄罗斯方块这个游戏的实现，只要它正确运行，就是一个形式系统。只不过它以一种不常见的形式表现出来罢了。     </p>\n<p>如果<a href=\"http://zh.wikipedia.org/wiki/%E5%8D%8A%E4%BA%BA%E9%A9%AC%E5%BA%A7%CE%B1\" target=\"_blank\" rel=\"noopener\">半人马阿尔法</a>上有文明存在的话，那里的生物可能无法解读我们的俄罗斯方块形式系统甚至是简单的圆形的形式系统，因为它们感知世界的唯一器官可能只有鼻子（译者：偶的妈你咋知道？）也许它们是无法得知俄罗斯方块的形式系统了，但是它们很有可能知道圆形。它们的圆形我们可能没法解读，因为我们的鼻子没有它们那么灵敏（译者：那狗可以么？）可是只要越过形式系统的表示方式（比如通过使用“超级鼻子”之类的工具来感知这些用味道表示的形式系统，然后使用标准的解码技术把它们翻译成人类能理解的语言），那么任何有足够智力的文明都可以理解这些形式系统的本质。<br>有意思的是，哪怕宇宙中完全不存在任何文明，类似俄罗斯方块还有圆形这样的形式系统依旧是成立的：只不过没有智慧生物去发现它们而已。这个时候如果忽然一个文明诞生了，那么这些具有智慧的生物就很有可能发现各种各样的形式系统，并且用它们发现的系统去描述各种宇宙法则。不过它们可能不会发现俄罗斯方块这样的形式系统，因为在它们的世界里没有俄罗斯方块这种东西嘛。有很多像俄罗斯方块这样的形式系统是与客观世界无关的，比如说自然数，很难说所有的自然数都与客观世界有关，随便举一个超级大的数，这个数可能就和世界上任何事物无关，因为这个世界可能不是无穷大的。</p>\n<h3 id=\"历史回眸3\"><a href=\"#历史回眸3\" class=\"headerlink\" title=\"历史回眸3\"></a>历史回眸<sup>3</sup></h3><p>再次启动时间机……这次到达的是20世纪30年代，离今天近了很多。无论<a href=\"http://zh.wikipedia.org/wiki/%E6%96%B0%E5%A4%A7%E9%99%B8\" target=\"_blank\" rel=\"noopener\">新</a><a href=\"http://zh.wikipedia.org/wiki/%E8%88%8A%E5%A4%A7%E9%99%B8\" target=\"_blank\" rel=\"noopener\">旧</a>大陆，经济大萧条都造成了巨大的破坏。社会各阶层几乎每一个家庭都深受其害。只有极其少数的几个地方能让人们免于遭受穷困之苦。几乎没有人能够幸运的在这些避难所里度过危机，注意，我说的是几乎没有，还真的有这么些幸运儿，比如说当时普林斯顿大学的数学家们。    </p>\n<p>新建成的哥特式办公楼给普林斯顿大学带来一种天堂般的安全感。来自世界各地的逻辑学者应邀来到普林斯顿，他们将组建一个新的学部。正当大部分美国人还在为找不到一片面包做晚餐而发愁的时候，在普林斯顿却是这样一番景象：高高的天花板和木雕包覆的墙，每天品茶论道，漫步丛林。<br>一个名叫<a href=\"http://zh.wikipedia.org/zh/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87\" target=\"_blank\" rel=\"noopener\">阿隆佐·邱奇</a>(Alonzo Church)的年轻数学家就过着这样优越的生活。阿隆佐本科毕业于普林斯顿后被留在研究院。他觉得这样的生活完全没有必要，于是他鲜少出现在那些数学茶会中也不喜欢到树林里散心。阿隆佐更喜欢独处：自己一个人的时候他的工作效率更高。尽管如此他还是和普林斯顿学者保持着联系，这些人当中有<a href=\"http://zh.wikipedia.org/zh/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5\" target=\"_blank\" rel=\"noopener\">艾伦·图灵</a>、<a href=\"http://zh.wikipedia.org/zh/%E7%BA%A6%E7%BF%B0%C2%B7%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC\" target=\"_blank\" rel=\"noopener\">约翰·冯·诺伊曼</a>、<a href=\"http://zh.wikipedia.org/zh-hant/%E5%BA%93%E5%B0%94%E7%89%B9%C2%B7%E5%93%A5%E5%BE%B7%E5%B0%94\" target=\"_blank\" rel=\"noopener\">库尔特·哥德尔</a>。<br>这四个人都对形式系统感兴趣。相对于现实世界，他们更关心如何解决抽象的数学问题。而他们的问题都有这么一个共同点：都在尝试解答关于计算的问题。诸如：如果有一台拥有无穷计算能力的超级机器，可以用来解决什么问题？它可以自动的解决这些问题吗？是不是还是有些问题解决不了，如果有的话，是为什么？如果这样的机器采用不同的设计，它们的计算能力相同吗？<br>在与这些人的合作下，阿隆佐设计了一个名为<a href=\"http://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\" target=\"_blank\" rel=\"noopener\">lambda演算</a>的形式系统。这个系统实质上是为其中一个超级机器设计的编程语言。在这种语言里面，函数的参数是函数，返回值也是函数。这种函数用希腊字母lambda（<a href=\"http://en.wikipedia.org/wiki/Lambda\" target=\"_blank\" rel=\"noopener\">λ</a>），这种系统因此得名<sup>4</sup>。有了这种形式系统，阿隆佐终于可以分析前面的那些问题并且能够给出答案了。<br>除了阿隆佐·邱奇，艾伦·图灵也在进行类似的研究。他设计了一种完全不同的系统（后来被称为<a href=\"http://zh.wikipedia.org/zh/%E5%9B%BE%E7%81%B5%E6%9C%BA\" target=\"_blank\" rel=\"noopener\">图灵机</a>），并用这种系统得出了和阿隆佐相似的答案。到了后来人们证明了图灵机和lambda演算的能力是一样的。    </p>\n<p>如果二战没有发生，这个故事到这里就应该结束了，我的这篇小文没什么好说的了，你们也可以去看看有什么其他好看的文章。可是二战还是爆发了，整个世界陷于火海之中。那时的美军空前的大量使用炮兵。为了提高轰炸的精度，军方聘请了大批数学家夜以继日的求解各种差分方程用于计算各种火炮发射数据表。后来他们发现单纯手工计算这些方程太耗时了，为了解决这个问题，各种各样的计算设备应运而生。IBM制造的Mark一号就是用来计算这些发射数据表的第一台机器。Mark一号重5吨，由75万个零部件构成，每一秒可以完成3次运算。<br>战后，人们为提高计算能力而做出的努力并没有停止。1949年第一台电子离散变量自动计算机诞生并取得了巨大的成功。它是<a href=\"http://zh.wikipedia.org/zh/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84\" target=\"_blank\" rel=\"noopener\">冯·诺伊曼设计架构</a>的第一个实例，也是一台现实世界中实现的图灵机。相比他的这些同事，那个时候阿隆佐的运气就没那么好了。<br>到了50年代末，一个叫John McCarthy的MIT教授（他也是普林斯顿的硕士）对阿隆佐的成果产生了兴趣。1958年他发明了一种列表处理语言（Lisp），这种语言是一种阿隆佐lambda演算在现实世界的实现，而且它能在冯·诺伊曼计算机上运行！很多计算机科学家都认识到了Lisp强大的能力。1973年在MIT人工智能实验室的一些程序员研发出一种机器，并把它叫做Lisp机。于是阿隆佐的lambda演算也有自己的硬件实现了！</p>\n<h3 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h3><p>函数式编程是阿隆佐思想的在现实世界中的实现。不过不是全部的lambda演算思想都可以运用到实际中，因lambda演算在设计的时候就不是为了在各种现实世界中的限制下工作的。所以，就像面向对象的编程思想一样，函数式编程只是一系列想法，而不是一套严苛的规定。有很多支持函数式编程的程序语言，它们之间的具体设计都不完全一样。在这里我将用Java写的例子介绍那些被广泛应用的函数式编程思想（没错，如果你是受虐狂你可以用Java写出函数式程序）。在下面的章节中我会在Java语言的基础上，做一些修改让它变成实际可用的函数式编程语言。那么现在就开始吧。     </p>\n<p>Lambda演算在最初设计的时候就是为了研究计算相关的问题。所以函数式编程主要解决的也是计算问题，而出乎意料的是，是用函数来解决的！（译者：请理解原作者的苦心，我想他是希望加入一点调皮的风格以免读者在中途睡着或是转台……）。函数就是函数式编程中的基础元素，可以完成几乎所有的操作，哪怕最简单的计算，也是用函数完成的。我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式（这样我们就不用把所有的代码都写在同一行里了）。所以我们这里所说的‘变量’是不能被修改的。所有的变量只能被赋一次初值。在Java中就意味着每一个变量都将被声明为final（如果你用C++，就是const）。在FP中，没有非final的变量。     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> i = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = i + <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>既然FP中所有的变量都是final的，可以引出两个规定：一是变量前面就没有必要再加上final这个关键字了，二是变量就不能再叫做‘变量’了……于是现在开始对Java做两个改动：所有Java中声明的变量默认为final，而且我们把所谓的‘变量’称为‘符号’。<br>到现在可能会有人有疑问：这个新创造出来的语言可以用来写什么有用的复杂一些的程序吗？毕竟，如果每个符号的值都是不能修改的，那么我们就什么东西都不能改变了！别紧张，这样的说法不完全正确。阿隆佐在设计lambda演算的时候他并不想要保留状态的值以便稍后修改这些值。他更关心的是基于数据之上的操作（也就是更容易理解的“计算”）。而且，lambda演算和图灵机已经被证明了是具有同样能力的系统，因此指令式编程能做到的函数式编程也同样可以做到。那么，怎样才能做到呢？<br>事实上函数式程序是可以保存状态的，只不过它们用的不是变量，而是函数。状态保存在函数的参数中，也就是说在栈上。如果你需要保存一个状态一段时间并且时不时的修改它，那么你可以编写一个递归函数。举个例子，试着写一个函数，用来反转一个Java的字符串。记住咯，这个程序里的变量都是默认为final的<sup>5</sup>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">reverse</span><span class=\"params\">(String arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arg.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reverse(arg.substring(<span class=\"number\">1</span>, arg.length)) + arg.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方程运行起来会相对慢一些，因为它重复调用自己<sup>6</sup>。同时它也会大量的消耗内存，因为它会不断的分配创建内存对象。无论如何，它是用函数式编程思想写出来的。这时候可能有人要问了，为什么要用这种奇怪的方式编写程序呢？嘿，我正准备告诉你。</p>\n<h3 id=\"FP之优点\"><a href=\"#FP之优点\" class=\"headerlink\" title=\"FP之优点\"></a>FP之优点</h3><p>你大概已经在想：上面这种怪胎函数怎么也不合理嘛。在我刚开始学习FP的时候我也这样想的。不过后来我知道我是错的。使用这种方式编程有很多好处。其中一些是主观的。比如说有人认为函数式程序更容易理解。这个我就不说了，哪怕街上随便找个小孩都知道‘容易理解’是多么主观的事情。幸运的是，客观方面的好处还有很多。</p>\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><p>因为FP中的每个符号都是final的，于是没有什么函数会有副作用。谁也不能在运行时修改任何东西，也没有函数可以修改在它的作用域之外修改什么值给其他函数继续使用（在指令式编程中可以用类成员或是全局变量做到）。这意味着决定函数执行结果的唯一因素就是它的返回值，而影响其返回值的唯一因素就是它的参数。<br>这正是单元测试工程师梦寐以求的啊。现在测试程序中的函数时只需要关注它的参数就可以了。完全不需要担心函数调用的顺序，也不用费心设置外部某些状态值。唯一需要做的就是传递一些可以代表边界条件的参数给这些函数。相对于指令式编程，如果FP程序中的每一个函数都能通过单元测试，那么我们对这个软件的质量必将信心百倍。反观Java或者C++，仅仅检查函数的返回值是不够的：代码可能修改外部状态值，因此我们还需要验证这些外部的状态值的正确性。在FP语言中呢，就完全不需要。</p>\n<h4 id=\"调试查错\"><a href=\"#调试查错\" class=\"headerlink\" title=\"调试查错\"></a>调试查错</h4><p>如果一段FP程序没有按照预期设计那样运行，调试的工作几乎不费吹灰之力。这些错误是百分之一百可以重现的，因为FP程序中的错误不依赖于之前运行过的不相关的代码。而在一个指令式程序中，一个bug可能有时能重现而有些时候又不能。因为这些函数的运行依赖于某些外部状态， 而这些外部状态又需要由某些与这个bug完全不相关的代码通过某个特别的执行流程才能修改。在FP中这种情况完全不存在：如果一个函数的返回值出错了，它一直都会出错，无论你之前运行了什么代码。<br>一旦问题可以重现，解决它就变得非常简单，几乎就是一段愉悦的旅程。中断程序的运行，检查一下栈，就可以看到每一个函数调用时使用的每一个参数，这一点和指令式代码一样。不同的是指令式程序中这些数据还不足够，因为函数的运行还可能依赖于成员变量，全局变量，还有其他类的状态（而这些状态又依赖于类似的变量）。FP中的函数只依赖于传给它的参数，而这些参数就在眼前！还有，对指令式程序中函数返回值的检查并不能保证这个函数是正确运行的。还要逐一检查若干作用域以外的对象以确保这个函数没有对这些牵连的对象做出什么越轨的行为（译者：好吧，翻译到这里我自己已经有点激动了）。对于一个FP程序，你要做的仅仅是看一下函数的返回值。<br>把栈上的数据过一遍就可以得知有哪些参数传给了什么函数，这些函数又返回了什么值。当一个返回值看起来不对头的那一刻，跳进这个函数看看里面发生了什么。一直重复跟进下去就可以找到bug的源头！</p>\n<h4 id=\"并发执行\"><a href=\"#并发执行\" class=\"headerlink\" title=\"并发执行\"></a>并发执行</h4><p>不需要任何改动，所有FP程序都是可以并发执行的。由于根本不需要采用锁机制，因此完全不需要担心死锁或是并发竞争的发生。在FP程序中没有哪个线程可以修改任何数据，更不用说多线程之间了。这使得我们可以轻松的添加线程，至于那些祸害并发程序的老问题，想都不用想！<br>既然是这样，为什么没有人在那些高度并行的那些应用程序中采用FP编程呢？事实上，这样的例子并不少见。爱立信开发了一种FP语言，名叫Erlang，并应用在他们的电信交换机上，而这些交换机不仅容错度高而且拓展性强。许多人看到了Erlang的这些优势也纷纷开始使用这一语言。在这里提到的电信交换控制系统远远要比华尔街上使用的系统具有更好的扩展性也更可靠。事实上，用Erlang搭建的系统并不具备可扩展性和可靠性，而Java可以提供这些特性。Erlang只是像岩石一样结实不容易出错而已。<br>FP关于并行的优势不仅于此。就算某个FP程序本身只是单线程的，编译器也可以将其优化成可以在多CPU上运行的并发程序。以下面的程序为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = somewhatLongOperation1();</span><br><span class=\"line\">String s2 = somewhatLongOperation2();</span><br><span class=\"line\">String s3 = concatenate(s1, s2);</span><br></pre></td></tr></table></figure>\n<p>如果是函数式程序，编译器就可以对代码进行分析，然后可能分析出生成字符串s1和s2的两个函数可能会比较耗时，进而安排它们并行运行。这在指令式编程中是无法做到的，因为每一个函数都有可能修改其外部状态，然后接下来的函数又可能依赖于这些状态的值。在函数式编程中，自动分析代码并找到适合并行执行的函数十分简单，和分析C的内联函数没什么两样。从这个角度来说用FP风格编写的程序是“永不过时”的（虽然我一般不喜欢说大话空话，不过这次就算个例外吧）。硬件厂商已经没办法让CPU运行得再快了。他们只能靠增加CPU核的数量然后用并行来提高运算的速度。这些厂商故意忽略一个事实：只有可以并行的软件才能让你花大价钱买来的这些硬件物有所值。指令式的软件中只有很小一部分能做到跨核运行，而所有的函数式软件都能实现这一目标，因为FP的程序从一开始就是可以并行运行的。</p>\n<h4 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h4><p>在Windows早期，如果要更新系统那可是要重启电脑的，而且还要重启很多次。哪怕只是安装一个新版本的播放器。到了XP的时代这种情况得到比较大的改善，尽管还是不理想（我工作的时候用的就是Windows，就在现在，我的系统托盘上就有个讨厌的图标，我不重启机子就不消失）。这一方面Unix好一些，曾经。只需要暂停一些相关的部件而不是整个操作系统，就可以安装更新了。虽然是要好一些了，对很多服务器应用来说这也还是不能接受的。电信系统要求的是100%的在线率，如果一个救急电话因为系统升级而无法拨通，成千上万的人就会因此丧命。同样的，华尔街的那些公司怎么也不能说要安装软件而在整个周末停止他们系统的服务。<br>最理想的情况是更新相关的代码而不用暂停系统的其他部件。对指令性程序来说是不可能的。想想看，试着在系统运行时卸载掉一个Java的类然后再载入这个类的新的实现，这样做的话系统中所有该类的实例都会立刻不能运行，因为该类的相关状态已经丢失了。这种情况下可能需绞尽脑汁设计复杂的版本控制代码，需要将所有这种类正在运行的实例<a href=\"http://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97%E5%8C%96\" target=\"_blank\" rel=\"noopener\">序列化</a>，逐一销毁它们，然后创建新类的实例，将现有数据也序列化后装载到这些新的实例中，最后希望负责装载的程序可以正确的把这些数据移植到新实例中并正常的工作。这种事很麻烦，每次有新的改动都需要手工编写装载程序来完成更新，而且这些装载程序还要很小心，以免破坏了现有对象之间的联系。理论上是没问题，可是实际上完全行不通。<br>FP的程序中所有状态就是传给函数的参数，而参数都是储存在栈上的。这一特性让软件的热部署变得十分简单。只要比较一下正在运行的代码以及新的代码获得一个diff，然后用这个diff更新现有的代码，新代码的热部署就完成了。其它的事情有FP的语言工具自动完成！如果还有人认为这只存在于科幻小说中，他需要再想想：多年来Erlang工程师已经使用这种技术对它们的系统进行升级而完全不用暂停运行了。     </p>\n<h4 id=\"机器辅助优化及证明\"><a href=\"#机器辅助优化及证明\" class=\"headerlink\" title=\"机器辅助优化及证明\"></a>机器辅助优化及证明</h4><p>FP语言有一个特性很有意思，那就是它们是可以用数学方法来分析的。FP语言本身就是形式系统的实现，只要是能在纸上写出来的数学运算就可以用这种语言表述出来。于是只要能够用数学方法证明两段代码是一致的，编译器就可以把某段代码解析成在数学上等同的但效率又更高的另外一段代码<sup>7</sup>。 关系数据库已经用这种方法进行优化很多年了。没有理由在常规的软件行业就不能应用这种技术。<br>另外，还可以用这种方法来证明代码的正确性，甚至可以设计出能够自动分析代码并为单元测试自动生成边缘测试用例的工具出来！对于那些对缺陷零容忍的系统来说，这一功能简直就是无价之宝。例如心脏起搏器，例如飞行管控系统，这几乎就是必须满足的需求。哪怕你正在开发的程序不是为了完成什么重要核心任务，这些工具也可以帮助你写出更健壮的程序，直接甩竞争对手n条大街。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>我还记得在了解到FP以上的各种好处后想到：“这些优势都很吸引人，可是，如果必须非要用这种所有变量都是final的蹩脚语言，估计还是不怎么实用吧”。其实这样的想法是不对的。对于Java这样的指令式语言来说，如果所有的变量都是必须是final的，那么确实很束手束脚。然而对函数式语言来说，情况就不一样了。函数式语言提供了一种特别的抽象工具，这种工具将帮助使用者编写FP代码，让他们甚至都没想到要修改变量的值。高阶函数就是这种工具之一。<br>FP语言中的函数有别于Java或是C。可以说这种函数是一个<a href=\"http://zh.wikipedia.org/wiki/%E5%85%A8%E9%9B%86\" target=\"_blank\" rel=\"noopener\">全集</a>：Java函数可以做到的它都能做，同时它还有更多的能力。首先，像在C里写程序那样创建一个函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看起来和C程序没什么区别，但是很快你就可以看出区别来。接下来我们扩展Java的编译器以便支持这种代码，也就是说，当我们写下以上的程序编译器会把它转化成下面的Java程序（别忘了，所有的变量都是final的）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">add_function_t</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i + j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add_function_t add = <span class=\"keyword\">new</span> add_function_t();</span><br></pre></td></tr></table></figure>\n<p>在这里，符号add并不是一个函数，它是只有一个函数作为其成员的简单的类。这样做有很多好处，可以在程序中把add当成参数传给其他的函数，也可以把add赋给另外一个符号，还可以在运行时创建add_function_t的实例然后在不再需要这些实例的时候由系统回收机制处理掉。这样做使得函数成为和integer或是string这样的<a href=\"http://zh.wikipedia.org/zh/%E7%AC%AC%E4%B8%80%E9%A1%9E%E7%89%A9%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">第一类对象</a>。对其他函数进行操作（比如说把这些函数当成参数）的函数，就是所谓的高阶函数。别让这个看似高深的名字吓倒你（译者：好死不死起个这个名字，初一看还准备搬出已经尘封的高数教材……），它和Java中操作其他类（也就是把一个类实例传给另外的类）的类没有什么区别。可以称这样的类为“高阶类”，但是没人会在意，因为Java圈里就没有什么很强的学术社团。（译者：这是高级黑吗？）<br>那么什么时候该用高阶函数，又怎样用呢？我很高兴有人问这个问题。设想一下，你写了一大堆程序而不考虑什么类结构设计，然后发现有一部分代码重复了几次，于是你就会把这部分代码独立出来作为一个函数以便多次调用（所幸学校里至少会教这个）。如果你发现这个函数里有一部分逻辑需要在不同的情况下实现不同的行为，那么你可以把这部分逻辑独立出来作为一个高阶函数。搞晕了？下面来看看我工作中的一个真实的例子。</p>\n<p>假设有一段Java的客户端程序用来接收消息，用各种方式对消息做转换，然后发给一个服务器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        msg.setClientCode(<span class=\"string\">\"ABCD_123\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sendMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再进一步假设，整个系统改变了，现在需要发给两个服务器而不再是一个了。系统其他部分都不变，唯独客户端的代码需要改变：额外的那个服务器需要用另外一种格式发送消息。应该如何处理这种情况呢？我们可以先检查一下消息要发送到哪里，然后选择相应的格式把这个消息发出去：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(msg.getDestination().equals(<span class=\"string\">\"server1\"</span>) &#123;</span><br><span class=\"line\">            msg.setClientCode(<span class=\"string\">\"ABCD_123\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msg.setClientCode(<span class=\"string\">\"123_ABC\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sendMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可是这样的实现是不具备扩展性的。如果将来需要增加更多的服务器，上面函数的大小将呈线性增长，使得维护这个函数最终变成一场噩梦。面向对象的编程方法告诉我们，可以把MessageHandler变成一个基类，然后将针对不同格式的消息编写相应的子类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        msg.setClientCode(getClientCode());</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sendMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> String <span class=\"title\">getClientCode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandlerOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getClientCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ABCD_123\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandlerTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getClientCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"123_ABCD\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来就可以为每一个接收消息的服务器生成一个相应的类对象，添加服务器就变得更加容易维护了。可是，这一个简单的改动引出了很多的代码。仅仅是为了支持不同的客户端行为代码，就要定义两种新的类型！现在来试试用我们刚才改造的语言来做同样的事情，注意，这种语言支持高阶函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg, Function getClientCode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        Message msg1 = msg.setClientCode(getClientCode());</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sendMessage(msg1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getClientCodeOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"ABCD_123\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getClientCodeTwo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"123_ABCD\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MessageHandler handler = <span class=\"keyword\">new</span> MessageHandler();</span><br><span class=\"line\">handler.handleMessage(someMsg, getClientCodeOne);</span><br></pre></td></tr></table></figure>\n<p>在上面的程序里，我们没有创建任何新的类型或是多层类的结构。仅仅是把相应的函数作为参数进行传递，就做到了和用面向对象编程一样的事情，而且还有额外的好处：一是不再受限于多层类的结构。这样做可以做运行时传递新的函数，可以在任何时候改变这些函数，而且这些改变不仅更加精准而且触碰的代码更少。这种情况下编译器其实就是在替我们编写面向对象的“粘合”代码（译者：又称胶水代码，粘接代码）！除此之外我们还可以享用FP编程的其他所有优势。函数式编程能提供的抽象服务还远不止于此。高阶函数只不过是个开始。</p>\n<h3 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h3><p>我遇见的大多数码农都读过“<a href=\"http://baike.baidu.com/view/66964.htm#2\" target=\"_blank\" rel=\"noopener\">四人帮</a>”的那本《设计模式》。任何稍有自尊心的码农都会说这本书和语言无关，因此无论你用什么编程语言，当中提到的那些模式大体上适用于所有软件工程。听起来很厉害，然而事实却不是这样。<br>函数式语言的表达能力很强。用这种语言编程的时候基本不需要设计模式，因为这种语言层次已经足够高，使得使用者可以以概念编程，从而完全不需要设计模式了。以<a href=\"http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">适配器模式</a>为例（有人知道这个模式和<a href=\"http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">外观模式</a>有什么区别吗？怎么觉得有人为了出版合同的要求而硬生生凑页数？）（译者：您不愧是高级黑啊）。对于一个支持currying技术的语言来说，这个模式就是多余的。<br>在Java中最有名的适配器模式就是在其“默认”抽象单元中的应用：类。在函数式语言中这种模式其实就是函数。在这个模式中，一个接口被转换成另外一个接口，让不同的用户代码调用。接下来就有一个适配器模式的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pow(i, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中square函数计算一个整数的平方，这个函数的接口被转换成计算一个整数的任意整数次幂。在学术圈里这种简单的技术就被叫做currying（因为逻辑学家<a href=\"http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">哈斯凯尔·加里</a>用其数学技巧将这种技术描述出来，于是就以他的名字来命名了）。在一个FP语言中函数（而不是类）被作为参数进行传递，currying常常用于转化一个函数的接口以便于其他代码调用。函数的接口就是它的参数，于是currying通常用于减少函数参数的数量（见前例）。<br>函数式语言生来就支持这一技术，于是没有必要为某个函数手工创建另外一个函数去包装并转换它的接口，这些函数式语言已经为你做好了。我们继续拓展Java来支持这一功能。    </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">square = <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"number\">2</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>上面的语句实现了一个平方计算函数，它只需要一个参数。它会继而调用pow函数并且把第二个参数置为2。编译过后将生成以下Java代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">square_function_t</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pow(i, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">square_function_t square = <span class=\"keyword\">new</span> square_function_t();</span><br></pre></td></tr></table></figure>\n<p>从上面的例子可以看到，很简单的，函数pow的封装函数就创建出来了。在FP语言中currying就这么简单：一种可以快速且简单的实现函数封装的捷径。我们可以更专注于自己的设计，编译器则会为你编写正确的代码！什么时候使用currying呢？很简单，当你想要用适配器模式（或是封装函数）的时候，就是用currying的时候。</p>\n<h3 id=\"惰性求值\"><a href=\"#惰性求值\" class=\"headerlink\" title=\"惰性求值\"></a><a href=\"http://zh.wikipedia.org/zh/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC\" target=\"_blank\" rel=\"noopener\">惰性求值</a></h3><p>惰性求值（或是延迟求值）是一种有趣的技术，而当我们投入函数式编程的怀抱后这种技术就有了得以实现的可能。前面介绍并发执行的时候已经提到过如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = somewhatLongOperation1();</span><br><span class=\"line\">String s2 = somewhatLongOperation2();</span><br><span class=\"line\">String s3 = concatenate(s1, s2);</span><br></pre></td></tr></table></figure>\n<p>在指令式语言中以上代码执行的顺序是显而易见的。由于每个函数都有可能改动或者依赖于其外部的状态，因此必须顺序执行。先是计算somewhatLongOperation1，然后到somewhatLongOperation2，最后执行concatenate。函数式语言就不一样了。<br>在前面讨论过，somewhatLongOperation1和somewhatLongOperation2是可以并发执行的，因为函数式语言保证了一点：没有函数会影响或者依赖于全局状态。可是万一我们不想要这两个函数并发执行呢？这种情况下是不是也还是要顺序执行这些函数？答案是否定的。只有到了执行需要s1、s2作为参数的函数的时候，才真正需要执行这两个函数。于是在concatenate这个函数没有执行之前，都没有需要去执行这两个函数：这些函数的执行可以一直推迟到concatenate()中需要用到s1和s2的时候。假如把concatenate换成另外一个函数，这个函数中有条件判断语句而且实际上只会需要两个参数中的其中一个，那么就完全没有必要执行计算另外一个参数的函数了！Haskell语言就是一个支持惰性求值的例子。Haskell不能保证任何语句会顺序执行（甚至完全不会执行到），因为Haskell的代码只有在需要的时候才会被执行到。<br>除了这些优点，惰性求值也有缺点。这里介绍了它的优点，我们将在下一章节介绍这些缺点以及如何克服它们。     </p>\n<h4 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h4><p>惰性求值使得代码具备了巨大的优化潜能。支持惰性求值的编译器会像数学家看待代数表达式那样看待函数式程序：抵消相同项从而避免执行无谓的代码，安排代码执行顺序从而实现更高的执行效率甚至是减少错误。在此基础上优化是不会破坏代码正常运行的。严格使用形式系统的基本元素进行编程带来的最大的好处，是可以用数学方法分析处理代码，因为这样的程序是完全符合数学法则的。</p>\n<h4 id=\"抽象化控制结构\"><a href=\"#抽象化控制结构\" class=\"headerlink\" title=\"抽象化控制结构\"></a>抽象化控制结构</h4><p>惰性求值技术提供了更高阶的抽象能力，这提供了实现程序设计独特的方法。比如说下面的控制结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unless(stock.isEuropean()) &#123;</span><br><span class=\"line\">    sendToSEC(stock);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序中只有在stock为European的时候才执行sendToSEC。如何实现例子中的unless？如果没有惰性求值就需要求助于某种形式的宏（译者：用if不行么？），不过在像Haskell这样的语言中就不需要那么麻烦了。直接实现一个unless函数就可以！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unless</span><span class=\"params\">(<span class=\"keyword\">boolean</span> condition, List code)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!condition)</span><br><span class=\"line\">        code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意，如果condition值为真，那就不会计算code。在其他严格语言（见<a href=\"http://zh.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5#.E4.B8.A5.E6.A0.BC.E6.B1.82.E5.80.BC_.28Strict_evaluation.29\" target=\"_blank\" rel=\"noopener\">严格求值</a>）中这种行为是做不到的，因为在进入unless这个函数之前，作为参数的code已经被计算过了。</p>\n<h4 id=\"无穷数据结构\"><a href=\"#无穷数据结构\" class=\"headerlink\" title=\"无穷数据结构\"></a>无穷数据结构</h4><p>惰性求值技术允许定义无穷数据结构，这要在严格语言中实现将非常复杂。例如一个储存Fibonacci数列数字的列表。很明显这样一个列表是无法在有限的时间内计算出这个无穷的数列并存储在内存中的。在像Java这样的严格语言中，可以定义一个Fibonacci函数，返回这个序列中的某个数。而在Haskell或是类似的语言中，可以把这个函数进一步抽象化并定义一个Fibonacci数列的无穷列表结构。由于语言本身支持惰性求值，这个列表中只有真正会被用到的数才会被计算出来。这让我们可以把很多问题抽象化，然后在更高的层面上解决它们（比如可以在一个列表处理函数中处理无穷多数据的列表）。</p>\n<h4 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h4><p>俗话说天下没有免费的午餐™。惰性求值当然也有其缺点。其中最大的一个就是，嗯，惰性。现实世界中很多问题还是需要严格求值的。比如说下面的例子：   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"Please enter your name: \"</span>);</span><br><span class=\"line\">System.in.readLine();</span><br></pre></td></tr></table></figure>\n<p>在惰性语言中没人能保证第一行会中第二行之前执行！这也就意味着我们不能处理IO，不能调用系统函数做任何有用的事情（这些函数需要按照顺序执行，因为它们依赖于外部状态），也就是说不能和外界交互了！如果在代码中引入支持顺序执行的代码原语，那么我们就失去了用数学方式分析处理代码的优势（而这也意味着失去了函数式编程的所有优势）。幸运的是我们还不算一无所有。数学家们研究了不同的方法用以保证代码按一定的顺序执行（in a functional setting?）。这一来我们就可以同时利用到函数式和指令式编程的优点了！这些方法有continuations，monads以及uniqueness typing。这篇文章仅仅介绍了continuations，以后再讨论monads和uniqueness typing。有意思的是呢，coutinuations处理强制代码以特定顺序执行之外还有其他很多出处，这些我们在后面也会提及。</p>\n<h3 id=\"Continuation\"><a href=\"#Continuation\" class=\"headerlink\" title=\"Continuation\"></a>Continuation</h3><p>continuation对于编程，就像是达芬奇密码对于人类历史一样：它揭开了人类有史以来最大的谜团。好吧，也许没有那么夸张，不过它们的影响至少和当年发现负数有平方根不相上下。</p>\n<p>我们对函数的理解只有一半是正确的，因为这样的理解基于一个错误的假设：函数一定要把其返回值返回给调用者。按照这样的理解，continuation就是更加广义的函数。这里的函数不一定要把返回值传回给调用者，相反，它可以把返回值传给程序中的任意代码。continuation就是一种特别的参数，把这种参数传到函数中，函数就能够根据continuation将返回值传递到程序中的某段代码中。说得很高深，实际上没那么复杂。直接来看看下面的例子好了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = add(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> j = square(i);</span><br></pre></td></tr></table></figure>\n<p>add这个函数将返回15然后这个值会赋给i，这也是add被调用的地方。接下来i的值又会被用于调用square。请注意支持惰性求值的编译器是不能打乱这段代码执行顺序的，因为第二个函数的执行依赖于第一个函数成功执行并返回结果。这段代码可以用Continuation Pass Style（CPS）技术重写，这样一来add的返回值就不是传给其调用者，而是直接传到square里去了。     </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> j = add(<span class=\"number\">5</span>, <span class=\"number\">10</span>, square);</span><br></pre></td></tr></table></figure>\n<p>在上例中，add多了一个参数：一个函数，add必须在完成自己的计算后，调用这个函数并把结果传给它。这时square就是add的一个continuation。上面两段程序中j的值都是225。    </p>\n<p>这样，我们学习到了强制惰性语言顺序执行两个表达式的第一个技巧。再来看看下面IO程序（是不是有点眼熟？）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"Please enter your name: \"</span>);</span><br><span class=\"line\">System.in.readLine();</span><br></pre></td></tr></table></figure>\n<p>这两行代码彼此之间没有依赖关系，因此编译器可以随意的重新安排它们的执行顺序。可是只要用CPS重写它，编译器就必须顺序执行了，因为重写后的代码存在依赖关系了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">\"Please enter your name: \"</span>, System.in.readLine);</span><br></pre></td></tr></table></figure>\n<p>这段新的代码中println需要结合其计算结果调用readLine，然后再返回readLine的返回值。这使得两个函数得以保证按顺序执行而且readLine总被执行（这是由于整个运算需要它的返回值作为最终结果）。Java的println是没有返回值的，但是如果它可以返回一个能被readnLine接受的抽象值，问题就解决了！（译者：别忘了，这里作者一开始就在Java的基础上修改搭建自己的语言）当然，如果一直把函数按照这种方法串下去，代码很快就变得不可读了，可是没有人要求你一定要这样做。可以通过在语言中添加<a href=\"http://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96\" target=\"_blank\" rel=\"noopener\">语法糖</a>的方式来解决这个问题，这样程序员只要按照顺序写代码，编译器负责自动把它们串起来就好了。于是就可以任意安排代码的执行顺序而不用担心会失去FP带来的好处了（包括可以用数学方法来分析我们的程序）！如果到这里还有人感到困惑，可以这样理解，函数只是有唯一成员的类的实例而已。试着重写上面两行程序，让println和readLine编程这种类的实例，所有问题就都搞清楚了。<br>到这里本章基本可以结束了，而我们仅仅了解到continuation的一点皮毛，对它的用途也知之甚少。我们可以用CPS完成整个程序，程序里所有的函数都有一个额外的continuation作为参数接受其他函数的返回值。还可以把任何程序转换为CPS的，需要做的只是把当中的函数看作是特殊的continuation（总是将返回值传给调用者的continuation）就可以了，简单到完全可以由工具自动完成（史上很多编译器就是这样做的）。    </p>\n<p>一旦将程序转为CPS的风格，有些事情就变得显而易见了：每一条指令都会有一些continuation，都会将它的计算结果传给某一个函数并调用它，在一个普通的程序中这个函数就是该指令被调用并且返回的地方。随便找个之前提到过的代码，比如说add(5,10)好了。如果add属于一个用CPS风格写出的程序，add的continuation很明显就是当它执行结束后要调用的那个函数。可是在一个非CPS的程序中，add的continuation又是什么呢？当然我们还是可以把这段程序转成CPS的，可是有必要这样做吗？<br>事实上没有必要。注意观察整个CPS转换过程，如果有人尝试要为CPS程序写编译器并且认真思考过就会发现：CPS的程序是不需要栈的！在这里完全没有函数需要做传统意义上的“返回”操作，函数执行完后仅需要接着调用另外一个函数就可以了。于是就不需要在每次调用函数的时候把参数压栈再将它们从中取出，只要把这些参数存放在一片内存中然后使用跳转指令就解决问题了。也完全不需要保留原来的参数：因为这种程序里的函数都不返回，所以它们不会被用第二次！<br>简单点说呢，用CPS风格写出来的程序不需要栈，但是每次调用函数的时候都会要多加一个参数。非CPS风格的程序不需要额外的参数但又需要栈才能运行。栈里面存的是什么？仅仅是参数还有一个供函数运行结束后返回的程序指针而已。这个时候你是不是已经恍然大悟了？对啊，栈里面的数据实际上就是continuation的信息！栈上的程序返回指针实质上就是CPS程序中需要调用的下一个函数！想要知道add(5, 10)的continuation是什么？只要看它运行时栈的内容就可以了。<br>接下来就简单多了。continuation和栈上指示函数返回地址的指针其实是同一样东西，只是continuation是显式的传递该地址并且因此代码就不局限于只能返回到函数被调用的地方了。前面说过，continuation就是函数，而在我们特制的语言中函数就是类的实例，那么可以得知栈上指向函数返回地址的指针和continuation的参数是一样的，因为我们所谓的函数（就像类的一个实例）其实就是指针。这也意味着在程序运行的任何时候，你都可以得到当前的continuation（就是栈上的信息）。     </p>\n<p>好了，我们已经搞清楚当前的continuation是什么了。接下来要弄明白它的存在有什么意义。只要得到了当前的continuation并将它保存起来，就相当于保存了程序的当前状态：在时间轴上把它冻结起来了。这有点像操作系统进入休眠状态。continuation对象保存了足够的信息随时可以从指定的某个状态继续运行程序。在切换线程的时候操作系统也是这样做的。唯一的区别在于它保留了所有的控制权利。当请求某个continuation对象时（在Scheme语言中是通过调用call-with-current-continuation函数实现的）得到的是一个存有当前continuation的对象，也就是栈对象（在CPS中也就是下一个要执行的函数）。可以把这个对象保存做一个变量中（或者是存在磁盘上）。当以该continuation对象“重启”该程序时，程序的状态就会立即“转换”为该对象中保存的状态。这一点和切换回一个被暂停的线程或是从系统休眠中唤醒很相像，唯一不同的是continuatoin对象可以反复的这样使用。当系统唤醒后，休眠前保存的信息就会销毁，否则你也可以反复的从该点唤醒系统，就像乘时光机回到过去一样。有了continuation你就可以做到这一点！       </p>\n<p>那么continuation在什么情况下有用呢？有一些应用程序天生就没有状态，如果要在这样的系统中模拟出状态以简化工作的时候，就可以用到continuation。最合适的应用场合之一就是网页应用程序。微软的ASP.NET为了让程序员更轻松的编写应用程序，花了大量的精力去模拟各种状态。假如C#支持continuation的话，那么ASP.NET的复杂度将减半：因为只要把某一时刻的continuation保存起来，下次用户再次发起同样请求的时候，重新载入这个continuation即可。对于网络应用的程序员来说就再也没有中断了：轻轻松松程序就从下一行开始继续运行了！对于一些实际问题来说，continuation是一种非常有用的抽象工具。如今大量的传统胖客户端（见<a href=\"http://zh.wikipedia.org/wiki/%E7%98%A6%E5%AE%A2%E6%88%B7%E7%AB%AF\" target=\"_blank\" rel=\"noopener\">瘦客户端</a>）正纷纷走进网络，continuation在未来将扮演越来越重要的角色。</p>\n<h3 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h3><p>模式匹配并不是什么新功能。而事实上它和函数式编程也没有什么太大的关系。它之所以常常被认为是FP的一个特性，是因为在函数式语言已经支持模式匹配很长一段时间后的今天，指令式语言是还没有这个功能。</p>\n<p>还是直接用例子来看看什么是模式匹配吧，这是一个用Java写的Fibonacci函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(n - <span class=\"number\">2</span>) + fib(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再看看用我们基于Java修改过的新语言写出来的Fibonacci函数，这种新语言就支持模式匹配：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(n - <span class=\"number\">2</span>) + fib(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>区别在哪里呢？在于后者的编译器替我们实现了程序的分支。<br>这有什么了不起的？确实也没什么。只是有人注意到很多函数中有非常复杂的switch结构（对于函数式程序而言更是如此），于是想到如果能把这层结构也抽象化就更好了。然后就把这个复杂的函数拆分成若干新的函数，并在这些函数的某些参数中应用模式（这和<a href=\"http://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\" target=\"_blank\" rel=\"noopener\">重载</a>有点类似）。这样依赖当这个函数被调用的时候，编译器会在运行时将调用者传入的参数与各个新函数的参数定义进行比较，找出合适的那个函数来执行。合适的函数往往是参数定义上最具体最接近传入参数的那个函数。在这个例子中，当n为1时，可以用函数int fib(int n)，不过真正调用的是int fib(1)因为这个函数更具体更接近调用者的要求。<br>模式匹配一般来说要比这里举的例子更加复杂。比如说，高级模式匹配系统可以支持下面的操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n &lt; <span class=\"number\">10</span>)</span> </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>那么什么情况下模式匹配会有用呢？在需要处理一大堆程序分支的时候！每当需要实现复杂的嵌套if语句的时候，模式匹配可以帮助你用更少的代码更好的完成任务。我所知道的一个这样的函数是标准的WndProc函数，该函数是所有Win32应用程序必须具备的（尽管它经常会被抽象化）。模式匹配系统一般都可以像匹配简单数值一样匹配数据集合。举个例子，对于一个接受数组作为参数的函数，可以通过模式匹配数组中第一个数字为1并且第三个数字大于3的输入。<br>模式匹配的另外一个好处是每当需要添加或者修改程序分支时，再也不用面对那个庞大臃肿的函数了。只要添加（或者修改）相关的函数定义即可。有了模式匹配就不再需要四人帮的很多设计模式了。程序分支越多越复杂，模式匹配就越有用。而在习惯使用这一技术之后，你可能会怀疑没有它你一天都过不下去了。</p>\n<h3 id=\"Closure\"><a href=\"#Closure\" class=\"headerlink\" title=\"Closure\"></a>Closure</h3><p>目前为止关于函数式编程各种功能的讨论都只局限在“纯”函数式语言范围内：这些语言都是lambda演算的实现并且都没有那些和阿隆佐形式系统相冲突的特性。然而，很多函数式语言的特性哪怕是在lambda演算框架之外都是很有用的。确实，如果一个公理系统的实现可以用数学思维来看待程序，那么这个实现还是很有用的，但这样的实现却不一定可以付诸实践。很多现实中的语言都选择吸收函数式编程的一些元素，却又不完全受限于函数式教条的束缚。很多这样的语言（比如Common Lisp）都不要求所有的变量必须为final，可以修改他们的值。也不要求函数只能依赖于它们的参数，而是可以读写函数外部的状态。同时这些语言又包含了FP的特性，如高阶函数。与在lambda演算限制下将函数作为参数传递不同，在指令式语言中要做到同样的事情需要支持一个有趣的特性，人们常把它称为lexical closure。还是来看看例子。要注意的是，这个例子中变量不是final，而且函数也可以读写其外部的变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Function <span class=\"title\">makePowerFn</span><span class=\"params\">(<span class=\"keyword\">int</span> power)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">powerFn</span><span class=\"params\">(<span class=\"keyword\">int</span> base)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pow(base, power);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> powerFn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Function square = makePowerFn(<span class=\"number\">2</span>);</span><br><span class=\"line\">square(<span class=\"number\">3</span>); <span class=\"comment\">// returns 9</span></span><br></pre></td></tr></table></figure>\n<p>makePowerFn函数返回另一个函数，这个新的函数需要一个整数参数然后返回它的平方值。执行square(3)的时候具体发生了什么事呢？变量power并不在powerFn的域内，因为makePowerFn早就运行结束返回了，所以它的栈也已经不存在了。那么square又是怎么正常工作的呢？这个时候需要语言通过某种方式支持继续存储power的值，以便square后面继续使用。那么如果再定义一个函数，cube，用来计算立方，又应该怎么做呢？那么运行中的程序就必须存储两份power的值，提供给makePowerFn生成的两个函数分别使用。这种保存变量值的方法就叫做closure。closure不仅仅保存宿主函数的参数值，还可以用在下例的用法中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Function <span class=\"title\">makeIncrementer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Function inc1 = makeIncrementer();</span><br><span class=\"line\">Function inc2 = makeIncrementer();</span><br><span class=\"line\"></span><br><span class=\"line\">inc1(); <span class=\"comment\">// returns 1;</span></span><br><span class=\"line\">inc1(); <span class=\"comment\">// returns 2;</span></span><br><span class=\"line\">inc1(); <span class=\"comment\">// returns 3;</span></span><br><span class=\"line\">inc2(); <span class=\"comment\">// returns 1;</span></span><br><span class=\"line\">inc2(); <span class=\"comment\">// returns 2;</span></span><br><span class=\"line\">inc2(); <span class=\"comment\">// returns 3;</span></span><br></pre></td></tr></table></figure>\n<p>运行中的程序负责存储n的值，以便incrementer稍后可以访问它。与此同时，程序还会保存多份n的拷贝，虽然这些值应该在makeIncrementer返回后就消失，但在这个情况下却继续保留下来给每一个incrementer对象使用。这样的代码编译之后会是什么样子？closure幕后的真正工作机理又是什么？这次运气不错，我们有一个后台通行证，可以一窥究竟。<br>一点小常识往往可以帮大忙。乍一看这些本地变量已经不再受限于基本的域限制并拥有无限的生命周期了。于是可以得出一个很明显的结论：它们已经不是存在栈上，而是堆上了<sup>8</sup>。这么说来closure的实现和前面讨论过的函数差不多，只不过closure多了一个额外的引用指向其外部的变量而已：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">some_function_t</span> </span>&#123;</span><br><span class=\"line\">    SymbolTable parentScope;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当closure需要访问不在它本地域的变量时，就可以通过这个引用到更外一层的父域中寻找该变量。谜底揭开了！closure将函数编程与面向对象的方法结合了起来。下一次为了保存并传递某些状态而创建类的时候，想想closure。它能在运行时从相应的域中获得变量，从而可以把该变量当初“成员变量”来访问，也因为这样，就不再需要去创建一个成员变量了。</p>\n<h3 id=\"路在何方？\"><a href=\"#路在何方？\" class=\"headerlink\" title=\"路在何方？\"></a>路在何方？</h3><p>这篇文章仅仅涉及到函数式编程的一些皮毛。考虑到有时候星星之火可以燎原，所以如果它能给你一些帮助那就再好不过了。接下来我计划就<a href=\"http://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA\" target=\"_blank\" rel=\"noopener\">范畴论</a>、monads、函数式编程数据结构、函数式语言中的<a href=\"http://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"noopener\">类型系统</a>、并行函数式编程、数据库的函数式编程以及更多的话题写些类似的文章。如果我可以写出（在我学习的同时）以上清单的一半，我的人生就完整了。于此同时，Google将是我们的良师益友。</p>\n<h3 id=\"欢迎联系\"><a href=\"#欢迎联系\" class=\"headerlink\" title=\"欢迎联系\"></a>欢迎联系</h3><p>如果您有任何问题，评价或者建议，请发邮件到<a href=\"mailto:coffeemug@gmail.com\" target=\"_blank\" rel=\"noopener\">coffeemug@gmail.com</a>（译者：如果翻译方面的问题／建议请发到<a href=\"mailto:yang.huang@ymail.com\" target=\"_blank\" rel=\"noopener\">yang.huang@ymail.com</a>:)）。期待您的回复。</p>\n<p>注：<br><sup>1</sup>当我在2005年求职时的的确确经常问别人这个问题。看着那些茫然的面孔实在是很好玩的事情。你们这些年薪30万美金的家伙，至少应该对自己可以利用的工具有个起码的理解嘛。<br><sup>2</sup>这是个有争议的问题。物理学家和数学家不得不承认目前还无法确定宇宙万物是不是都遵从可以用数学方法描述的各种法则。<br><sup>3</sup>我一直一来都很讨厌在历史课上罗列一堆枯燥无味的时间、人名、事件。对我来说历史就是关于那些改变世界的人们活生生的故事，是他们行为背后的个人动机，是那些他们用以影响芸芸众生的方法和工具。从这个角度来说，接下来的这堂历史课是不完整的，很遗憾。只有那些非常相关的人和事会被提及。<br><sup>4</sup>在我学习函数式编程的时候，“lambda”这个术语搞得我很烦，因为我不知道它到底是什么意思。在这里lambda就是一个函数，在数学符号中用这个希腊字母只是因为它更容易写。所以以后在谈及函数式编程的时候只要你听到lambda，把它在脑中翻译为“函数”就可以了。<br><sup>5</sup>有意思的是不论如何Java中的字符串总是不可修改的。讨论这种背叛Java的设计背后的原因会很有意思，可惜这样会让我们跑题的。<br><sup>6</sup>大部分函数式语言的编译器都会尽量将迭代函数转换为对等的循环语句。这种做法叫做<a href=\"http://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\" target=\"_blank\" rel=\"noopener\">尾调用优化</a>。<br><sup>7</sup>反之则不一定成立。尽管有时候可以证明两段代码是等价的，但不是在所有的情况下都可以得出这样的结论。<br><sup>8</sup>实际上这样做并不比栈上存储要慢，因为在引入<a href=\"http://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"noopener\">垃圾回收机制</a>)后，内存分配操作的时间代价仅为O(1)。     </p>\n"},{"title":"日常英语900","date":"2018-03-04T22:47:20.000Z","_content":"\n1. I'm home. 我回来了。 \n2. I quit! 我不干了! \n3. Let go! 放手! \n4. Me too. 我也是。 \n5. My god! 天哪! \n6. No way! 不行! \n7. Come on. 来吧(赶快) \n8. Hold on. 等一等。 \n9. I agree。 我同意。 \n10. Not bad. 还不错。 \n11. Not yet. 还没。 \n12. See you. 再见。 \n13. Shut up! 闭嘴! \n14. So long. 再见。 \n15. Why not? 好呀! (为什么不呢?) \n16. Allow me. 让我来。 \n17. Be quiet! 安静点! \n18. Cheer up! 振作起来! \n19. Good job! 做得好! \n20. Have fun! 玩得开心! \n21. How much? 多少钱? \n22. I'm full. 我饱了。 \n23. I see. 我明白了。 \n24. I'm lost. 我迷路了。 \n25. My treat. 我请客。 \n26. So do I. 我也一样。 \n27. This way。 这边请。 \n28. After you. 您先。 \n29. Bless you! 祝福你! \n30. Follow me. 跟我来。 \n31. Forget it! 休想! (算了!) \n32. Good luck! 祝好运! \n33. I decline! 我拒绝! \n34. I promise. 我保证。 \n35. Of course! 当然了! \n36. Slow down! 慢点! \n37. Take care! 保重! \n38. They hurt. (伤口)疼。 \n39. Try again. 再试试。 \n40. Watch out! 当心。 \n41. What's up? 有什么事吗? \n42. Be careful! 注意! \n43. Bottoms up! 干杯(见底)! \n44. Don't move! 不许动! \n45. Guess what? 猜猜看? \n46. I doubt it 我怀疑。 \n47. I think so. 我也这么想。 \n48. I'm single. 我是单身贵族。 \n49. Keep it up! 坚持下去! \n50. Let me see. 让我想想。 \n51. Never mind. 不要紧。 \n52. No problem! 没问题! \n53. That's all! 就这样! \n54. Time is up. 时间快到了。 \n55. What's new? 有什么新鲜事吗? \n56. Count me on. 算上我。 \n57. Don't worry. 别担心。 \n58. Feel better? 好点了吗? \n59. I love you! 我爱你! \n60. I'm his fan. 我是他的影迷。 \n61. Is it yours? 这是你的吗? \n62. That's neat. 这很好。 \n63. Are you sure? 你肯定吗? \n64. Do I have to? 非做不可吗? \n65. He is my age. 他和我同岁。 \n66. Here you are. 给你。 \n67. No one knows. 没有人知道。 \n68. Take it easy. 别紧张。 \n69. What a pity! 太遗憾了! \n70. Any thing else? 还要别的吗? \n71. To be careful! 一定要小心! \n72. He came by train. 他乘火车来。\n73. Help yourself. 别客气。 \n74. I'm on a diet. 我在节食。 \n75. Keep in touch. 保持联络。 \n76. Time is money. 时间就是金钱。 \n77. Who's calling? 是哪一位? \n78. You did right. 你做得对。 \n79. You set me up! 你出卖我! \n80. Can I help you? 我能帮你吗? \n81. Enjoy yourself! 祝你玩得开心! \n82. Excuse me，Sir. 先生，对不起。 \n83. Give me a hand! 帮帮我! \n84. How's it going? 怎么样? \n85. I have no idea. 我没有头绪。 \n86. I just made it! 我做到了! \n87. I'll see to it. 我会留意的。 \n88. I'm in a hurry! 我在赶时间! \n89. It's her field. 这是她的本行。 \n90. It's up to you. 由你决定。 \n91. Just wonderful! 简直太棒了! \n92. What about you? 你呢? \n93. You owe me one. 你欠我一个人情。 \n94. You're welcome. 不客气。 \n95. Any day will do. 哪一天都行。 \n96. Are you kidding? 你在开玩笑吧! \n97. Congratulations! 祝贺你! \n98. I can't help it. 我情不自禁。 \n99. I don't mean it. 我不是故意的。 \n100. I'll fix you Up. 我会帮你打点的。 \n101. It sounds great! 听起来很不错。 \n102. It's a fine day. 今天是个好天。 \n103. So far，So good. 目前还不错。 \n104. What time is it? 几点了? \n105. You can make it! 你能做到! \n106. Control yourself! 克制一下! \n107. Do me a favor? 帮个忙，好吗? \n108. He is ill in bed. 他卧病在床。 \n109. He lacks courage. 他缺乏勇气。 \n110. How's everything? 一切还好吧? \n111. I have no choice. 我别无选择。 \n112. I like ice-cream. 我喜欢吃冰淇淋。 \n113. I love this game. 我钟爱这项运动。 \n114. I'll try my best. 我尽力而为。 \n115. I'm On your side. 我全力支持你。 \n116. Long time no see! 好久不见! \n117. No pain，no gain. 不劳无获。 \n118. Well，it depends. 噢，这得看情况。 \n119. We're all for it. 我们全都同意。 \n120. What a good deal! 真便宜! \n121. What should I do? 我该怎么办？ \n122. You asked for it! 你自讨苦吃! \n123. You have my word. 我保证。 \n124. Believe it or not! 信不信由你! \n125. Don't count on me. 别指望我。 \n126. Don't fall for it! 别上当! \n127. Don't let me down. 别让我失望。 \n128. Easy come easy go. 来得容易，去得快。 \n129. I beg your pardon. 请你原谅。 \n130. I beg your pardon? 请您再说一遍(我没有听清)。 \n131. I'll be back soon. 我马上回来。 \n132. I'll check it out. 我去查查看。 \n133. It's a long story. 说来话长。 \n134. It's Sunday today. 今天是星期天。 \n135. Just wait and see! 等着瞧! \n136. Make up your mind. 做个决定吧。 \n137. That's all I need. 我就要这些。 \n138. The view is great. 景色多么漂亮! \n139. The wall has ears. 隔墙有耳。 \n140. There comes a bus. 汽车来了。 \n141. What day is today? 今天星期几? \n142. What do you think? 你怎么认为？ \n143. Who told you that? 谁告诉你的? \n144. Who's kicking off? 现在是谁在开球? \n145. Yes，I suppose So. 是的，我也这么认为。 \n146. You can't miss it. 你一定能找到的。 \n147. Any messages for me? 有我的留言吗? \n148. Don't be so modest. 别谦虚了。 \n149. Don't give me that! 少来这套! \n150. He is a smart boy. 他是个小机灵鬼。 \n151. He is just a child. 他只是个孩子。 \n152. I can't follow you. 我不懂你说的。 \n153. I felt sort of ill. 我感觉有点不适。 \n154. I have a good idea! 我有一个好主意。 \n155. It is growing cool. 天气渐渐凉爽起来。 \n156. It seems all right. 看来这没问题。 \n157. It's going too far. 太离谱了。 \n158. May I use your pen? 我可以用你的笔吗? \n159. She had a bad cold. 她患了重感冒。 \n160. That's a good idea. 这个主意真不错。 \n161. The answer is zero. 白忙了。 \n162. What does she like? 她喜欢什么? \n163. As soon as possible! 越快越好! \n164. He can hardly speak. 他几乎说不出话来。 \n165. He always talks big. 他总是吹牛。 \n166. He won an election. 他在选举中获胜。 \n167. I am a football fan. 我是个足球迷。 \n168. If only I could fly. 要是我能飞就好了。 \n169. I'll be right there. 我马上就到。 \n170. I'll see you at six. 我六点钟见你。 \n171. IS it true or false? 这是对的还是错的? \n172. Just read it for me. 就读给我听好了。 \n173. Knowledge is power. 知识就是力量。 \n174. Move out of my way! 让开! \n175. Time is running out. 没时间了。 \n176. We are good friends. 我们是好朋友。 \n177. What's your trouble? 你哪儿不舒服? \n178. You did fairly well! 你干得相当不错1 \n179. Clothes make the man. 人要衣装。 \n180. Did you miss the bus? 你错过公共汽车了? \n181. Don't lose your head. 不要惊慌失措。 \n182. He can't take a joke. 他开不得玩笑。 \n183. He owes my uncle $100. 他欠我叔叔100 美元。 \n184. How are things going? 事情进展得怎样? \n185. How are you recently? 最近怎么样? \n186. I know all about it. 我知道有关它的一切。 \n187. It really takes time. 这样太耽误时间了。 \n188. It's against the law. 这是违法的。 \n189. Love me，love my dog. (谚语)爱屋及乌。 \n190. My mouth is watering. 我要流口水了。 \n191. Speak louder，please. 说话请大声点儿。 \n192. This boy has no job. 这个男孩没有工作。 \n193. This house is my own. 这所房子是我自己的。 \n194. What happened to you? 你怎么了? \n195. You are just in time. 你来得正是时候。 \n196. You need to workout. 你需要去运动锻炼一下。 \n197. Your hand feels cold. 你的手摸起来很冷。。 \n198. Don't be so childish. 别这么孩子气。 \n199. Don't trust to chance! 不要碰运气。 \n200. Fasten your seat belt. 系好你的安全带 \n201. He has a large income. 他有很高的收入。 \n202. He looks very healthy. 他看来很健康。 \n203. He paused for a reply. 他停下来等着·回答。 \n204. He repaired his house. 他修理了他的房子。 \n205. He suggested a picnic. 他建议搞一次野餐。 \n206. Here's a gift for you. 这里有个礼物送给你。 \n207. How much does it cost? 多少钱? \n208. I caught the last bus. 我赶上了最后一班车。 \n209. I could hardly speak. 我简直说不出话来。 \n210. I'll have to try that. 我得试试这么做。 \n211. I'm very proud of you. 我为你感到非常骄傲。 \n212. It doesn't make sense. 这没有意义(不合常理)。 \n213. Make yourself at home. 请不要拘礼。 \n214. My car needs washing. 我的车需要洗一洗。 \n215. None of your business! 与你无关! \n216. Not a sound was heard. 一点声音也没有。 \n217. That's always the case. 习以为常了。 \n218. The road divides here. 这条路在这里分岔。 \n219. Those are watermelons. 那些是西瓜。 \n220. What a nice day it is! 今天天气真好! \n221. What's wrong with you? 你哪里不对劲? \n222. You are a chicken. 你是个胆小鬼。 \n223. A lovely day，isn't it? 好天气，是吗? \n224. He is collecting money. 他在筹集资金。 \n225. He was born in New York. 他出生在纽约。 \n226. He was not a bit tired. 他一点也不累。 \n227. I will be more careful. 我会小心一些的， \n228. I will never forget it. 我会记着的。 \n229. It is Just what I need. 这正是我所需要的。 \n230. It rather surprised me. 那事使我颇感惊讶。 \n231. Just around the comer. 就在附近。 \n232. Just for entertainment. 只是为了消遣一下。 \n233. Let bygones be bygones. 过去的，就让它过去吧。 \n234. Mother doesn‘t make up. 妈妈不化妆。 \n235. Oh，you are kidding me. 哦，你别拿我开玩笑了。 \n236. She has been to school. 她上学去了。 \n237. Skating is interesting. 滑冰很有趣。 \n238. Supper is ready at six. 晚餐六点钟就好了。 \n239. That's a terrific idea! 真是好主意! \n240. What horrible weather! 这鬼天气! \n241. Which would you prefer? 你要选哪个? \n242. Does she like ice-cream? 她喜欢吃冰淇淋吗? \n243. First come first served. 先到先得。 \n244. Great minds think alike. 英雄所见略同。 \n245. He has a sense of humor. 他有幽默感。 \n246. He is acting an old man. 他正扮演一个老人。 \n247. He is looking for a job. 他正在找工作。 \n248. He doesn't care about me. 他并不在乎我。 \n249. I develop films myself. 我自己冲洗照片。 \n250. I felt no regret for it. 对这件事我不觉得后悔。 \n251. I get up at six o'clock. 我六点起床。 \n252. I meet the boss himself. 我见到了老板本人。 \n253. I owe you for my dinner. 我欠你晚餐的钱。 \n254. I really enjoyed myself. 我玩得很开心。 \n255. I'm fed up with my work! 我对工作烦死了! \n256. It's no use complaining. 发牢骚没什么用。 \n257. She's under the weather. 她心情·不好。 \n258. The child sobbed sadly. 小孩伤心地抽泣着。 \n259. The rumor had no basis. 那谣言没有·根据。 \n260. They praised him highly. 他们大大地表扬了他。 \n261. Winter is a cold season. 冬天是一个，寒冷的季节。 \n262. You can call me any time. 你可以随时打电话给我。 \n263. 15 divided by 3 equals 5. 15 除以3 等于5。 \n264. All for one，one for all. 我为人人，人人为我。 \n265. East,west，home is best. 金窝，银窝，不如自己的草窝。 \n266. He grasped both my hands. 他紧握住我的双手。 \n267. He is physically mature. 他身体己发育成熟。 \n268. I am so sorry about this. 对此我非常抱歉(遗憾)。 \n269. I can't afford a new car. 我买不起一部新车。 \n270. I do want to see him now. 我现在确实很想去见他。 \n271. I have the right to know. 我有权知道。 \n272. I heard some one laughing. 我听见有人在笑。 \n273. I suppose you dance much. 我想你常常跳舞吧。 \n274. I walked across the park. 我穿过了公园。 \n275. I'll just play it by ear. 我到时随机应变。 \n276. I'm not sure I can do it. 恐怕这事我干不了。 \n277. I'm not used to drinking. 我不习惯喝酒。 \n278. Is the cut still painful? 伤口还在痛吗? \n279. It's too good to be true! 好得难以置信。 \n280. Jean is a blue-eyed girl. 珍是个蓝眼睛的女孩。 \n281. Let's not waste our time. 咱们别浪费时间了。 \n282. May I ask some questions? 我可以问几个问题吗? \n283. Money is not everything. 金钱不是一切。 \n284. Neither of the men spoke. 两个人都没说过话。 \n285. Stop making such a noise. 别吵了。 \n286. That makes no difference. 没什么区别。 \n287. The price is reasonable. 价格还算合理。 \n288. They crowned him king. 他们拥立他为国王。 \n289. They're in red and white. 他们穿着红白相间的衣服。 \n290. We all desire happiness. 我们都想要幸福。 \n291. We just caught the plane. 我们刚好赶上了飞机。 \n292. What shall we do tonight? 我们今天晚上去干点儿什么呢? \n293. What's your goal in life. 你的人生目标是什么? \n294. When was the house built? 这幢房子是什么时候建造的? \n295. Why did you stay at home? 为什么呆在家里? \n296. Would you like some help? 今天真漂亮! \n297. You mustn‘t aim too high. 你不可好高骛远。 \n298. You're really killing me! 真是笑死我了! \n299. You've got a point there. 你说得挺有道理的。 \n300. Being criticized is awful! 被人批评真是痛苦! \n301. Did you enter the contest? 你参加比赛了吗? \n302. Do you accept credit cards? 你们收信用卡吗? \n303. Don't cry over spilt milk. 不要做无益的后悔。 \n304. Don't let chances pass by. 不要让机遇从我们身边溜走。 \n305. He owned himself defeated. 他承认自己失败了。 \n306. He seems at little nervous. 他显得有点紧张。 \n307. He strolls about the town. 他在镇上四处遛达。 \n308. Her tooth ached all night. 她牙疼了一整夜。 \n309. How about a drink tonight? 今晚喝一杯怎样? \n310. I can do nothing but that. 我只会做那件事。 \n311. I get hold of you at last. 我终于找到你了。 \n312. I have a surprise for you. 我有一个意想不到的东西给你看。 \n313. I like all kinds of fruit. 我喜欢各种各样的水果。 \n314. I saw it with my own eyes. 我亲眼所见。 \n315. I will arrange everything. 我会安排一切的。 \n316. I wish I knew my neighbor. 我很想认识我的邻居。 \n317. I would like to check out. 我想结帐。 \n318. It has be come much cooler. 天气变得凉爽多了。 \n319. It's time you went to bed. 你早就该睡觉了。 \n320. No spitting on the street. 禁止在大街上吐痰。 \n321. She was totally exhausted. 她累垮了。 \n322. Show your tickets，please. 请出示你的票。 \n323. Thank you for your advice. 谢谢你的建议。 \n324. That's the latest fashion. 这是最流行的款式。 \n325. The train arrived on time. 火车准时到达。 \n326. There go the house lights. 剧院的灯光灭了。 \n327. They are paid by the hour. 他们按时取酬。 \n328. Things are getting better. 情况正在好转。 \n329. Wake me up at five thirty. 请在五点半叫醒我。 \n330. We are all busy with work. 我们都忙于工作。 \n331. Where do you want to meet? 你想在哪儿见面? \n332. You can get what you want. 你能得到你想要的。 \n333. A barking dog doesn't bite! 吠犬不咬人。 \n334. Are you free this Saturday? 你这个星期六有空吗? \n335. Be careful not to fall ill. 注意不要生病了。 \n336. Being a mother is not easy. 做一个母亲是不容易的。 \n337. Brevity is the soul of wit. 简洁是智慧的精华。 \n338. Cancer is a deadly disease. 癌症是一种致命的疾病。 \n339. Did you fight with others? 你又和别人打架了吗? \n340. Don't dream away your time. 不要虚度光阴。 \n341. Don't keep me waiting long. 不要让我等得太久。 \n342. He has a remarkable memory. 他有惊人的记忆力。 \n343. He has completed the task. 他完成了这个任务。 \n344. He has quite a few friends. 他有不少的朋友。 \n345. He is capable of any crime. 他什么样的坏事都能干得出来。 \n346. He walks with a quick pace. 他快步走路。 \n347. He was not a little tired. 他很累。 \n348. His looks are always funny. 他的样子总是滑稽可笑。 \n349. How about going to a movie? 去看场电影怎么样? \n350. I think I've caught a cold. 我想我得了感冒。 \n351. I was taking care of Sally. 我在照顾萨莉。 \n352. I wish I lived in NEWYORK. 我希望住在纽约。 \n353. I'm very glad to hear that. 很高兴听你这样说。 \n354. I'm your lucky fellow then. 我就是你的幸运舞伴啦! \n355. It's none of your business! 这不关你的事儿! \n356. No littering on the campus. 在校园内不准乱丢废物。 \n357. She is a good-looking girl. 她是一个漂亮女孩。 \n358. She mended the broken doll. 她修补了破了的洋娃娃。 \n359. So I just take what I want. 那么我只拿我所需要的东西。 \n360. Spring is a pretty season， 春天是一个好季节。 \n361. The figure seems all Right. 数目看起来是对的。 \n362. The stars are too far away. 星星太遥远了。 \n363. The whole world knows that. 全世界都知道。 \n364. Tomorrow will be a holiday. 明天放假。 \n365. We walk on the garden path. 我们走在花园小径上。 \n366. What you need is just rest. 你需要的就是休息。 \n367. What‘s your favorite steps? 你最喜欢跳什么舞? \n368. You'd better let her alone. 你们最好是让她一个人呆会儿。 \n369. A lost chance never returns. 错过的机会永不再来。 \n370. Don't let this get you down. 不要为此灰心丧气。 \n371. He shot the lion with a gun. 他用枪把狮子打死了。 \n372. I don't think you are right. 我认为你是不对的。 \n373. I have never seen the movie. 我从未看过那部电影。 \n374. I haven't seen you for ages. 我好久没见到你了。 \n375. I was alone，but not lonely. 我独自一人，但并不觉得寂寞。 \n376. I went there three days ago. 我三天前去过那儿。 \n377. It's a friendly competition. 这是一场友谊赛。 \n378. It's very thoughtful of you. 你想得真周到。 \n379. May I speak to Lora，please? 我能和劳拉说话吗? \n380. Mr.Wang is fixing his bike. 王先生在修他的自行车。 \n381. My brother is see king a job. 我弟弟正在找工作。 \n382. Nancy will retire next year. 南希明年就退休了。 \n383. Neither you nor he is wrong. 你没错，他也没错。 \n384. Opportunity knocks but once. 机不可失，时不再来。 \n385. She dressed herself hastily. 她匆忙穿上衣服。 \n386. She hired a car by the hour. 她租了一辆按钟点计费的汽车。 \n387. Someone is ringing the bell. 有人在按门铃。 \n388. The Smiths are my neighbors. 史密斯一家是我的邻居。 \n389. These shoes don‘t fit right. 这双鞋不太合适。 \n390. This is only the first half. 这才是上半场呢。 \n391. This pen doesn‘t write well. 这钢笔不好写。 \n392. Would you like a cup of tea? 你想喝杯茶吗? \n393. You really look sharp today. 你今天真漂亮。 \n394. Another cat came to my house. 又有一只猫来到我家了。 \n395. Check your answers with mine. 把你的答案跟我的核对一下。 \n396. Don't keep the truth from me. 别瞒着我事实真相。 \n397. Everything has its beginning. 凡事都有开端。 \n398. He came to the point at once. 他一下子就说到了点子上。 \n399. He fell behind with his work. 他工作落后了。 \n400. He is the happiest man alive. 他是世界上最快乐的人。 \n401. He neither smokes nor drinks. 他既不抽烟也不喝酒。 \n402. He ran his horse up the hill. 他策马跑上小山。 \n403. He reminds me of his brother. 他使我想起了他的弟弟。 \n404. He was efficient in his work. 他工作效率高。 \n405. He will do anything but work. 只要不是干活，他干什么都行。 \n406. His father runs a restaurant. 他的父亲经营一家餐馆。 \n407. I have something to tell you. 我有事要告诉你。 \n408. I smelled a smell of cooking. 我闻到了烧菜做饭的味道。 \n409. I want to see the film again. 我真想再看一遍。 \n410. I've got too much work to do. 我要做的工作太多了。 \n411. Let's go for a walk，shall we? 咱们出去走走，好吗? \n412. Please let me check the bill. 请让我核对一下帐单。 \n413. Plenty of sleep is healthful. 充足的睡眠有益于健康。 \n414. The sun comes up in the east. 太阳从东方升起。 \n415. This is because we feel pain. 这是因为我们能感到疼痛。 \n416. What do you desire me to do? 你想要我做什么? \n417. What you said was quite true. 你所说的完全符合事实。 \n418. You can either stay or leave. 你或者留下或者离开。 \n419. Your life is your own affair. 你的生活是你自己的事。 \n420. All that glitters is not gold. 发闪光的不全是黄金。 \n421. Are you going to have a party? 你要举行聚会吗? \n422. Aren't you concerned about it? 难道你不担心吗? \n423. Don't forget to keep in touch. 别忘了保持联系。 \n424. He broke his words once again. 他又一次违背了诺言。 \n425. He is in his everyday clothes. 他穿着平常的衣服。 \n426. He is taller than I by ahead. 他比我高一头。 \n427. He led them down the mountain. 他带他们下山。 \n428. He was trained to be a lawyer. 他被培养成一名律师。 \n429. I am afraid that l have to go. 我要走了。 \n430. I don't have any cash with me. 我身上没带现金。 \n431. I have been putting on weight. 我开始发胖了。 \n432. I have just finished the book. 我刚刚读完这本书。 \n433. I was late for work yesterday， 我昨天上班迟到了。 \n434. It appears to be a true story. 这故事似乎是真的。 \n435. I've got to start working out. 我必须开始做健身运动了。 \n436. Japan is to the east of China. 日本在中国的东部。 \n437. John asked Grace to marry him， 约翰向格雷斯求婚。 \n438. My watch is faster than yours. 我的表比你的表快。 \n439. New China was founded in l949. 1949 年新中国成立。 \n440. Thanks for your flattering me. 多谢你的夸奖。 \n441. They charged the fault on him. 他们把过失归咎于他。 \n442. This car is in good condition. 这车性能很好。 \n443. This work itself is very easy. 这件工作本身很容易。 \n444. Truth is the daughter of time. 时间见真理。 \n445. We look forward to your visit. 期待您的光临。 \n446. What do you think of this one? 您觉得这个怎么样子 \n447. What's the weather like to day? 今天天气怎么样? \n448. A red tie will match that suit. 红领带会配那件衣服。 \n449. A wet road is usually slippery. 潮湿的路往往是滑的。 \n450. Example is better than precept. 身教胜于言传。 \n451. Go right back to the beginning. 直接回到起始位置。 \n452. He does everything without aim. 他做事都漫无目标。 \n453. He is respectful to his elders. 他对长辈很恭敬。 \n454. He knows English better than I. 他比我懂英语。 \n455. He resolved to give up smoking. 他决心戒烟。 \n456. His talk covered many subjects. 他的报告涉及很多课题。 \n457. I fear that he drinks too much. 我担心他喝的酒太多了。 \n458. I have my hair cut every month. 我每个月都理发。 \n459. I want to have a part-time job. 我想有一份兼职工作。 \n460. I'm sorry to have bothered you. 对不起，打扰你了。 \n461. It is not so easy as you think. 这事没有你想象的那么简单。 \n462. Keep your temper under control. 不要发脾气。 . \n463. Lying and stealing are immoral. 说谎和偷窃都是不道德的。 \n464. My efforts resulted in nothing. 我的努力毫无结果。 \n465. My false teeth are stuck to it. 我的假牙还在上边呢! \n466. She is a composer for the harp. 她是位写竖琴曲的作曲家 \n467. Take me to the airport，please. 请送我去机场。 \n468. Talking with you is a pleasure. 和你谈话很愉快 \n469. The eggs are sold by the dozen. 鸡蛋按打卖。 \n470. The price just covers the cost. 这个价格正好抵消成本。 \n471. The sweater is of good quality. 这件毛衣质地很好。 \n472. The teacher got a little angry. 老师有点生气了。 \n473. Think carefully before you act. 三思而后行。 \n474. Walt invented the steam engine. 瓦特发明了蒸汽机。 \n475. We are divided in our opinions. 我们意见分歧。 \n476. What ever I said，he‘d disagree. 不论我说什么他都不同意。 \n477. Who ever comes will be welcomed. 来的人我们都欢迎。 \n478. You look as if you didn‘t care. 你看上去好像满不在乎。 \n479. You should look at it yourself. 你应该亲自看看它。 \n480. Draw your chair up to the table. 把你的椅子拉到桌子旁边来。 \n481. He covered himself with a quilt. 他给自己盖上一条被。 \n482. He found my lecture interesting. 他觉得我讲课有趣。 \n483. He had a good many friends here. 他在这儿有很多朋友。 \n484. He is only about five feet high. 他大概只有五英尺高。 \n485. Her family are all music lovers. 她全家人都是音乐爱好者。 \n486. I am busy.How is your business? 我很忙。你的生意做得怎样? \n487. I don't think much of the movie. 我认为那电影不怎么样。 \n488. I feel like eating an ice-cream. 我想吃一个冰淇淋。 \n489. I found him seated on the bench. 我发现他在椅子上坐着 \n490. I gave much time to the old car. 我在这辆破车上花了不少时间。 \n491. I lost the door key about here. 我在这附近掉了门钥匙。 \n492. I'm not guessing，I really know. 我不是在猜想，我真的知道。 \n493. It's time to tell her the truth. 是该告诉她真相的时候了。 \n494. Let's watch TV with a candle on. 咱们点上蜡烛看电视吧。 \n495. Most games cost about that much. 大部分游戏差不多都是这个价钱。 \n496. My parents want me to go abroad. 我父母想让我出国。 \n497. She has been collecting stamps. 她一直收集邮票。 \n498. There are many stars in the sky. 天上有很多星星。 \n499. We get to London this afternoon. 我们是今天下午到达伦敦的。 \n500. What about having a pizza first? 先吃点比萨饼怎么样? \n501. You'd better look before you leap. 你最好三思而后行。 \n502. You know what I'm talking about. 我想你知道我在说什么。 \n503. He has been sick for three weeks. 他已经病了几周了。 \n504. He inspected the car for defects. 他详细检查车子有无效障。 \n505. I count you as one of my friends 我把你算作我的一个朋友。 \n506. I go to school by bike every day. 我每天骑自行车上学。 \n507. I have a large collection of CDs. 我收集了很多唱片。 \n508. I won't be able to see him today. 今天我不可能去看他。 \n509. I'll call a taxi in case of need. 如果需要的话，我会叫出租车的。 \n510. Is there any sugar in the bottle? 瓶子里还有糖吗? \n511. It's a secret between you and me. 这是你我之间的秘密。 \n512. It's very kind of you to help me. 你帮助我真是太好了。 \n513. Let's divide the cake into three. 我们将蛋糕分成三份吧。 \n514. Patience is a mark of confidence. 耐心是自信心的一种表现。 \n515. Susan is going to finish college. 苏珊将完成大学学业。 \n516. That is my idea about friendship. 这是我关于友谊的看法。 \n517. The book you ask for is sold out. 你要的那本书已经售完了。 \n518. The boy was too nervous to speak. 那男孩紧张得说不出话来。 \n519. The play may begin at any moment. 戏随时都有可能开始。 \n520. The salve will heal slight burns. 这种药膏能治疗轻微烧伤。 \n521. The sea sparkled in the sunlight. 阳光下，大海波光粼粼。 \n522. The teacher tested us in English. 老师用英文考我们。 \n523. There is a bridge over the river. 河上有一座桥。 \n524. They rode their respective bikes. 他们各自骑着自己的自行车。 \n525. They will arrive in half an hour. 他们将于半小时之内到达。 \n526. Time is more valuable than money. 时间比金钱宝贵。 \n527. We are all in favor of this plan. 我们都赞同这项计划。 \n528. We reached London this afternoon. 我们是今天下午到达伦敦的。 \n529. We two finished a bottle of wine. 我俩喝完了一瓶酒。 \n530. what a lovely little girl she is! 她是一个多么可爱的小女孩耶! \n531. Will you pick me up at my place? 你能到我的住处来接我吗? \n532. You may choose whatever you like. 你可以喜欢什么就选什么。 \n533. You're suffering from an allergy? 你过敏吗? \n534. Beyond all questions you are right. 毫无疑问，你是对的。 \n535. But I plan to weed the yard today. 我计划今天除院子里的草。 \n536. But who will do all the house work? 但是这些家务活谁来做呢? \n537. Close the door after you，please. 请随手关门。 \n538. Come to see me whenever you like. 你可以随时来见我。 \n539. Don't pull the chairs about,boys! 不要把椅子拖来拖去，孩子们! \n540. He drives more carefully than you. 他开车比你小心。 \n541. He invited me to dinner yesterday. 他昨天请我吃晚饭了。 \n542. He struck his attacker on the ear. 他打了那个攻击者一耳光。 \n543. He suddenly appeared in the party. 他突然在晚会上出现了。 \n544. Her handbag goes with her clothes. 她的手袋和她的衣服很搭配。 \n545. Here we are. Row M, seats l and 3. 哦，到了。M 排，l 号和3 号。 \n546. His boss might get angry with him. 他的老板也许会生他的气。 \n547. I expect to be there this evening. 我打算今天晚上到那儿去。 \n548. I really need to lose some weight. 我真的需要减肥了。 \n549. I think you have the Wrong number. 我想你打错号码了。 \n550. I would rather stay at home alone. 我宁愿独自呆在家。 \n551. I'd like to look at some sweaters. 我想看看毛衣。 \n552. Its origin is still a mystery now. 它的起源至今仍是个谜。 \n553. Money is no more than our servant. 金钱不过是我们的仆人。 \n554. Once you begin，you must continue. 一旦开始，你就得继续。 \n555. She is poor but quite respectable. 她虽穷，人品却很端正。 \n556. She spent a lot of money on books. 她花了很多钱来买书。 \n557. The girl in red is his girlfriend. 穿红衣服的那个女孩是他的女朋友。 \n558. There is a chair below the window. 窗户下面有一把椅子。 \n559. They employed him as a consultant. 他们雇用他为顾问。 \n560. To be honest with you，I‘m twenty. 老实说，我20 岁。 \n561. We often call him by his nickname. 我们经常叫他的绰号。 \n562. Will you be free tomorrow evening? 你明晚有空吗? \n563. Would you like to leave a message? 你要留话吗? \n564. You can never turn the clock back. 时光不能倒流。 \n565. You may as well tell me the truth. 你还是把事实告诉我为好。 \n566. Are your grandparents still living? 你的祖父母还在么? \n567. Can you recognize that woman，Mary? 你能认出那个女人是谁了吗，玛丽? \n568. Do you have any suggestions for me? 你对我有什么建议么? \n569. He is tough，but I am even tougher. 他是一个硬汉子，不过我要比他更硬。 \n570. He made his way through the forest. 他设法穿过了森林。 \n571. He suggests you leave here at once. 他建议你立刻离开这儿。 \n572. He was married to a friend of mine. 他和我的一个朋友结了婚。 \n573. He will blame you for carelessness. 他会责备你的粗心大意。 \n574. I can give you a number of excuses. 我可以给你说出很多韵理由。 \n575. I don‘t doubt that he will help me. 我不怀疑他会援助我。 \n576. I hope you enjoy your stay with us. 希望您在这儿过的愉快。 \n577. I'd like to-repair our differences. 我愿意消除一下我们之间的分歧。 \n578. It's nothing to be surprised about. 这事不值得大惊小怪。 \n579. It's rude to stare at other people. 盯着别人看是不礼貌的。 \n580. Bob has always had a crush on Lucy. 鲍伯一直在爱着露茜。 \n581. Let's take a short break for lunch. 让我们休息一会儿，去吃午饭。 \n582. Linda speaks as if she were a boss. 琳达说话总好象她是老板。 \n583. She became more and more beautiful. 她变得越来越漂亮了。 \n584. Suppose it rains,what shall we do? 万一下雨，我们该怎么办? \n585. The book is protected by copyright. 该书受版权保护。 \n586. The ice is hard enough to skate on. 冰已经厚得可以划冰了。 \n587. The price includes postage charges. 价格包括邮资在内。 \n588. This is a little something for you. 这是我给你们的一点心意。 \n589. What he likes best is making jokes. 他最喜欢开玩笑。 \n590. Who but Jack would do such a thing? 除了杰克谁会做这种事呢? \n591. You should have a mind of your own. 你必须有自己的主见。 \n592. You will soon get used to the work. 你很快就会习惯于这项工作的。 \n593. Columbus discovered America in l492. 哥伦布于1492 年发现了美洲。 \n594. God helps those who he1p themselves. 上帝帮助那些自己帮自己的人。 \n595. He has a nice sum of money put away. 他存了一大笔钱。 \n596. He is heavily insured against death. 他给自己投了巨额的人身保险。 \n597. He used to learn everything by rote. 他过去总是死记硬背。 \n598. He's a terrible man when he's angry. 他生气的时候很可怕。 \n599. I am on my way to the grocery store. 我正在去杂货店的路上 \n600. I am sick of always waiting. 我讨厌长时间等待。\n601. I appreciate John's helping in time. 我感谢约翰的及时帮助。 \n602. I bought it the day it was released. 它发行的当天我就买了。 \n603. I doubted whether the story is true. 我怀疑那故事是不是真的。 \n604. I learnt that I had passed the test. 我获悉我测验及格了。 \n605. I will seek from my doctor‘s advice. 我将请教医生的意见。 \n606. Ice cream is popular among children. 冰淇淋深受孩子们的欢迎。 \n607. I'd like to get this film developed. 我要冲洗这卷胶卷。 \n608. In a word，I am tired of everything. 总之，我对一切都很厌倦。 \n609. Let us do it by ourselves，will you? 我们自己做这件事，可以吗? \n610. May I know the quantity you require? 请问你们需要多少数量的货物? \n611. Nobody has ever solved this problem. 没有人曾解决过这个问题。 \n612. Our school covers 100 square meters. 我们学校占地面积平方米。 \n613. People enjoyed the stamps very much. 人们非常喜爱这些邮票。 \n614. The editor over looked a print error. 这位编辑漏掉了一个印刷错误。 \n615. The sudden barking frightened Clara. 突然的狗叫声吓坏了克拉拉。 \n616. The teams are coming onto the field. 队员们都进场了。 \n617. There is a mark of ink on his shirt. 他的衬衣上有一块墨迹。 \n618. There isn‘t any water in the bottle. 瓶子里一点水也没有。 \n619. This joke has gone a little too far. 这个玩笑开得有点-过分了。 \n620. We arrived in London this afternoon. 我们是今天下午到达伦敦的。 \n621. We can‘t go out because of the rain. 我们不能出去因为下雨了。 \n622. We should make good use of our time. 我们应该充分利用我们的时间。 \n623. We should save unnecessary expenses. 我们应节省不必要的开支。 \n624. You may have heard of Birth Control. 你们也许听说过控制人口出生的措施。 \n625. After a pause he continued his story. 停顿一下之后他继续说他的。 \n626. As you know, I am a very kind person. 你知道，我是个很和善的人。 \n627. He dare not tell us his evil conduct. 他不敢告诉我们他的恶行。 \n628. I can express myself in good English. 我可以用很好的英语来表达自己的观点。 \n629. I'll furnish my house with furniture. 我要为我的房子置办家具。 \n630. It seemed as if there was no way out. 看情形似乎没有出路了。 \n631. It's the hottest day I've had so far. 这是迄今为止我经历的最热的一天。 \n632. Mr. Smith is in charge of this class. 史密斯老师负责该班。 \n633. Mr. Smith taught English at a school. 史密斯先生在一所学校教英语。 \n634. None of us is afraid of difficulties. 我们当中没有一个人害怕困难。 \n635. Our school is in the east of Beijing. 我们学校在北京的东部。 \n636. She really wishes her clock had rung. 她真希望今天早上她的闹钟响了。 \n637. She teaches foreign students Chinese. 她教外国学生汉语。 \n638. The question will be settled tonight. 这个问题将在今晚解决。 \n639. The weight is too much for my height. 相对于我的身高来说，体重太重了! \n640. There are mice in Mrs. Lee‘s kitchen! 李太太的厨房里有老鼠! \n641. There is no one but hopes to be rich. 没有人不想发财。 \n642. There'll be some sport reviews on TV. 电视上会有一些体育评论。 \n643. This company is our regular customer. 这家公司是我们的老客户。 \n644. This is a good example of his poetry. 这是他诗作的一个好例子。 \n645. What we read influences our thinking. 我们所阅读的书本会影响我们的思想。 \n646. Words can't express what I felt then. 无法用语言形容我当时的感受。 \n647. You really have an ear for pop music. 你确实对流行音乐很有欣赏力。 \n648. A bad workman quarrels with his tools. 手艺差的工人总是抱怨工具不好使。 \n649. Can you adapt yourself to the new job? 你能适应新的工作吗? \n650. Does the computer ever make a mistake? 计算机出错吗? \n651. Don't be uneasy about the consequence. 不必为后果忧虑不安。 \n652. Even a child can answer this question. 即使小孩儿都能回答这个问题。 \n653. He has many strange ideas in his mind. 他脑子里尽足奇思怪想。 \n654. He is commonly supposed to be foolish. 他是公认的傻瓜。 \n655. He sat with his arms across the chest. 他双臂交叉于胸前的坐在那里。 \n656. He set up a fine example to all of us. 他为我们树立了一个好榜样。 \n657. His cake is four times as big as mine. 他的蛋糕是我的四倍大。 \n658. I do not care whether it rains or not. 我不管天会不会下雨。 \n659. I have a lot in common with my sister. 我和我姐姐有很多相同之处。 \n660. I haven't even touched your tooth yet. 我还没有碰到你的牙齿呢。 \n661. I'm looking forward to a prompt reply. 盼迅速答复。 \n662. It is an excellent novel in every way. 无论从哪方面来看，这都是一本优秀的小说。 \n663. It is clear that the cat has eaten it! 很明显，是猫偷吃的! \n664. Nothing but death can part the couple. 除了死之外，什么也拆不散这一对。 \n665. Now she looks pale as if she were ill. 现在她脸色难看，好像病了一样。 \n666. She was injured badly in the accident. 她在这次意外中受到重伤。 \n667. The secret was spread among the crowd. 秘密在人群当中传播开来。 \n668. The two brothers look very much alike. 这兄弟俩看上去很相像。 \n669. Their interest is listening to others. 他们的兴趣是听别人说话。 \n670. There was a notice in the supermarket. 超市里有一个布告。 \n671. This one cannot compare with that one. 这个与那个无法比较。 \n672. To know everything is to know nothing. 样样通，样样松。 \n673. To tell the truth, I don't like disco. 说实话，我不喜欢迪斯科。 \n674. True and False have opposite meanings. 真与假含义完全相反。 \n675. What's the point of going to college? 上大学有何用? \n676. Where can we make the insurance claim? 我们可以在哪里提出保险赔偿?这个无法与那个比较。 \n677. Why don't I pick you up at your house? 为什么不让我去接你呢? \n678. Why don't you attend an aerobic class? 你为什么不去参加一个有氧健身班呢? \n679. You can kill two birds with one stone. 一举两得。 \n680. You can't go in no matter who you are. 不管你是谁，都不能进去。 \n681. You should learn these words by heart. 你应该把这些词背熟。 \n682. Could I have those two tickets, please? 这两张票给我行不行? \n683. He has to take care of his sick mother. 他得照顾他生病的母亲。 \n684. He hired a workman to repair the fence. 他雇用了一个工人修理围墙。 \n685. I can't make this machine run properly. 我无法使这部机器正常运转。 \n686. I don't know if I'll have the patience. 我不知道我有没有耐心。 \n687. I don't like what you are saying. 我不喜欢你说的话。 \n688. I fell in love with her at first sight. 我第一眼见到她就爱上了她。 \n689. I have just heard from my sister, Mary. 我刚收到我妹妹玛丽的一封信。 \n690. If you would only try, you could do it. 只要你肯尝试，你一定能做这件事。 \n691. It is no use learning without thinking. 学而不思则惘。 \n692. It was a lazy, breezy autumn afternoon. 这是一个懒散的，起风的秋日下午。 \n693. Jack is the strongest boy in the class. 杰克是全班最强壮的男孩。 \n694. Please fetch a chair from another room. 请到别的房间取一把椅子。 \n695. The doctor began to operate on the boy. 医生开始给那个男孩动手术。 \n696. The doctor is taking my blood pressure. 医生正给我量血压。 \n697. The machines will not operate properly. 那些机器不能正常运转。 \n698. The students declared against cheating. 学生们表示反对作弊。 \n699. There is hope so long as he is with us. 只要他在就有希望。 \n700. He talks as if he were the head of the office. 他说话的口气像办公室主任似的。 \n701. His cake is three times bigger than mine. 他的蛋糕比我的大三倍。 \n702. I am looking forward to your early reply. 希望早日得到你的答复。 \n703. I could say nothing but that I was sorry. 我除了说“对不起”之外，什么也说不出来。 \n704. I don't know how to express my gratitude. 我不知道怎样来表达我的感激之情。 \n705. I have to catch a plane. Could you hurry? 我要赶飞机,你能快点吗? \n706. I haven't heard from her for a long time. 我好久没有她的消息了。 \n707. I would like to wash the clothes for you. 我愿意帮你洗这些衣服。 \n708. Let me see your driver's license, please. 请让我看看你的驾驶执照。 \n709. She goes to work every day except Sunday. 除星期天外，他每天去上班。 \n710. Take a seat please, make yourself at home. 请坐，随便一点。 \n711. The damage was caused by external forces. 损害是由外力引起的。 \n712. The doctor advised me to give up smoking. 医生建议我戒烟。 \n713. The flowers make the room more beautiful. 花使房间变得更加美了。 \n714. There is a good restaurant on the street. 那条大街上有一个很好的餐馆。 \n715. They covered 120 miles in a single night. 他们仅一夜就走了120 英里路。 \n716. Try to look on the bright side of things. 尽量从好的方面看。 \n717. What's your plan for the summer vacation? 你暑假打算干什么? \n718. You may pick whichever one you like best. 你可以挑你最喜欢的。 \n719. You're welcome to stay with us next time. 欢迎您下次再光临我们的饭店。 \n720. There was a murder in London yesterday. 昨天伦敦发生了一起谋杀案。 \n721. They stared at the huge tiger with awe. 他们敬畏地看着那头巨虎。 \n722. He never misses a chance to see a movie. 他从不错过看电影的机会。 \n723. I cannot put up with my noisy roommates. 我受不了我那些吵闹的室友了。 \n724. I will be back by the end of next month. 我下个月底会回来。 \n725. I'm good at freestyle and breast stroke. 我擅长自由泳和蛙泳。 \n726. It was your turn to wash them yesterday. 昨天轮到你把它们洗干净。 \n727. Let's go out to have a dinner, shall we? 咱们出去吃饭吧，好吗? \n728. Please push the ladder against the wall. 请把梯子靠在墙壁上。 \n729. She is standing in the front of the bus. 她站在公共汽车的前部。 \n730. The doctor asked me to watch what I eat. 医生要我注意饮食。 \n731. The grass is moist early in the morning. 清晨的草地湿漉漉的。 \n732. The test finished. We began our holiday. 考试结束了，我们开始放假。 \n733. This question is too complicated for me. 这个问题对我说来太复杂了。 \n734. Tony speaks English and he plays tennis. 托尼会说英语，打网球。 \n735. What is worth doing is worth doing well. 只要你觉得某事值得去做，就一定要把它做好。 \n736. Would you like to go to a party with me? 你想不想和我一起去参加一个聚会? \n737. All at once, a rabbit came out of a hole. 突然，一只兔子从一个洞中跑了出来。 \n738. All characters in the book are imaginary. 书中所有的人物都是虚构的。 \n739. Do you feel like going to that new disco? 你想去那个新开的迪厅 \n740. Ducks know how to swim when they are born. 鸭子天生会游泳 \n741. He spent most of his life gathering money. 他一生大部分时间用来积聚钱财。 \n742. He usually stays at home with his pet dog. 他通常跟他的爱犬待在家里。 \n743. How peaceful and beautiful the country is! 多么平静美丽的国家呀! \n744. I am told that you dance wonderfully well. 我听说你的舞跳得特棒。 \n745. I have had several conversations with him. 我已经和他谈过几次了。 \n746. It is the best film that I have ever seen. 这是我所看过的最好的电影。 \n747. It's only a party in honor of my birthday. 这只是为了庆祝我的生日而举行的晚会。 \n748. Learning English is like building a house. 学英语象盖房子。 \n749. Listening with your heart is good for you. 专心聆听别人说话对你有好处。 \n750. My grandpa died of hunger in the old days. 我爷爷在旧社会死于饥饿。 \n751. She feared staying alone in the farmhouse. 她害怕一个人留在农舍里。 \n752. She guided the tourists around the castle. 她引导旅游者参观了这座城堡。 \n753. She runs everyday in order to lose weight. 她每天都跑步是为了减肥。 \n754. She sang perfectly in the hall last night. 她昨晚在大厅唱得非常好。 \n755. Somebody is always complaining to others. 有人总是向别人抱怨。 \n756. They don't often have a bad day this year. 他们今年的运气还不错。 \n757. We regard the matter as nothing important. 我们认为这件事情不重要。 \n758. We'll take our holiday sometime in August. 我们将在八月份的某个时候休假。 \n759. Could you direct me to the station, please? 请问到车站怎么走? \n760. Have you cleared your luggage with customs? 你的行李通关了吗? \n761. He bothered me with a great many questions. 他对我提了一大堆问题，真烦! \n762. He does exercises every day in the morning. 他每天早上锻练身体。 \n763. How do I control myself? I can't calm down. 我怎能控制我自己?我无法冷静下来。 \n764. I dig songs and I like pop music very much. 我特别喜欢歌曲和流行音乐。 \n765. I'd like to cash a traveler's check please. 我想兑换旅行支票。 \n766. I‘d like to pick sea shells this afternoon. 今天下午我想去捡贝壳。 \n767. It's odd that they didn't reply our letter. 他们没有给我们回信，这真奇怪。 \n768. John seldom gets together with his friends. 约翰很少与朋友聚在一起。 \n769. Many people have been out of work recently. 最近有许多人失业。 \n770. Please give my best regards to your family. 请代我向你们全家致以最诚挚的问候。 \n771. Some people have compared books to friends. 有些人把书比作朋友。 \n772. The bat together with the balls was stolen. 球拍和球全被偷了。 \n773. The color of her dress suits her very well. 她衣服的颜色很适合她。 \n774. The days get longer and the nights get shorter. 白天变长了，黑夜变短了。 \n775. The dress doesn't fit her. She is too thin. 这件衣服不适合她，她太瘦了。 \n776. The examination put a lot of stress on him. 那次考试给了他很大的压力。 \n777. The mother sat the child at a little table. 母亲安排孩子坐到小桌旁。 \n778. There is some difference between the twins. 这对双胞胎有点儿不一样。 \n779. They insisted on staying rather than going. 他们坚持留下来，而不愿意走 \n780. Trust me, the game is really worth playing. 相信我，这游戏确实值得一玩。 \n781. Unlike her friends, she never gave up hope. 与她的朋友的不同之处是，她从不放弃希望。 \n782. Well done! You are always doing a good job! 干得不错!你总是干得很出色! \n783. We're planning a tour to Italy this summer. 我们计划今年夏天到意大利去旅行。 \n784. Were there any letters for me this morning? 今天早上有我的信吗? \n785. Why isn't Mrs. Lee‘s cat catching the mice? 李太太的猫为何不在抓这些老鼠呢? \n786. Your English is improving little by little. 你的英语正在渐渐提高。 \n787. Could you tell me where I can wash my hands? 请问洗手间怎么走? \n788. Do you have any plans for the long weekend? 有办法打发这个漫长的周末吗? \n789. He decided to bring a suit against his boss. 他决定起诉他的老板。 \n790. He devoted his life to the study of science. 他把毕生献给科学研究。 \n791. He had to choose between death and dishonor. 他不得不在死亡和耻辱之间选择。 \n792. His previous attempts had been unsuccessful. 他以前的尝试没有成功。 \n793. I determined that nothing should be changed. 我决定什么都不改变。 \n794. I don't think it will lead to a good result. 我认为这事不会有什么好结果。 \n795. I have 4 books and 2 magazines to check out. 我有4 本书和2 本杂志要借。 \n796. I think I've filled in everything correctly. 我想各项都填对了。 \n797. I'm not sure whether I have locked the door. 我没把握是否锁了门。 \n798. It took him a little time to fix that watch. 他很快就把表修理好了。 \n799. My father is at home looking for the ticket. 我爸爸正在家里找票呢! \n800. Not until last week did I get a work permit. 直到上周我才拿到工作许可证 \n801. She intends to make teaching her profession. 她想以教书为职业。 \n802. The letter \"x\" stands for an unknown number. 字母x 代表未知数。 \n803. The sight of the dead body scared him stiff. 看到尸体把他吓僵了。 \n804. There are lots of huge buildings in Beijing. 在北京有许多高大的建筑物。 \n805. There is an interesting film on Channel one. 在一频道有一部有趣的电影。 \n806. They plan to immigrate to Finland next year. 他们计划明年移居芬兰。 \n807. We enjoyed driving along the new expressway. 我们喜欢沿着新建的高速公路开车。 \n808. We need to cooperate perfectly to win the game. 要想赢得比赛，我们需要密切配合。 \n809. We need more than listening. We need action! 我们需要的不光是听得进意见，我们要的是行动。 \n810. Yes. I wouldn't go home early if I were you. 是的，如果我是你，我不会早回家。 \n811. Your answer is satisfying. I feel satisfied. 你的答案是令人满意的。我感到很满意。 \n812. Betty and Susan are talking on the telephone. 贝蒂和苏珊正在通电话。 \n813. Great efforts ensure the success of our work. 巨大的努力确保了我们工作的成功。 \n814. He has tasted the sweets and bitters of life. 他已尝遍了人生的甜酸苦辣。 \n815. He said he was educated in the United States. 他说他是在美国受的教育。 \n816. How do you like our English literature Prof? 你觉得我们的英国文学课的教授怎么样? \n817. I am looking forward to your visit next week. 我期待着你下周来访。 \n818. I feel I am the happiest person in the world. 我觉得自己是世界上最幸福的人了。 \n819. I had to sit up all night writing the report. 我不得不熬通宵写报告。 \n820. I hope we can see each other again some time. 希望还能有相见的机会。 \n821. I saw him playing football on the playground. 我看见他在操场上踢足球。 \n822. It is tomorrow that they will have a meeting. 就在明天(而不是在别的某一天)他们要开会。\n823. Let me tell you some details about clearance. 让我告诉你一些通关的细节。 \n824. The brain needs a continuous supply of blood. 大脑需要连续不断地供血。 \n825. The doctor's words made him feel comfortable. 医生的话让他感觉很舒服。 \n826. The truth is quite other than what you think. 事实真相和你所想的完全不同。 \n827. They stopped talking when their boss came in. 当老板进来的时候；他们停止了交谈。 \n828. They were glad of the examination being over. 他们为考试结束了而高兴。 \n829. This is by far the largest cake in the world. 这是目前世界上最大的蛋糕了。 \n830. Whichever you choose, you won't be satisfied. 不论你选择哪一个，你都不会满意。 \n831. Will you connect this wire to the television ? 你把这根电线和电视机连上好吗? \n832. His words are strongly impressed on my memory. 他的话深深地铭记在我的心头。 \n833. Is this the fight bus for the Capital Library? 这辆车到首都图书馆吗? \n834. One third of this area is covered with forest. 这一地区三分之一的地方都是森林。 \n835. They are arguing over who should pay the bill. 他们为谁应该付款而争论不休。 \n836. Wait a moment, I'll be with you in an instant. 等一下，我立刻就来。 \n837. You'll save time not waiting for the elevator. 你可以节省等电梯的时间。 \n838. A clear conscience laughs at false accusation. 只要问心无愧，无端的指责可以一笑置之。 \n839. I have a headache, and she has a stomachache. 我头疼，她胃疼。 \n840. He glared at Bill, ready to teach him a lesson. 他怒视着比尔，准备教训他一顿。 \n841. I assure you that you will feel no pain at all. 我保证你根本不会觉得疼的。 \n842. I can't afford to go to a restaurant every day. 每天都去餐馆吃饭，我真是支付不起。 \n843. I left at 6:00 so that I could catch the train. 我六点钟出门，以便赶上火车。 \n844. I'm afraid I have some rather bad news for you. 我恐怕有些很坏的消息要告诉你。 \n845. Learn to say the fight thing at the fight time. 学会在适当的时候说适当的话。 \n846. No wonder you can‘t sleep when you eat so much.  你吃这么多难怪睡不着。 \n847. Please ask her to call me back when she's back. 她回来时请让她给我回个电话。 \n848. There are a lot of people in the swimming pool. 游泳池里挤满了人。 \n849. They have to work hard to support their family. 他们必须努力工作来支持他们的家。 \n850. This way, he can kill two birds with one stone. 这样他就能两全其美。 \n851. We are all taking medicine against the disease. 我们都服药治疗疾病。 \n852. Would you please go to a dancing party with me? 请你跟我一起去参加一个舞会好吗? \n853. He usually drops in at my place on his way home. 他常常在回家的路上顺便来看看我。 \n854. His vanity was hurt by their talking so frankly. 他们坦率的谈话伤害了他的虚荣心。 \n855. How would you go to Beijing, by air or by train? 你怎样去北京，是乘飞机还是坐火车? \n856. I cannot express how glad I am to hear from him. 我无法表达我接到他的信时有多高兴。 \n857. If Tom cannot keep his promise, he'll lose face. 如果汤姆不能信守诺言，他就会丢面子。\n858. I'll still love her even if she doesn't love me. 即使她不爱我，我还仍然爱她。 \n859. I received an invitation, but I did not accept it. 我收到一份请帖，但没有接受。 \n860. If I were you, I would not be bothered by English. 如果我是你，就不会为英语烦恼了。 \n861. If you don't work, you will fail to pass the exam. 如果你不学习，你考试就会不及格。 \n862. I'm thinking of hanging the lamp from the ceiling. 我打算把灯吊在天花板上。 \n863. It is more important to be healthy than bony slim. 健康永远比皮包骨头好。 \n864. Long ago, people believed that the world was flat. 很久以前人们相信地球是平的。 \n865. Old tunes are sweetest and old friends are surest. 老调最甜美，老友最可靠。 \n866. She makes it clear that she doesn't like swimming. 她明确地表示她不喜欢游泳。 \n867. The constitution guards the liberty of the people. 宪法保护人民的自由。 \n868. The doctor examined the soldier's wound carefully. 大夫仔细检查了战士的伤口。 \n869. The harder I study, the better my English will be. 我越努力，我的英语就会越好。 \n870. The sun was shining and the sky was crystal clear. 阳光闪烁，天空湛蓝。 \n871. This cellar room is very damp in the rainy season. 这间地下室在雨季非常潮湿。 \n872. Computers are becoming a part of our everyday life. 电子计算机正渐渐成为我们日常生活的一部分。 \n873. Every man is fool sometimes, but none at all times. 每个人都有愚蠢的时候，但是没有一个人永远愚蠢。 \n874. He dreamed of traveling to remote South Sea Islands. 他曾梦想到遥远的南海诸岛去旅游。 \n875. How can I climb up that wall! I wish I were a bird! 我怎么能够爬得上那堵墙?我要是一只鸟就好了! \n876. However, Susan has not really made up her mind yet. 然而，苏珊却还没有决定。 \n877. I really think a little exercise would do you good. 我真的觉得做点运动对你有好处。 \n878. I will never forget the days that I spent with you. 我永远都不会忘记和你一起度过的日子。 \n879. we got a bad headache, and my nose is running. 我头痛得厉害，还流鼻涕。 \n880. Many young girls dream of being a fashion model. 许多年轻女孩梦想成为时装模特儿。 \n881. Most of the earth's surface is covered by water. 大部分的地球表面被水覆盖着。 \n882. Somebody's knocking at the door. I'll answer it. 有人在敲门，我去开。 \n883. The number 13 bus will take you to the hospital.13. 路车会带你去医院。 \n884. They celebrated his birthday with a dance party. 也们举办舞会来祝贺他的生日。 \n885. They misplaced this book under other categories. 他们把它错放到另一个类别去了。 \n886. They played a shameful part in the whole affair. 他们在这一事件中扮演了可耻的角色。 \n887. As a matter of fact, he was pretending to be ill. 实际上，他是在装病。 \n888. I will speak against anything I know to be wrong. 我会对所有我认为不对的事情直言不讳。\n889. In spite of the heavy rain, she went to the shop. 尽管下着大雨，她还是去了商店。 \n890. No matter what happened, he would not say a word. 不管发生什么事，他也不会说一句话。 \n891. No one knows the location of the hidden treasure. 谁也不知道藏宝地点在哪里。 \n892. The old lady enjoys a quiet life with her family. 老太太和她的家人安享宁静的生活。 \n893. The population of the city is close to a million. 这个城市的人口接近一百万。 \n894. We are prohibited from smoking on school grounds. 我们被禁止在校园内抽烟。 \n895. Growth, however, brings new problems and concerns. 不过，发展也带来了新的问题和顾虑。 \n896. He appears to be your friend but I doubt if he is. 他看上去像是你的朋友，但我怀疑他是否是真心的。 \n897. I am so full that I would burst with another bite. 我吃得如此之饱，我感觉我再吃一口肚子就要胀破了。 \n898. I have two cats. One is white, the other is black. 我有两只猫，一只是白猫，另一只是黑猫。 \n899. I'm sorry, these 2 books are 3 days overdue. 小姐，对不起，这两本书已经过期3 天了。 \n900. Jalu has forgotten falling off his bicycle. 詹露早忘掉他从白行车上摔下来这件事了 \n901. Manners are quite different from country to country. 各国的礼仪各不相同。 \n902. Not only did I know her, but I was her best friend. 我不仅认识她，还是她最好的朋友。 \n903. The best-known movie awards are the Academy Awards. 最著名的电影奖是奥斯卡金像奖。 \n904. We've got to do something about the neighbor's dog! 我们得对邻居的狗采取点行动了! \n905. Will you come and join us for dinner on Sunday? 星期天来和我们共进晚餐好吗? \n906. Do you think people are a company's greatest wealth? 你认为人是公司最大的财富吗? \n907. He thinks himself somebody, but we think him nobody. 他自以为是重要人物，但我们觉得他什么也不是。 \n908. I believe I haven't reached the summit of my career. 我相信我还没有达到事业的巅峰。 \n909. It is no matter whether you get there early or late. 你早到晚到都没有关系。 \n910. It's against the rules to handle the ball in soccer. 在足球中以手触球就是犯规。 \n911. The nurse assisted the doctor in the operating room. 护士在手术室协助医生动手术。 \n912. What I do on my own time is nobody else's business. 我在自己的时间里干什么根本不关别人的事。 \n913. What I want to do is different from those of others. 我想做的与别人不同。 \n914. You forget to write down the date of your departure. 您忘了写离店日期了。 \n915. “I wish I'd known about that rule earlier\", she said. “我要是早点知道这个规矩就好了!”她说。 \n916. Could you tell me your secret for a long, happy life? 你能告诉我长时间地过着快乐的生活的秘诀吗? \n917. He holds a position of great responsibility upon him. 他担任着一个责任重大的职务。 \n918. It is said he has secret love affairs with two women! 据说他背地里和两个女人有关系！ \n919. Number 13 buses run much more frequently, don't they? 13 路车跑得更勤，是不是? \n920. They are only too delighted to accept the invitation. 他们非常乐意接受邀请。 \n921. We are going to have the final examination next week. 我们下周举行期末考试。 \n922. And now medical care helps to keep people alive longer. 现在的医疗保健使得人们活得更长。 \n923. Do you think you'll be able to go to sleep fight away? 你认为你马上就能睡着吗? \n924. I am in charge of the company when the manager is out. 经理不在时山我来管理公司。 \n925. I borrowed a notebook from Tom and I lent it to Marry. 我从汤姆那儿借了一本笔记本，我又把它借给玛丽了。 \n926. I'm doing some washing and John is cooking dinner. 我正在洗衣服，约翰在做晚饭。 \n927. Were there any exciting incidents during your journey? 你们在旅行中有没有什么令人激动的事情? \n928. As far as policy is concerned, I have to say something. 谈到政策，我得说几句。 \n929. Could you tell me what the maximum weight allowance is? 您能告诉我行李的最大重量限额是多少吗? \n930. He came out of the library, a large book under his arm. 他夹着本厚书，走出了图书馆。 \n931. The brothers differ from each other in their interests. 这几个兄弟各有所好。 \n932. Although we can't see these atoms, they really do exist. 虽然我们看不见原子，但它们的确存在。 \n933. I am familiar with the casual atmosphere in the company. 我对公司中这种放松的氛围感到很熟悉。 \n934. Most people eat, write, and work with their fight hands. 大多数人吃饭，写字，工作都用右手。 \n935. Only by working hard can we succeed in doing everything. 只有努力，才能成功 \n936. Take it easy, you will be all right in a couple of days. 别担心，你两天之内就会痊愈的。 \n937. The Beatles represented part of the spirit of their age. 甲壳虫乐队代表了他们时代的部分精神。 \n938. There being no one to help me, I had to do it all alone. 因为没有人帮助我，我不得不独立完成这项工作。 \n939. How much cloth does it take to make a skirt for the girl? 女孩做一条裙子要用多少布? \n940. With all these mouths to feed, he didn‘t know what to do. 由于有那么多人要供养，他不知道怎么办才好。 \n941. I forgot to prepare the speech I‘m supposed to give today. 我忘了准备今天的我该做的演讲了。 \n942. It's supposed to start at 6:30 sharp, but I doubt it will. 应该是六点半整的，但是我觉得够呛。 \n943. On behalf of my company, I would like to welcome you here. 我代表我们公司欢迎你来这里。 \n944. She's been quite different since coming back from America. 从美国回来之后，她变化很大。 \n945. Today it is common that women and girls make up in public. 今天，在公共场所看到妇女和姑娘化妆打扮是很普遍的事。 \n946. I have to transfer to No. ll bus, but where is the bus stop? 我需要换乘11 路公共汽车，但是汽车站在哪儿? \n947. I supposed him to be very clever but he was in fact a fool. 我以为他很聪明，其实他是个蠢货。 \n948. The rabbit ran to the woods and did not come back any more. 兔子跑进了森林再也没有出来了。\n","source":"_posts/english-900.md","raw":"---\ntitle: \"日常英语900\"\ndate: 2018-03-05 14:47:20 +08:00\ntags: english\n---\n\n1. I'm home. 我回来了。 \n2. I quit! 我不干了! \n3. Let go! 放手! \n4. Me too. 我也是。 \n5. My god! 天哪! \n6. No way! 不行! \n7. Come on. 来吧(赶快) \n8. Hold on. 等一等。 \n9. I agree。 我同意。 \n10. Not bad. 还不错。 \n11. Not yet. 还没。 \n12. See you. 再见。 \n13. Shut up! 闭嘴! \n14. So long. 再见。 \n15. Why not? 好呀! (为什么不呢?) \n16. Allow me. 让我来。 \n17. Be quiet! 安静点! \n18. Cheer up! 振作起来! \n19. Good job! 做得好! \n20. Have fun! 玩得开心! \n21. How much? 多少钱? \n22. I'm full. 我饱了。 \n23. I see. 我明白了。 \n24. I'm lost. 我迷路了。 \n25. My treat. 我请客。 \n26. So do I. 我也一样。 \n27. This way。 这边请。 \n28. After you. 您先。 \n29. Bless you! 祝福你! \n30. Follow me. 跟我来。 \n31. Forget it! 休想! (算了!) \n32. Good luck! 祝好运! \n33. I decline! 我拒绝! \n34. I promise. 我保证。 \n35. Of course! 当然了! \n36. Slow down! 慢点! \n37. Take care! 保重! \n38. They hurt. (伤口)疼。 \n39. Try again. 再试试。 \n40. Watch out! 当心。 \n41. What's up? 有什么事吗? \n42. Be careful! 注意! \n43. Bottoms up! 干杯(见底)! \n44. Don't move! 不许动! \n45. Guess what? 猜猜看? \n46. I doubt it 我怀疑。 \n47. I think so. 我也这么想。 \n48. I'm single. 我是单身贵族。 \n49. Keep it up! 坚持下去! \n50. Let me see. 让我想想。 \n51. Never mind. 不要紧。 \n52. No problem! 没问题! \n53. That's all! 就这样! \n54. Time is up. 时间快到了。 \n55. What's new? 有什么新鲜事吗? \n56. Count me on. 算上我。 \n57. Don't worry. 别担心。 \n58. Feel better? 好点了吗? \n59. I love you! 我爱你! \n60. I'm his fan. 我是他的影迷。 \n61. Is it yours? 这是你的吗? \n62. That's neat. 这很好。 \n63. Are you sure? 你肯定吗? \n64. Do I have to? 非做不可吗? \n65. He is my age. 他和我同岁。 \n66. Here you are. 给你。 \n67. No one knows. 没有人知道。 \n68. Take it easy. 别紧张。 \n69. What a pity! 太遗憾了! \n70. Any thing else? 还要别的吗? \n71. To be careful! 一定要小心! \n72. He came by train. 他乘火车来。\n73. Help yourself. 别客气。 \n74. I'm on a diet. 我在节食。 \n75. Keep in touch. 保持联络。 \n76. Time is money. 时间就是金钱。 \n77. Who's calling? 是哪一位? \n78. You did right. 你做得对。 \n79. You set me up! 你出卖我! \n80. Can I help you? 我能帮你吗? \n81. Enjoy yourself! 祝你玩得开心! \n82. Excuse me，Sir. 先生，对不起。 \n83. Give me a hand! 帮帮我! \n84. How's it going? 怎么样? \n85. I have no idea. 我没有头绪。 \n86. I just made it! 我做到了! \n87. I'll see to it. 我会留意的。 \n88. I'm in a hurry! 我在赶时间! \n89. It's her field. 这是她的本行。 \n90. It's up to you. 由你决定。 \n91. Just wonderful! 简直太棒了! \n92. What about you? 你呢? \n93. You owe me one. 你欠我一个人情。 \n94. You're welcome. 不客气。 \n95. Any day will do. 哪一天都行。 \n96. Are you kidding? 你在开玩笑吧! \n97. Congratulations! 祝贺你! \n98. I can't help it. 我情不自禁。 \n99. I don't mean it. 我不是故意的。 \n100. I'll fix you Up. 我会帮你打点的。 \n101. It sounds great! 听起来很不错。 \n102. It's a fine day. 今天是个好天。 \n103. So far，So good. 目前还不错。 \n104. What time is it? 几点了? \n105. You can make it! 你能做到! \n106. Control yourself! 克制一下! \n107. Do me a favor? 帮个忙，好吗? \n108. He is ill in bed. 他卧病在床。 \n109. He lacks courage. 他缺乏勇气。 \n110. How's everything? 一切还好吧? \n111. I have no choice. 我别无选择。 \n112. I like ice-cream. 我喜欢吃冰淇淋。 \n113. I love this game. 我钟爱这项运动。 \n114. I'll try my best. 我尽力而为。 \n115. I'm On your side. 我全力支持你。 \n116. Long time no see! 好久不见! \n117. No pain，no gain. 不劳无获。 \n118. Well，it depends. 噢，这得看情况。 \n119. We're all for it. 我们全都同意。 \n120. What a good deal! 真便宜! \n121. What should I do? 我该怎么办？ \n122. You asked for it! 你自讨苦吃! \n123. You have my word. 我保证。 \n124. Believe it or not! 信不信由你! \n125. Don't count on me. 别指望我。 \n126. Don't fall for it! 别上当! \n127. Don't let me down. 别让我失望。 \n128. Easy come easy go. 来得容易，去得快。 \n129. I beg your pardon. 请你原谅。 \n130. I beg your pardon? 请您再说一遍(我没有听清)。 \n131. I'll be back soon. 我马上回来。 \n132. I'll check it out. 我去查查看。 \n133. It's a long story. 说来话长。 \n134. It's Sunday today. 今天是星期天。 \n135. Just wait and see! 等着瞧! \n136. Make up your mind. 做个决定吧。 \n137. That's all I need. 我就要这些。 \n138. The view is great. 景色多么漂亮! \n139. The wall has ears. 隔墙有耳。 \n140. There comes a bus. 汽车来了。 \n141. What day is today? 今天星期几? \n142. What do you think? 你怎么认为？ \n143. Who told you that? 谁告诉你的? \n144. Who's kicking off? 现在是谁在开球? \n145. Yes，I suppose So. 是的，我也这么认为。 \n146. You can't miss it. 你一定能找到的。 \n147. Any messages for me? 有我的留言吗? \n148. Don't be so modest. 别谦虚了。 \n149. Don't give me that! 少来这套! \n150. He is a smart boy. 他是个小机灵鬼。 \n151. He is just a child. 他只是个孩子。 \n152. I can't follow you. 我不懂你说的。 \n153. I felt sort of ill. 我感觉有点不适。 \n154. I have a good idea! 我有一个好主意。 \n155. It is growing cool. 天气渐渐凉爽起来。 \n156. It seems all right. 看来这没问题。 \n157. It's going too far. 太离谱了。 \n158. May I use your pen? 我可以用你的笔吗? \n159. She had a bad cold. 她患了重感冒。 \n160. That's a good idea. 这个主意真不错。 \n161. The answer is zero. 白忙了。 \n162. What does she like? 她喜欢什么? \n163. As soon as possible! 越快越好! \n164. He can hardly speak. 他几乎说不出话来。 \n165. He always talks big. 他总是吹牛。 \n166. He won an election. 他在选举中获胜。 \n167. I am a football fan. 我是个足球迷。 \n168. If only I could fly. 要是我能飞就好了。 \n169. I'll be right there. 我马上就到。 \n170. I'll see you at six. 我六点钟见你。 \n171. IS it true or false? 这是对的还是错的? \n172. Just read it for me. 就读给我听好了。 \n173. Knowledge is power. 知识就是力量。 \n174. Move out of my way! 让开! \n175. Time is running out. 没时间了。 \n176. We are good friends. 我们是好朋友。 \n177. What's your trouble? 你哪儿不舒服? \n178. You did fairly well! 你干得相当不错1 \n179. Clothes make the man. 人要衣装。 \n180. Did you miss the bus? 你错过公共汽车了? \n181. Don't lose your head. 不要惊慌失措。 \n182. He can't take a joke. 他开不得玩笑。 \n183. He owes my uncle $100. 他欠我叔叔100 美元。 \n184. How are things going? 事情进展得怎样? \n185. How are you recently? 最近怎么样? \n186. I know all about it. 我知道有关它的一切。 \n187. It really takes time. 这样太耽误时间了。 \n188. It's against the law. 这是违法的。 \n189. Love me，love my dog. (谚语)爱屋及乌。 \n190. My mouth is watering. 我要流口水了。 \n191. Speak louder，please. 说话请大声点儿。 \n192. This boy has no job. 这个男孩没有工作。 \n193. This house is my own. 这所房子是我自己的。 \n194. What happened to you? 你怎么了? \n195. You are just in time. 你来得正是时候。 \n196. You need to workout. 你需要去运动锻炼一下。 \n197. Your hand feels cold. 你的手摸起来很冷。。 \n198. Don't be so childish. 别这么孩子气。 \n199. Don't trust to chance! 不要碰运气。 \n200. Fasten your seat belt. 系好你的安全带 \n201. He has a large income. 他有很高的收入。 \n202. He looks very healthy. 他看来很健康。 \n203. He paused for a reply. 他停下来等着·回答。 \n204. He repaired his house. 他修理了他的房子。 \n205. He suggested a picnic. 他建议搞一次野餐。 \n206. Here's a gift for you. 这里有个礼物送给你。 \n207. How much does it cost? 多少钱? \n208. I caught the last bus. 我赶上了最后一班车。 \n209. I could hardly speak. 我简直说不出话来。 \n210. I'll have to try that. 我得试试这么做。 \n211. I'm very proud of you. 我为你感到非常骄傲。 \n212. It doesn't make sense. 这没有意义(不合常理)。 \n213. Make yourself at home. 请不要拘礼。 \n214. My car needs washing. 我的车需要洗一洗。 \n215. None of your business! 与你无关! \n216. Not a sound was heard. 一点声音也没有。 \n217. That's always the case. 习以为常了。 \n218. The road divides here. 这条路在这里分岔。 \n219. Those are watermelons. 那些是西瓜。 \n220. What a nice day it is! 今天天气真好! \n221. What's wrong with you? 你哪里不对劲? \n222. You are a chicken. 你是个胆小鬼。 \n223. A lovely day，isn't it? 好天气，是吗? \n224. He is collecting money. 他在筹集资金。 \n225. He was born in New York. 他出生在纽约。 \n226. He was not a bit tired. 他一点也不累。 \n227. I will be more careful. 我会小心一些的， \n228. I will never forget it. 我会记着的。 \n229. It is Just what I need. 这正是我所需要的。 \n230. It rather surprised me. 那事使我颇感惊讶。 \n231. Just around the comer. 就在附近。 \n232. Just for entertainment. 只是为了消遣一下。 \n233. Let bygones be bygones. 过去的，就让它过去吧。 \n234. Mother doesn‘t make up. 妈妈不化妆。 \n235. Oh，you are kidding me. 哦，你别拿我开玩笑了。 \n236. She has been to school. 她上学去了。 \n237. Skating is interesting. 滑冰很有趣。 \n238. Supper is ready at six. 晚餐六点钟就好了。 \n239. That's a terrific idea! 真是好主意! \n240. What horrible weather! 这鬼天气! \n241. Which would you prefer? 你要选哪个? \n242. Does she like ice-cream? 她喜欢吃冰淇淋吗? \n243. First come first served. 先到先得。 \n244. Great minds think alike. 英雄所见略同。 \n245. He has a sense of humor. 他有幽默感。 \n246. He is acting an old man. 他正扮演一个老人。 \n247. He is looking for a job. 他正在找工作。 \n248. He doesn't care about me. 他并不在乎我。 \n249. I develop films myself. 我自己冲洗照片。 \n250. I felt no regret for it. 对这件事我不觉得后悔。 \n251. I get up at six o'clock. 我六点起床。 \n252. I meet the boss himself. 我见到了老板本人。 \n253. I owe you for my dinner. 我欠你晚餐的钱。 \n254. I really enjoyed myself. 我玩得很开心。 \n255. I'm fed up with my work! 我对工作烦死了! \n256. It's no use complaining. 发牢骚没什么用。 \n257. She's under the weather. 她心情·不好。 \n258. The child sobbed sadly. 小孩伤心地抽泣着。 \n259. The rumor had no basis. 那谣言没有·根据。 \n260. They praised him highly. 他们大大地表扬了他。 \n261. Winter is a cold season. 冬天是一个，寒冷的季节。 \n262. You can call me any time. 你可以随时打电话给我。 \n263. 15 divided by 3 equals 5. 15 除以3 等于5。 \n264. All for one，one for all. 我为人人，人人为我。 \n265. East,west，home is best. 金窝，银窝，不如自己的草窝。 \n266. He grasped both my hands. 他紧握住我的双手。 \n267. He is physically mature. 他身体己发育成熟。 \n268. I am so sorry about this. 对此我非常抱歉(遗憾)。 \n269. I can't afford a new car. 我买不起一部新车。 \n270. I do want to see him now. 我现在确实很想去见他。 \n271. I have the right to know. 我有权知道。 \n272. I heard some one laughing. 我听见有人在笑。 \n273. I suppose you dance much. 我想你常常跳舞吧。 \n274. I walked across the park. 我穿过了公园。 \n275. I'll just play it by ear. 我到时随机应变。 \n276. I'm not sure I can do it. 恐怕这事我干不了。 \n277. I'm not used to drinking. 我不习惯喝酒。 \n278. Is the cut still painful? 伤口还在痛吗? \n279. It's too good to be true! 好得难以置信。 \n280. Jean is a blue-eyed girl. 珍是个蓝眼睛的女孩。 \n281. Let's not waste our time. 咱们别浪费时间了。 \n282. May I ask some questions? 我可以问几个问题吗? \n283. Money is not everything. 金钱不是一切。 \n284. Neither of the men spoke. 两个人都没说过话。 \n285. Stop making such a noise. 别吵了。 \n286. That makes no difference. 没什么区别。 \n287. The price is reasonable. 价格还算合理。 \n288. They crowned him king. 他们拥立他为国王。 \n289. They're in red and white. 他们穿着红白相间的衣服。 \n290. We all desire happiness. 我们都想要幸福。 \n291. We just caught the plane. 我们刚好赶上了飞机。 \n292. What shall we do tonight? 我们今天晚上去干点儿什么呢? \n293. What's your goal in life. 你的人生目标是什么? \n294. When was the house built? 这幢房子是什么时候建造的? \n295. Why did you stay at home? 为什么呆在家里? \n296. Would you like some help? 今天真漂亮! \n297. You mustn‘t aim too high. 你不可好高骛远。 \n298. You're really killing me! 真是笑死我了! \n299. You've got a point there. 你说得挺有道理的。 \n300. Being criticized is awful! 被人批评真是痛苦! \n301. Did you enter the contest? 你参加比赛了吗? \n302. Do you accept credit cards? 你们收信用卡吗? \n303. Don't cry over spilt milk. 不要做无益的后悔。 \n304. Don't let chances pass by. 不要让机遇从我们身边溜走。 \n305. He owned himself defeated. 他承认自己失败了。 \n306. He seems at little nervous. 他显得有点紧张。 \n307. He strolls about the town. 他在镇上四处遛达。 \n308. Her tooth ached all night. 她牙疼了一整夜。 \n309. How about a drink tonight? 今晚喝一杯怎样? \n310. I can do nothing but that. 我只会做那件事。 \n311. I get hold of you at last. 我终于找到你了。 \n312. I have a surprise for you. 我有一个意想不到的东西给你看。 \n313. I like all kinds of fruit. 我喜欢各种各样的水果。 \n314. I saw it with my own eyes. 我亲眼所见。 \n315. I will arrange everything. 我会安排一切的。 \n316. I wish I knew my neighbor. 我很想认识我的邻居。 \n317. I would like to check out. 我想结帐。 \n318. It has be come much cooler. 天气变得凉爽多了。 \n319. It's time you went to bed. 你早就该睡觉了。 \n320. No spitting on the street. 禁止在大街上吐痰。 \n321. She was totally exhausted. 她累垮了。 \n322. Show your tickets，please. 请出示你的票。 \n323. Thank you for your advice. 谢谢你的建议。 \n324. That's the latest fashion. 这是最流行的款式。 \n325. The train arrived on time. 火车准时到达。 \n326. There go the house lights. 剧院的灯光灭了。 \n327. They are paid by the hour. 他们按时取酬。 \n328. Things are getting better. 情况正在好转。 \n329. Wake me up at five thirty. 请在五点半叫醒我。 \n330. We are all busy with work. 我们都忙于工作。 \n331. Where do you want to meet? 你想在哪儿见面? \n332. You can get what you want. 你能得到你想要的。 \n333. A barking dog doesn't bite! 吠犬不咬人。 \n334. Are you free this Saturday? 你这个星期六有空吗? \n335. Be careful not to fall ill. 注意不要生病了。 \n336. Being a mother is not easy. 做一个母亲是不容易的。 \n337. Brevity is the soul of wit. 简洁是智慧的精华。 \n338. Cancer is a deadly disease. 癌症是一种致命的疾病。 \n339. Did you fight with others? 你又和别人打架了吗? \n340. Don't dream away your time. 不要虚度光阴。 \n341. Don't keep me waiting long. 不要让我等得太久。 \n342. He has a remarkable memory. 他有惊人的记忆力。 \n343. He has completed the task. 他完成了这个任务。 \n344. He has quite a few friends. 他有不少的朋友。 \n345. He is capable of any crime. 他什么样的坏事都能干得出来。 \n346. He walks with a quick pace. 他快步走路。 \n347. He was not a little tired. 他很累。 \n348. His looks are always funny. 他的样子总是滑稽可笑。 \n349. How about going to a movie? 去看场电影怎么样? \n350. I think I've caught a cold. 我想我得了感冒。 \n351. I was taking care of Sally. 我在照顾萨莉。 \n352. I wish I lived in NEWYORK. 我希望住在纽约。 \n353. I'm very glad to hear that. 很高兴听你这样说。 \n354. I'm your lucky fellow then. 我就是你的幸运舞伴啦! \n355. It's none of your business! 这不关你的事儿! \n356. No littering on the campus. 在校园内不准乱丢废物。 \n357. She is a good-looking girl. 她是一个漂亮女孩。 \n358. She mended the broken doll. 她修补了破了的洋娃娃。 \n359. So I just take what I want. 那么我只拿我所需要的东西。 \n360. Spring is a pretty season， 春天是一个好季节。 \n361. The figure seems all Right. 数目看起来是对的。 \n362. The stars are too far away. 星星太遥远了。 \n363. The whole world knows that. 全世界都知道。 \n364. Tomorrow will be a holiday. 明天放假。 \n365. We walk on the garden path. 我们走在花园小径上。 \n366. What you need is just rest. 你需要的就是休息。 \n367. What‘s your favorite steps? 你最喜欢跳什么舞? \n368. You'd better let her alone. 你们最好是让她一个人呆会儿。 \n369. A lost chance never returns. 错过的机会永不再来。 \n370. Don't let this get you down. 不要为此灰心丧气。 \n371. He shot the lion with a gun. 他用枪把狮子打死了。 \n372. I don't think you are right. 我认为你是不对的。 \n373. I have never seen the movie. 我从未看过那部电影。 \n374. I haven't seen you for ages. 我好久没见到你了。 \n375. I was alone，but not lonely. 我独自一人，但并不觉得寂寞。 \n376. I went there three days ago. 我三天前去过那儿。 \n377. It's a friendly competition. 这是一场友谊赛。 \n378. It's very thoughtful of you. 你想得真周到。 \n379. May I speak to Lora，please? 我能和劳拉说话吗? \n380. Mr.Wang is fixing his bike. 王先生在修他的自行车。 \n381. My brother is see king a job. 我弟弟正在找工作。 \n382. Nancy will retire next year. 南希明年就退休了。 \n383. Neither you nor he is wrong. 你没错，他也没错。 \n384. Opportunity knocks but once. 机不可失，时不再来。 \n385. She dressed herself hastily. 她匆忙穿上衣服。 \n386. She hired a car by the hour. 她租了一辆按钟点计费的汽车。 \n387. Someone is ringing the bell. 有人在按门铃。 \n388. The Smiths are my neighbors. 史密斯一家是我的邻居。 \n389. These shoes don‘t fit right. 这双鞋不太合适。 \n390. This is only the first half. 这才是上半场呢。 \n391. This pen doesn‘t write well. 这钢笔不好写。 \n392. Would you like a cup of tea? 你想喝杯茶吗? \n393. You really look sharp today. 你今天真漂亮。 \n394. Another cat came to my house. 又有一只猫来到我家了。 \n395. Check your answers with mine. 把你的答案跟我的核对一下。 \n396. Don't keep the truth from me. 别瞒着我事实真相。 \n397. Everything has its beginning. 凡事都有开端。 \n398. He came to the point at once. 他一下子就说到了点子上。 \n399. He fell behind with his work. 他工作落后了。 \n400. He is the happiest man alive. 他是世界上最快乐的人。 \n401. He neither smokes nor drinks. 他既不抽烟也不喝酒。 \n402. He ran his horse up the hill. 他策马跑上小山。 \n403. He reminds me of his brother. 他使我想起了他的弟弟。 \n404. He was efficient in his work. 他工作效率高。 \n405. He will do anything but work. 只要不是干活，他干什么都行。 \n406. His father runs a restaurant. 他的父亲经营一家餐馆。 \n407. I have something to tell you. 我有事要告诉你。 \n408. I smelled a smell of cooking. 我闻到了烧菜做饭的味道。 \n409. I want to see the film again. 我真想再看一遍。 \n410. I've got too much work to do. 我要做的工作太多了。 \n411. Let's go for a walk，shall we? 咱们出去走走，好吗? \n412. Please let me check the bill. 请让我核对一下帐单。 \n413. Plenty of sleep is healthful. 充足的睡眠有益于健康。 \n414. The sun comes up in the east. 太阳从东方升起。 \n415. This is because we feel pain. 这是因为我们能感到疼痛。 \n416. What do you desire me to do? 你想要我做什么? \n417. What you said was quite true. 你所说的完全符合事实。 \n418. You can either stay or leave. 你或者留下或者离开。 \n419. Your life is your own affair. 你的生活是你自己的事。 \n420. All that glitters is not gold. 发闪光的不全是黄金。 \n421. Are you going to have a party? 你要举行聚会吗? \n422. Aren't you concerned about it? 难道你不担心吗? \n423. Don't forget to keep in touch. 别忘了保持联系。 \n424. He broke his words once again. 他又一次违背了诺言。 \n425. He is in his everyday clothes. 他穿着平常的衣服。 \n426. He is taller than I by ahead. 他比我高一头。 \n427. He led them down the mountain. 他带他们下山。 \n428. He was trained to be a lawyer. 他被培养成一名律师。 \n429. I am afraid that l have to go. 我要走了。 \n430. I don't have any cash with me. 我身上没带现金。 \n431. I have been putting on weight. 我开始发胖了。 \n432. I have just finished the book. 我刚刚读完这本书。 \n433. I was late for work yesterday， 我昨天上班迟到了。 \n434. It appears to be a true story. 这故事似乎是真的。 \n435. I've got to start working out. 我必须开始做健身运动了。 \n436. Japan is to the east of China. 日本在中国的东部。 \n437. John asked Grace to marry him， 约翰向格雷斯求婚。 \n438. My watch is faster than yours. 我的表比你的表快。 \n439. New China was founded in l949. 1949 年新中国成立。 \n440. Thanks for your flattering me. 多谢你的夸奖。 \n441. They charged the fault on him. 他们把过失归咎于他。 \n442. This car is in good condition. 这车性能很好。 \n443. This work itself is very easy. 这件工作本身很容易。 \n444. Truth is the daughter of time. 时间见真理。 \n445. We look forward to your visit. 期待您的光临。 \n446. What do you think of this one? 您觉得这个怎么样子 \n447. What's the weather like to day? 今天天气怎么样? \n448. A red tie will match that suit. 红领带会配那件衣服。 \n449. A wet road is usually slippery. 潮湿的路往往是滑的。 \n450. Example is better than precept. 身教胜于言传。 \n451. Go right back to the beginning. 直接回到起始位置。 \n452. He does everything without aim. 他做事都漫无目标。 \n453. He is respectful to his elders. 他对长辈很恭敬。 \n454. He knows English better than I. 他比我懂英语。 \n455. He resolved to give up smoking. 他决心戒烟。 \n456. His talk covered many subjects. 他的报告涉及很多课题。 \n457. I fear that he drinks too much. 我担心他喝的酒太多了。 \n458. I have my hair cut every month. 我每个月都理发。 \n459. I want to have a part-time job. 我想有一份兼职工作。 \n460. I'm sorry to have bothered you. 对不起，打扰你了。 \n461. It is not so easy as you think. 这事没有你想象的那么简单。 \n462. Keep your temper under control. 不要发脾气。 . \n463. Lying and stealing are immoral. 说谎和偷窃都是不道德的。 \n464. My efforts resulted in nothing. 我的努力毫无结果。 \n465. My false teeth are stuck to it. 我的假牙还在上边呢! \n466. She is a composer for the harp. 她是位写竖琴曲的作曲家 \n467. Take me to the airport，please. 请送我去机场。 \n468. Talking with you is a pleasure. 和你谈话很愉快 \n469. The eggs are sold by the dozen. 鸡蛋按打卖。 \n470. The price just covers the cost. 这个价格正好抵消成本。 \n471. The sweater is of good quality. 这件毛衣质地很好。 \n472. The teacher got a little angry. 老师有点生气了。 \n473. Think carefully before you act. 三思而后行。 \n474. Walt invented the steam engine. 瓦特发明了蒸汽机。 \n475. We are divided in our opinions. 我们意见分歧。 \n476. What ever I said，he‘d disagree. 不论我说什么他都不同意。 \n477. Who ever comes will be welcomed. 来的人我们都欢迎。 \n478. You look as if you didn‘t care. 你看上去好像满不在乎。 \n479. You should look at it yourself. 你应该亲自看看它。 \n480. Draw your chair up to the table. 把你的椅子拉到桌子旁边来。 \n481. He covered himself with a quilt. 他给自己盖上一条被。 \n482. He found my lecture interesting. 他觉得我讲课有趣。 \n483. He had a good many friends here. 他在这儿有很多朋友。 \n484. He is only about five feet high. 他大概只有五英尺高。 \n485. Her family are all music lovers. 她全家人都是音乐爱好者。 \n486. I am busy.How is your business? 我很忙。你的生意做得怎样? \n487. I don't think much of the movie. 我认为那电影不怎么样。 \n488. I feel like eating an ice-cream. 我想吃一个冰淇淋。 \n489. I found him seated on the bench. 我发现他在椅子上坐着 \n490. I gave much time to the old car. 我在这辆破车上花了不少时间。 \n491. I lost the door key about here. 我在这附近掉了门钥匙。 \n492. I'm not guessing，I really know. 我不是在猜想，我真的知道。 \n493. It's time to tell her the truth. 是该告诉她真相的时候了。 \n494. Let's watch TV with a candle on. 咱们点上蜡烛看电视吧。 \n495. Most games cost about that much. 大部分游戏差不多都是这个价钱。 \n496. My parents want me to go abroad. 我父母想让我出国。 \n497. She has been collecting stamps. 她一直收集邮票。 \n498. There are many stars in the sky. 天上有很多星星。 \n499. We get to London this afternoon. 我们是今天下午到达伦敦的。 \n500. What about having a pizza first? 先吃点比萨饼怎么样? \n501. You'd better look before you leap. 你最好三思而后行。 \n502. You know what I'm talking about. 我想你知道我在说什么。 \n503. He has been sick for three weeks. 他已经病了几周了。 \n504. He inspected the car for defects. 他详细检查车子有无效障。 \n505. I count you as one of my friends 我把你算作我的一个朋友。 \n506. I go to school by bike every day. 我每天骑自行车上学。 \n507. I have a large collection of CDs. 我收集了很多唱片。 \n508. I won't be able to see him today. 今天我不可能去看他。 \n509. I'll call a taxi in case of need. 如果需要的话，我会叫出租车的。 \n510. Is there any sugar in the bottle? 瓶子里还有糖吗? \n511. It's a secret between you and me. 这是你我之间的秘密。 \n512. It's very kind of you to help me. 你帮助我真是太好了。 \n513. Let's divide the cake into three. 我们将蛋糕分成三份吧。 \n514. Patience is a mark of confidence. 耐心是自信心的一种表现。 \n515. Susan is going to finish college. 苏珊将完成大学学业。 \n516. That is my idea about friendship. 这是我关于友谊的看法。 \n517. The book you ask for is sold out. 你要的那本书已经售完了。 \n518. The boy was too nervous to speak. 那男孩紧张得说不出话来。 \n519. The play may begin at any moment. 戏随时都有可能开始。 \n520. The salve will heal slight burns. 这种药膏能治疗轻微烧伤。 \n521. The sea sparkled in the sunlight. 阳光下，大海波光粼粼。 \n522. The teacher tested us in English. 老师用英文考我们。 \n523. There is a bridge over the river. 河上有一座桥。 \n524. They rode their respective bikes. 他们各自骑着自己的自行车。 \n525. They will arrive in half an hour. 他们将于半小时之内到达。 \n526. Time is more valuable than money. 时间比金钱宝贵。 \n527. We are all in favor of this plan. 我们都赞同这项计划。 \n528. We reached London this afternoon. 我们是今天下午到达伦敦的。 \n529. We two finished a bottle of wine. 我俩喝完了一瓶酒。 \n530. what a lovely little girl she is! 她是一个多么可爱的小女孩耶! \n531. Will you pick me up at my place? 你能到我的住处来接我吗? \n532. You may choose whatever you like. 你可以喜欢什么就选什么。 \n533. You're suffering from an allergy? 你过敏吗? \n534. Beyond all questions you are right. 毫无疑问，你是对的。 \n535. But I plan to weed the yard today. 我计划今天除院子里的草。 \n536. But who will do all the house work? 但是这些家务活谁来做呢? \n537. Close the door after you，please. 请随手关门。 \n538. Come to see me whenever you like. 你可以随时来见我。 \n539. Don't pull the chairs about,boys! 不要把椅子拖来拖去，孩子们! \n540. He drives more carefully than you. 他开车比你小心。 \n541. He invited me to dinner yesterday. 他昨天请我吃晚饭了。 \n542. He struck his attacker on the ear. 他打了那个攻击者一耳光。 \n543. He suddenly appeared in the party. 他突然在晚会上出现了。 \n544. Her handbag goes with her clothes. 她的手袋和她的衣服很搭配。 \n545. Here we are. Row M, seats l and 3. 哦，到了。M 排，l 号和3 号。 \n546. His boss might get angry with him. 他的老板也许会生他的气。 \n547. I expect to be there this evening. 我打算今天晚上到那儿去。 \n548. I really need to lose some weight. 我真的需要减肥了。 \n549. I think you have the Wrong number. 我想你打错号码了。 \n550. I would rather stay at home alone. 我宁愿独自呆在家。 \n551. I'd like to look at some sweaters. 我想看看毛衣。 \n552. Its origin is still a mystery now. 它的起源至今仍是个谜。 \n553. Money is no more than our servant. 金钱不过是我们的仆人。 \n554. Once you begin，you must continue. 一旦开始，你就得继续。 \n555. She is poor but quite respectable. 她虽穷，人品却很端正。 \n556. She spent a lot of money on books. 她花了很多钱来买书。 \n557. The girl in red is his girlfriend. 穿红衣服的那个女孩是他的女朋友。 \n558. There is a chair below the window. 窗户下面有一把椅子。 \n559. They employed him as a consultant. 他们雇用他为顾问。 \n560. To be honest with you，I‘m twenty. 老实说，我20 岁。 \n561. We often call him by his nickname. 我们经常叫他的绰号。 \n562. Will you be free tomorrow evening? 你明晚有空吗? \n563. Would you like to leave a message? 你要留话吗? \n564. You can never turn the clock back. 时光不能倒流。 \n565. You may as well tell me the truth. 你还是把事实告诉我为好。 \n566. Are your grandparents still living? 你的祖父母还在么? \n567. Can you recognize that woman，Mary? 你能认出那个女人是谁了吗，玛丽? \n568. Do you have any suggestions for me? 你对我有什么建议么? \n569. He is tough，but I am even tougher. 他是一个硬汉子，不过我要比他更硬。 \n570. He made his way through the forest. 他设法穿过了森林。 \n571. He suggests you leave here at once. 他建议你立刻离开这儿。 \n572. He was married to a friend of mine. 他和我的一个朋友结了婚。 \n573. He will blame you for carelessness. 他会责备你的粗心大意。 \n574. I can give you a number of excuses. 我可以给你说出很多韵理由。 \n575. I don‘t doubt that he will help me. 我不怀疑他会援助我。 \n576. I hope you enjoy your stay with us. 希望您在这儿过的愉快。 \n577. I'd like to-repair our differences. 我愿意消除一下我们之间的分歧。 \n578. It's nothing to be surprised about. 这事不值得大惊小怪。 \n579. It's rude to stare at other people. 盯着别人看是不礼貌的。 \n580. Bob has always had a crush on Lucy. 鲍伯一直在爱着露茜。 \n581. Let's take a short break for lunch. 让我们休息一会儿，去吃午饭。 \n582. Linda speaks as if she were a boss. 琳达说话总好象她是老板。 \n583. She became more and more beautiful. 她变得越来越漂亮了。 \n584. Suppose it rains,what shall we do? 万一下雨，我们该怎么办? \n585. The book is protected by copyright. 该书受版权保护。 \n586. The ice is hard enough to skate on. 冰已经厚得可以划冰了。 \n587. The price includes postage charges. 价格包括邮资在内。 \n588. This is a little something for you. 这是我给你们的一点心意。 \n589. What he likes best is making jokes. 他最喜欢开玩笑。 \n590. Who but Jack would do such a thing? 除了杰克谁会做这种事呢? \n591. You should have a mind of your own. 你必须有自己的主见。 \n592. You will soon get used to the work. 你很快就会习惯于这项工作的。 \n593. Columbus discovered America in l492. 哥伦布于1492 年发现了美洲。 \n594. God helps those who he1p themselves. 上帝帮助那些自己帮自己的人。 \n595. He has a nice sum of money put away. 他存了一大笔钱。 \n596. He is heavily insured against death. 他给自己投了巨额的人身保险。 \n597. He used to learn everything by rote. 他过去总是死记硬背。 \n598. He's a terrible man when he's angry. 他生气的时候很可怕。 \n599. I am on my way to the grocery store. 我正在去杂货店的路上 \n600. I am sick of always waiting. 我讨厌长时间等待。\n601. I appreciate John's helping in time. 我感谢约翰的及时帮助。 \n602. I bought it the day it was released. 它发行的当天我就买了。 \n603. I doubted whether the story is true. 我怀疑那故事是不是真的。 \n604. I learnt that I had passed the test. 我获悉我测验及格了。 \n605. I will seek from my doctor‘s advice. 我将请教医生的意见。 \n606. Ice cream is popular among children. 冰淇淋深受孩子们的欢迎。 \n607. I'd like to get this film developed. 我要冲洗这卷胶卷。 \n608. In a word，I am tired of everything. 总之，我对一切都很厌倦。 \n609. Let us do it by ourselves，will you? 我们自己做这件事，可以吗? \n610. May I know the quantity you require? 请问你们需要多少数量的货物? \n611. Nobody has ever solved this problem. 没有人曾解决过这个问题。 \n612. Our school covers 100 square meters. 我们学校占地面积平方米。 \n613. People enjoyed the stamps very much. 人们非常喜爱这些邮票。 \n614. The editor over looked a print error. 这位编辑漏掉了一个印刷错误。 \n615. The sudden barking frightened Clara. 突然的狗叫声吓坏了克拉拉。 \n616. The teams are coming onto the field. 队员们都进场了。 \n617. There is a mark of ink on his shirt. 他的衬衣上有一块墨迹。 \n618. There isn‘t any water in the bottle. 瓶子里一点水也没有。 \n619. This joke has gone a little too far. 这个玩笑开得有点-过分了。 \n620. We arrived in London this afternoon. 我们是今天下午到达伦敦的。 \n621. We can‘t go out because of the rain. 我们不能出去因为下雨了。 \n622. We should make good use of our time. 我们应该充分利用我们的时间。 \n623. We should save unnecessary expenses. 我们应节省不必要的开支。 \n624. You may have heard of Birth Control. 你们也许听说过控制人口出生的措施。 \n625. After a pause he continued his story. 停顿一下之后他继续说他的。 \n626. As you know, I am a very kind person. 你知道，我是个很和善的人。 \n627. He dare not tell us his evil conduct. 他不敢告诉我们他的恶行。 \n628. I can express myself in good English. 我可以用很好的英语来表达自己的观点。 \n629. I'll furnish my house with furniture. 我要为我的房子置办家具。 \n630. It seemed as if there was no way out. 看情形似乎没有出路了。 \n631. It's the hottest day I've had so far. 这是迄今为止我经历的最热的一天。 \n632. Mr. Smith is in charge of this class. 史密斯老师负责该班。 \n633. Mr. Smith taught English at a school. 史密斯先生在一所学校教英语。 \n634. None of us is afraid of difficulties. 我们当中没有一个人害怕困难。 \n635. Our school is in the east of Beijing. 我们学校在北京的东部。 \n636. She really wishes her clock had rung. 她真希望今天早上她的闹钟响了。 \n637. She teaches foreign students Chinese. 她教外国学生汉语。 \n638. The question will be settled tonight. 这个问题将在今晚解决。 \n639. The weight is too much for my height. 相对于我的身高来说，体重太重了! \n640. There are mice in Mrs. Lee‘s kitchen! 李太太的厨房里有老鼠! \n641. There is no one but hopes to be rich. 没有人不想发财。 \n642. There'll be some sport reviews on TV. 电视上会有一些体育评论。 \n643. This company is our regular customer. 这家公司是我们的老客户。 \n644. This is a good example of his poetry. 这是他诗作的一个好例子。 \n645. What we read influences our thinking. 我们所阅读的书本会影响我们的思想。 \n646. Words can't express what I felt then. 无法用语言形容我当时的感受。 \n647. You really have an ear for pop music. 你确实对流行音乐很有欣赏力。 \n648. A bad workman quarrels with his tools. 手艺差的工人总是抱怨工具不好使。 \n649. Can you adapt yourself to the new job? 你能适应新的工作吗? \n650. Does the computer ever make a mistake? 计算机出错吗? \n651. Don't be uneasy about the consequence. 不必为后果忧虑不安。 \n652. Even a child can answer this question. 即使小孩儿都能回答这个问题。 \n653. He has many strange ideas in his mind. 他脑子里尽足奇思怪想。 \n654. He is commonly supposed to be foolish. 他是公认的傻瓜。 \n655. He sat with his arms across the chest. 他双臂交叉于胸前的坐在那里。 \n656. He set up a fine example to all of us. 他为我们树立了一个好榜样。 \n657. His cake is four times as big as mine. 他的蛋糕是我的四倍大。 \n658. I do not care whether it rains or not. 我不管天会不会下雨。 \n659. I have a lot in common with my sister. 我和我姐姐有很多相同之处。 \n660. I haven't even touched your tooth yet. 我还没有碰到你的牙齿呢。 \n661. I'm looking forward to a prompt reply. 盼迅速答复。 \n662. It is an excellent novel in every way. 无论从哪方面来看，这都是一本优秀的小说。 \n663. It is clear that the cat has eaten it! 很明显，是猫偷吃的! \n664. Nothing but death can part the couple. 除了死之外，什么也拆不散这一对。 \n665. Now she looks pale as if she were ill. 现在她脸色难看，好像病了一样。 \n666. She was injured badly in the accident. 她在这次意外中受到重伤。 \n667. The secret was spread among the crowd. 秘密在人群当中传播开来。 \n668. The two brothers look very much alike. 这兄弟俩看上去很相像。 \n669. Their interest is listening to others. 他们的兴趣是听别人说话。 \n670. There was a notice in the supermarket. 超市里有一个布告。 \n671. This one cannot compare with that one. 这个与那个无法比较。 \n672. To know everything is to know nothing. 样样通，样样松。 \n673. To tell the truth, I don't like disco. 说实话，我不喜欢迪斯科。 \n674. True and False have opposite meanings. 真与假含义完全相反。 \n675. What's the point of going to college? 上大学有何用? \n676. Where can we make the insurance claim? 我们可以在哪里提出保险赔偿?这个无法与那个比较。 \n677. Why don't I pick you up at your house? 为什么不让我去接你呢? \n678. Why don't you attend an aerobic class? 你为什么不去参加一个有氧健身班呢? \n679. You can kill two birds with one stone. 一举两得。 \n680. You can't go in no matter who you are. 不管你是谁，都不能进去。 \n681. You should learn these words by heart. 你应该把这些词背熟。 \n682. Could I have those two tickets, please? 这两张票给我行不行? \n683. He has to take care of his sick mother. 他得照顾他生病的母亲。 \n684. He hired a workman to repair the fence. 他雇用了一个工人修理围墙。 \n685. I can't make this machine run properly. 我无法使这部机器正常运转。 \n686. I don't know if I'll have the patience. 我不知道我有没有耐心。 \n687. I don't like what you are saying. 我不喜欢你说的话。 \n688. I fell in love with her at first sight. 我第一眼见到她就爱上了她。 \n689. I have just heard from my sister, Mary. 我刚收到我妹妹玛丽的一封信。 \n690. If you would only try, you could do it. 只要你肯尝试，你一定能做这件事。 \n691. It is no use learning without thinking. 学而不思则惘。 \n692. It was a lazy, breezy autumn afternoon. 这是一个懒散的，起风的秋日下午。 \n693. Jack is the strongest boy in the class. 杰克是全班最强壮的男孩。 \n694. Please fetch a chair from another room. 请到别的房间取一把椅子。 \n695. The doctor began to operate on the boy. 医生开始给那个男孩动手术。 \n696. The doctor is taking my blood pressure. 医生正给我量血压。 \n697. The machines will not operate properly. 那些机器不能正常运转。 \n698. The students declared against cheating. 学生们表示反对作弊。 \n699. There is hope so long as he is with us. 只要他在就有希望。 \n700. He talks as if he were the head of the office. 他说话的口气像办公室主任似的。 \n701. His cake is three times bigger than mine. 他的蛋糕比我的大三倍。 \n702. I am looking forward to your early reply. 希望早日得到你的答复。 \n703. I could say nothing but that I was sorry. 我除了说“对不起”之外，什么也说不出来。 \n704. I don't know how to express my gratitude. 我不知道怎样来表达我的感激之情。 \n705. I have to catch a plane. Could you hurry? 我要赶飞机,你能快点吗? \n706. I haven't heard from her for a long time. 我好久没有她的消息了。 \n707. I would like to wash the clothes for you. 我愿意帮你洗这些衣服。 \n708. Let me see your driver's license, please. 请让我看看你的驾驶执照。 \n709. She goes to work every day except Sunday. 除星期天外，他每天去上班。 \n710. Take a seat please, make yourself at home. 请坐，随便一点。 \n711. The damage was caused by external forces. 损害是由外力引起的。 \n712. The doctor advised me to give up smoking. 医生建议我戒烟。 \n713. The flowers make the room more beautiful. 花使房间变得更加美了。 \n714. There is a good restaurant on the street. 那条大街上有一个很好的餐馆。 \n715. They covered 120 miles in a single night. 他们仅一夜就走了120 英里路。 \n716. Try to look on the bright side of things. 尽量从好的方面看。 \n717. What's your plan for the summer vacation? 你暑假打算干什么? \n718. You may pick whichever one you like best. 你可以挑你最喜欢的。 \n719. You're welcome to stay with us next time. 欢迎您下次再光临我们的饭店。 \n720. There was a murder in London yesterday. 昨天伦敦发生了一起谋杀案。 \n721. They stared at the huge tiger with awe. 他们敬畏地看着那头巨虎。 \n722. He never misses a chance to see a movie. 他从不错过看电影的机会。 \n723. I cannot put up with my noisy roommates. 我受不了我那些吵闹的室友了。 \n724. I will be back by the end of next month. 我下个月底会回来。 \n725. I'm good at freestyle and breast stroke. 我擅长自由泳和蛙泳。 \n726. It was your turn to wash them yesterday. 昨天轮到你把它们洗干净。 \n727. Let's go out to have a dinner, shall we? 咱们出去吃饭吧，好吗? \n728. Please push the ladder against the wall. 请把梯子靠在墙壁上。 \n729. She is standing in the front of the bus. 她站在公共汽车的前部。 \n730. The doctor asked me to watch what I eat. 医生要我注意饮食。 \n731. The grass is moist early in the morning. 清晨的草地湿漉漉的。 \n732. The test finished. We began our holiday. 考试结束了，我们开始放假。 \n733. This question is too complicated for me. 这个问题对我说来太复杂了。 \n734. Tony speaks English and he plays tennis. 托尼会说英语，打网球。 \n735. What is worth doing is worth doing well. 只要你觉得某事值得去做，就一定要把它做好。 \n736. Would you like to go to a party with me? 你想不想和我一起去参加一个聚会? \n737. All at once, a rabbit came out of a hole. 突然，一只兔子从一个洞中跑了出来。 \n738. All characters in the book are imaginary. 书中所有的人物都是虚构的。 \n739. Do you feel like going to that new disco? 你想去那个新开的迪厅 \n740. Ducks know how to swim when they are born. 鸭子天生会游泳 \n741. He spent most of his life gathering money. 他一生大部分时间用来积聚钱财。 \n742. He usually stays at home with his pet dog. 他通常跟他的爱犬待在家里。 \n743. How peaceful and beautiful the country is! 多么平静美丽的国家呀! \n744. I am told that you dance wonderfully well. 我听说你的舞跳得特棒。 \n745. I have had several conversations with him. 我已经和他谈过几次了。 \n746. It is the best film that I have ever seen. 这是我所看过的最好的电影。 \n747. It's only a party in honor of my birthday. 这只是为了庆祝我的生日而举行的晚会。 \n748. Learning English is like building a house. 学英语象盖房子。 \n749. Listening with your heart is good for you. 专心聆听别人说话对你有好处。 \n750. My grandpa died of hunger in the old days. 我爷爷在旧社会死于饥饿。 \n751. She feared staying alone in the farmhouse. 她害怕一个人留在农舍里。 \n752. She guided the tourists around the castle. 她引导旅游者参观了这座城堡。 \n753. She runs everyday in order to lose weight. 她每天都跑步是为了减肥。 \n754. She sang perfectly in the hall last night. 她昨晚在大厅唱得非常好。 \n755. Somebody is always complaining to others. 有人总是向别人抱怨。 \n756. They don't often have a bad day this year. 他们今年的运气还不错。 \n757. We regard the matter as nothing important. 我们认为这件事情不重要。 \n758. We'll take our holiday sometime in August. 我们将在八月份的某个时候休假。 \n759. Could you direct me to the station, please? 请问到车站怎么走? \n760. Have you cleared your luggage with customs? 你的行李通关了吗? \n761. He bothered me with a great many questions. 他对我提了一大堆问题，真烦! \n762. He does exercises every day in the morning. 他每天早上锻练身体。 \n763. How do I control myself? I can't calm down. 我怎能控制我自己?我无法冷静下来。 \n764. I dig songs and I like pop music very much. 我特别喜欢歌曲和流行音乐。 \n765. I'd like to cash a traveler's check please. 我想兑换旅行支票。 \n766. I‘d like to pick sea shells this afternoon. 今天下午我想去捡贝壳。 \n767. It's odd that they didn't reply our letter. 他们没有给我们回信，这真奇怪。 \n768. John seldom gets together with his friends. 约翰很少与朋友聚在一起。 \n769. Many people have been out of work recently. 最近有许多人失业。 \n770. Please give my best regards to your family. 请代我向你们全家致以最诚挚的问候。 \n771. Some people have compared books to friends. 有些人把书比作朋友。 \n772. The bat together with the balls was stolen. 球拍和球全被偷了。 \n773. The color of her dress suits her very well. 她衣服的颜色很适合她。 \n774. The days get longer and the nights get shorter. 白天变长了，黑夜变短了。 \n775. The dress doesn't fit her. She is too thin. 这件衣服不适合她，她太瘦了。 \n776. The examination put a lot of stress on him. 那次考试给了他很大的压力。 \n777. The mother sat the child at a little table. 母亲安排孩子坐到小桌旁。 \n778. There is some difference between the twins. 这对双胞胎有点儿不一样。 \n779. They insisted on staying rather than going. 他们坚持留下来，而不愿意走 \n780. Trust me, the game is really worth playing. 相信我，这游戏确实值得一玩。 \n781. Unlike her friends, she never gave up hope. 与她的朋友的不同之处是，她从不放弃希望。 \n782. Well done! You are always doing a good job! 干得不错!你总是干得很出色! \n783. We're planning a tour to Italy this summer. 我们计划今年夏天到意大利去旅行。 \n784. Were there any letters for me this morning? 今天早上有我的信吗? \n785. Why isn't Mrs. Lee‘s cat catching the mice? 李太太的猫为何不在抓这些老鼠呢? \n786. Your English is improving little by little. 你的英语正在渐渐提高。 \n787. Could you tell me where I can wash my hands? 请问洗手间怎么走? \n788. Do you have any plans for the long weekend? 有办法打发这个漫长的周末吗? \n789. He decided to bring a suit against his boss. 他决定起诉他的老板。 \n790. He devoted his life to the study of science. 他把毕生献给科学研究。 \n791. He had to choose between death and dishonor. 他不得不在死亡和耻辱之间选择。 \n792. His previous attempts had been unsuccessful. 他以前的尝试没有成功。 \n793. I determined that nothing should be changed. 我决定什么都不改变。 \n794. I don't think it will lead to a good result. 我认为这事不会有什么好结果。 \n795. I have 4 books and 2 magazines to check out. 我有4 本书和2 本杂志要借。 \n796. I think I've filled in everything correctly. 我想各项都填对了。 \n797. I'm not sure whether I have locked the door. 我没把握是否锁了门。 \n798. It took him a little time to fix that watch. 他很快就把表修理好了。 \n799. My father is at home looking for the ticket. 我爸爸正在家里找票呢! \n800. Not until last week did I get a work permit. 直到上周我才拿到工作许可证 \n801. She intends to make teaching her profession. 她想以教书为职业。 \n802. The letter \"x\" stands for an unknown number. 字母x 代表未知数。 \n803. The sight of the dead body scared him stiff. 看到尸体把他吓僵了。 \n804. There are lots of huge buildings in Beijing. 在北京有许多高大的建筑物。 \n805. There is an interesting film on Channel one. 在一频道有一部有趣的电影。 \n806. They plan to immigrate to Finland next year. 他们计划明年移居芬兰。 \n807. We enjoyed driving along the new expressway. 我们喜欢沿着新建的高速公路开车。 \n808. We need to cooperate perfectly to win the game. 要想赢得比赛，我们需要密切配合。 \n809. We need more than listening. We need action! 我们需要的不光是听得进意见，我们要的是行动。 \n810. Yes. I wouldn't go home early if I were you. 是的，如果我是你，我不会早回家。 \n811. Your answer is satisfying. I feel satisfied. 你的答案是令人满意的。我感到很满意。 \n812. Betty and Susan are talking on the telephone. 贝蒂和苏珊正在通电话。 \n813. Great efforts ensure the success of our work. 巨大的努力确保了我们工作的成功。 \n814. He has tasted the sweets and bitters of life. 他已尝遍了人生的甜酸苦辣。 \n815. He said he was educated in the United States. 他说他是在美国受的教育。 \n816. How do you like our English literature Prof? 你觉得我们的英国文学课的教授怎么样? \n817. I am looking forward to your visit next week. 我期待着你下周来访。 \n818. I feel I am the happiest person in the world. 我觉得自己是世界上最幸福的人了。 \n819. I had to sit up all night writing the report. 我不得不熬通宵写报告。 \n820. I hope we can see each other again some time. 希望还能有相见的机会。 \n821. I saw him playing football on the playground. 我看见他在操场上踢足球。 \n822. It is tomorrow that they will have a meeting. 就在明天(而不是在别的某一天)他们要开会。\n823. Let me tell you some details about clearance. 让我告诉你一些通关的细节。 \n824. The brain needs a continuous supply of blood. 大脑需要连续不断地供血。 \n825. The doctor's words made him feel comfortable. 医生的话让他感觉很舒服。 \n826. The truth is quite other than what you think. 事实真相和你所想的完全不同。 \n827. They stopped talking when their boss came in. 当老板进来的时候；他们停止了交谈。 \n828. They were glad of the examination being over. 他们为考试结束了而高兴。 \n829. This is by far the largest cake in the world. 这是目前世界上最大的蛋糕了。 \n830. Whichever you choose, you won't be satisfied. 不论你选择哪一个，你都不会满意。 \n831. Will you connect this wire to the television ? 你把这根电线和电视机连上好吗? \n832. His words are strongly impressed on my memory. 他的话深深地铭记在我的心头。 \n833. Is this the fight bus for the Capital Library? 这辆车到首都图书馆吗? \n834. One third of this area is covered with forest. 这一地区三分之一的地方都是森林。 \n835. They are arguing over who should pay the bill. 他们为谁应该付款而争论不休。 \n836. Wait a moment, I'll be with you in an instant. 等一下，我立刻就来。 \n837. You'll save time not waiting for the elevator. 你可以节省等电梯的时间。 \n838. A clear conscience laughs at false accusation. 只要问心无愧，无端的指责可以一笑置之。 \n839. I have a headache, and she has a stomachache. 我头疼，她胃疼。 \n840. He glared at Bill, ready to teach him a lesson. 他怒视着比尔，准备教训他一顿。 \n841. I assure you that you will feel no pain at all. 我保证你根本不会觉得疼的。 \n842. I can't afford to go to a restaurant every day. 每天都去餐馆吃饭，我真是支付不起。 \n843. I left at 6:00 so that I could catch the train. 我六点钟出门，以便赶上火车。 \n844. I'm afraid I have some rather bad news for you. 我恐怕有些很坏的消息要告诉你。 \n845. Learn to say the fight thing at the fight time. 学会在适当的时候说适当的话。 \n846. No wonder you can‘t sleep when you eat so much.  你吃这么多难怪睡不着。 \n847. Please ask her to call me back when she's back. 她回来时请让她给我回个电话。 \n848. There are a lot of people in the swimming pool. 游泳池里挤满了人。 \n849. They have to work hard to support their family. 他们必须努力工作来支持他们的家。 \n850. This way, he can kill two birds with one stone. 这样他就能两全其美。 \n851. We are all taking medicine against the disease. 我们都服药治疗疾病。 \n852. Would you please go to a dancing party with me? 请你跟我一起去参加一个舞会好吗? \n853. He usually drops in at my place on his way home. 他常常在回家的路上顺便来看看我。 \n854. His vanity was hurt by their talking so frankly. 他们坦率的谈话伤害了他的虚荣心。 \n855. How would you go to Beijing, by air or by train? 你怎样去北京，是乘飞机还是坐火车? \n856. I cannot express how glad I am to hear from him. 我无法表达我接到他的信时有多高兴。 \n857. If Tom cannot keep his promise, he'll lose face. 如果汤姆不能信守诺言，他就会丢面子。\n858. I'll still love her even if she doesn't love me. 即使她不爱我，我还仍然爱她。 \n859. I received an invitation, but I did not accept it. 我收到一份请帖，但没有接受。 \n860. If I were you, I would not be bothered by English. 如果我是你，就不会为英语烦恼了。 \n861. If you don't work, you will fail to pass the exam. 如果你不学习，你考试就会不及格。 \n862. I'm thinking of hanging the lamp from the ceiling. 我打算把灯吊在天花板上。 \n863. It is more important to be healthy than bony slim. 健康永远比皮包骨头好。 \n864. Long ago, people believed that the world was flat. 很久以前人们相信地球是平的。 \n865. Old tunes are sweetest and old friends are surest. 老调最甜美，老友最可靠。 \n866. She makes it clear that she doesn't like swimming. 她明确地表示她不喜欢游泳。 \n867. The constitution guards the liberty of the people. 宪法保护人民的自由。 \n868. The doctor examined the soldier's wound carefully. 大夫仔细检查了战士的伤口。 \n869. The harder I study, the better my English will be. 我越努力，我的英语就会越好。 \n870. The sun was shining and the sky was crystal clear. 阳光闪烁，天空湛蓝。 \n871. This cellar room is very damp in the rainy season. 这间地下室在雨季非常潮湿。 \n872. Computers are becoming a part of our everyday life. 电子计算机正渐渐成为我们日常生活的一部分。 \n873. Every man is fool sometimes, but none at all times. 每个人都有愚蠢的时候，但是没有一个人永远愚蠢。 \n874. He dreamed of traveling to remote South Sea Islands. 他曾梦想到遥远的南海诸岛去旅游。 \n875. How can I climb up that wall! I wish I were a bird! 我怎么能够爬得上那堵墙?我要是一只鸟就好了! \n876. However, Susan has not really made up her mind yet. 然而，苏珊却还没有决定。 \n877. I really think a little exercise would do you good. 我真的觉得做点运动对你有好处。 \n878. I will never forget the days that I spent with you. 我永远都不会忘记和你一起度过的日子。 \n879. we got a bad headache, and my nose is running. 我头痛得厉害，还流鼻涕。 \n880. Many young girls dream of being a fashion model. 许多年轻女孩梦想成为时装模特儿。 \n881. Most of the earth's surface is covered by water. 大部分的地球表面被水覆盖着。 \n882. Somebody's knocking at the door. I'll answer it. 有人在敲门，我去开。 \n883. The number 13 bus will take you to the hospital.13. 路车会带你去医院。 \n884. They celebrated his birthday with a dance party. 也们举办舞会来祝贺他的生日。 \n885. They misplaced this book under other categories. 他们把它错放到另一个类别去了。 \n886. They played a shameful part in the whole affair. 他们在这一事件中扮演了可耻的角色。 \n887. As a matter of fact, he was pretending to be ill. 实际上，他是在装病。 \n888. I will speak against anything I know to be wrong. 我会对所有我认为不对的事情直言不讳。\n889. In spite of the heavy rain, she went to the shop. 尽管下着大雨，她还是去了商店。 \n890. No matter what happened, he would not say a word. 不管发生什么事，他也不会说一句话。 \n891. No one knows the location of the hidden treasure. 谁也不知道藏宝地点在哪里。 \n892. The old lady enjoys a quiet life with her family. 老太太和她的家人安享宁静的生活。 \n893. The population of the city is close to a million. 这个城市的人口接近一百万。 \n894. We are prohibited from smoking on school grounds. 我们被禁止在校园内抽烟。 \n895. Growth, however, brings new problems and concerns. 不过，发展也带来了新的问题和顾虑。 \n896. He appears to be your friend but I doubt if he is. 他看上去像是你的朋友，但我怀疑他是否是真心的。 \n897. I am so full that I would burst with another bite. 我吃得如此之饱，我感觉我再吃一口肚子就要胀破了。 \n898. I have two cats. One is white, the other is black. 我有两只猫，一只是白猫，另一只是黑猫。 \n899. I'm sorry, these 2 books are 3 days overdue. 小姐，对不起，这两本书已经过期3 天了。 \n900. Jalu has forgotten falling off his bicycle. 詹露早忘掉他从白行车上摔下来这件事了 \n901. Manners are quite different from country to country. 各国的礼仪各不相同。 \n902. Not only did I know her, but I was her best friend. 我不仅认识她，还是她最好的朋友。 \n903. The best-known movie awards are the Academy Awards. 最著名的电影奖是奥斯卡金像奖。 \n904. We've got to do something about the neighbor's dog! 我们得对邻居的狗采取点行动了! \n905. Will you come and join us for dinner on Sunday? 星期天来和我们共进晚餐好吗? \n906. Do you think people are a company's greatest wealth? 你认为人是公司最大的财富吗? \n907. He thinks himself somebody, but we think him nobody. 他自以为是重要人物，但我们觉得他什么也不是。 \n908. I believe I haven't reached the summit of my career. 我相信我还没有达到事业的巅峰。 \n909. It is no matter whether you get there early or late. 你早到晚到都没有关系。 \n910. It's against the rules to handle the ball in soccer. 在足球中以手触球就是犯规。 \n911. The nurse assisted the doctor in the operating room. 护士在手术室协助医生动手术。 \n912. What I do on my own time is nobody else's business. 我在自己的时间里干什么根本不关别人的事。 \n913. What I want to do is different from those of others. 我想做的与别人不同。 \n914. You forget to write down the date of your departure. 您忘了写离店日期了。 \n915. “I wish I'd known about that rule earlier\", she said. “我要是早点知道这个规矩就好了!”她说。 \n916. Could you tell me your secret for a long, happy life? 你能告诉我长时间地过着快乐的生活的秘诀吗? \n917. He holds a position of great responsibility upon him. 他担任着一个责任重大的职务。 \n918. It is said he has secret love affairs with two women! 据说他背地里和两个女人有关系！ \n919. Number 13 buses run much more frequently, don't they? 13 路车跑得更勤，是不是? \n920. They are only too delighted to accept the invitation. 他们非常乐意接受邀请。 \n921. We are going to have the final examination next week. 我们下周举行期末考试。 \n922. And now medical care helps to keep people alive longer. 现在的医疗保健使得人们活得更长。 \n923. Do you think you'll be able to go to sleep fight away? 你认为你马上就能睡着吗? \n924. I am in charge of the company when the manager is out. 经理不在时山我来管理公司。 \n925. I borrowed a notebook from Tom and I lent it to Marry. 我从汤姆那儿借了一本笔记本，我又把它借给玛丽了。 \n926. I'm doing some washing and John is cooking dinner. 我正在洗衣服，约翰在做晚饭。 \n927. Were there any exciting incidents during your journey? 你们在旅行中有没有什么令人激动的事情? \n928. As far as policy is concerned, I have to say something. 谈到政策，我得说几句。 \n929. Could you tell me what the maximum weight allowance is? 您能告诉我行李的最大重量限额是多少吗? \n930. He came out of the library, a large book under his arm. 他夹着本厚书，走出了图书馆。 \n931. The brothers differ from each other in their interests. 这几个兄弟各有所好。 \n932. Although we can't see these atoms, they really do exist. 虽然我们看不见原子，但它们的确存在。 \n933. I am familiar with the casual atmosphere in the company. 我对公司中这种放松的氛围感到很熟悉。 \n934. Most people eat, write, and work with their fight hands. 大多数人吃饭，写字，工作都用右手。 \n935. Only by working hard can we succeed in doing everything. 只有努力，才能成功 \n936. Take it easy, you will be all right in a couple of days. 别担心，你两天之内就会痊愈的。 \n937. The Beatles represented part of the spirit of their age. 甲壳虫乐队代表了他们时代的部分精神。 \n938. There being no one to help me, I had to do it all alone. 因为没有人帮助我，我不得不独立完成这项工作。 \n939. How much cloth does it take to make a skirt for the girl? 女孩做一条裙子要用多少布? \n940. With all these mouths to feed, he didn‘t know what to do. 由于有那么多人要供养，他不知道怎么办才好。 \n941. I forgot to prepare the speech I‘m supposed to give today. 我忘了准备今天的我该做的演讲了。 \n942. It's supposed to start at 6:30 sharp, but I doubt it will. 应该是六点半整的，但是我觉得够呛。 \n943. On behalf of my company, I would like to welcome you here. 我代表我们公司欢迎你来这里。 \n944. She's been quite different since coming back from America. 从美国回来之后，她变化很大。 \n945. Today it is common that women and girls make up in public. 今天，在公共场所看到妇女和姑娘化妆打扮是很普遍的事。 \n946. I have to transfer to No. ll bus, but where is the bus stop? 我需要换乘11 路公共汽车，但是汽车站在哪儿? \n947. I supposed him to be very clever but he was in fact a fool. 我以为他很聪明，其实他是个蠢货。 \n948. The rabbit ran to the woods and did not come back any more. 兔子跑进了森林再也没有出来了。\n","slug":"english-900","published":1,"updated":"2018-11-06T12:47:29.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo6iq749000n51vhba593exr","content":"<ol>\n<li>I’m home. 我回来了。 </li>\n<li>I quit! 我不干了! </li>\n<li>Let go! 放手! </li>\n<li>Me too. 我也是。 </li>\n<li>My god! 天哪! </li>\n<li>No way! 不行! </li>\n<li>Come on. 来吧(赶快) </li>\n<li>Hold on. 等一等。 </li>\n<li>I agree。 我同意。 </li>\n<li>Not bad. 还不错。 </li>\n<li>Not yet. 还没。 </li>\n<li>See you. 再见。 </li>\n<li>Shut up! 闭嘴! </li>\n<li>So long. 再见。 </li>\n<li>Why not? 好呀! (为什么不呢?) </li>\n<li>Allow me. 让我来。 </li>\n<li>Be quiet! 安静点! </li>\n<li>Cheer up! 振作起来! </li>\n<li>Good job! 做得好! </li>\n<li>Have fun! 玩得开心! </li>\n<li>How much? 多少钱? </li>\n<li>I’m full. 我饱了。 </li>\n<li>I see. 我明白了。 </li>\n<li>I’m lost. 我迷路了。 </li>\n<li>My treat. 我请客。 </li>\n<li>So do I. 我也一样。 </li>\n<li>This way。 这边请。 </li>\n<li>After you. 您先。 </li>\n<li>Bless you! 祝福你! </li>\n<li>Follow me. 跟我来。 </li>\n<li>Forget it! 休想! (算了!) </li>\n<li>Good luck! 祝好运! </li>\n<li>I decline! 我拒绝! </li>\n<li>I promise. 我保证。 </li>\n<li>Of course! 当然了! </li>\n<li>Slow down! 慢点! </li>\n<li>Take care! 保重! </li>\n<li>They hurt. (伤口)疼。 </li>\n<li>Try again. 再试试。 </li>\n<li>Watch out! 当心。 </li>\n<li>What’s up? 有什么事吗? </li>\n<li>Be careful! 注意! </li>\n<li>Bottoms up! 干杯(见底)! </li>\n<li>Don’t move! 不许动! </li>\n<li>Guess what? 猜猜看? </li>\n<li>I doubt it 我怀疑。 </li>\n<li>I think so. 我也这么想。 </li>\n<li>I’m single. 我是单身贵族。 </li>\n<li>Keep it up! 坚持下去! </li>\n<li>Let me see. 让我想想。 </li>\n<li>Never mind. 不要紧。 </li>\n<li>No problem! 没问题! </li>\n<li>That’s all! 就这样! </li>\n<li>Time is up. 时间快到了。 </li>\n<li>What’s new? 有什么新鲜事吗? </li>\n<li>Count me on. 算上我。 </li>\n<li>Don’t worry. 别担心。 </li>\n<li>Feel better? 好点了吗? </li>\n<li>I love you! 我爱你! </li>\n<li>I’m his fan. 我是他的影迷。 </li>\n<li>Is it yours? 这是你的吗? </li>\n<li>That’s neat. 这很好。 </li>\n<li>Are you sure? 你肯定吗? </li>\n<li>Do I have to? 非做不可吗? </li>\n<li>He is my age. 他和我同岁。 </li>\n<li>Here you are. 给你。 </li>\n<li>No one knows. 没有人知道。 </li>\n<li>Take it easy. 别紧张。 </li>\n<li>What a pity! 太遗憾了! </li>\n<li>Any thing else? 还要别的吗? </li>\n<li>To be careful! 一定要小心! </li>\n<li>He came by train. 他乘火车来。</li>\n<li>Help yourself. 别客气。 </li>\n<li>I’m on a diet. 我在节食。 </li>\n<li>Keep in touch. 保持联络。 </li>\n<li>Time is money. 时间就是金钱。 </li>\n<li>Who’s calling? 是哪一位? </li>\n<li>You did right. 你做得对。 </li>\n<li>You set me up! 你出卖我! </li>\n<li>Can I help you? 我能帮你吗? </li>\n<li>Enjoy yourself! 祝你玩得开心! </li>\n<li>Excuse me，Sir. 先生，对不起。 </li>\n<li>Give me a hand! 帮帮我! </li>\n<li>How’s it going? 怎么样? </li>\n<li>I have no idea. 我没有头绪。 </li>\n<li>I just made it! 我做到了! </li>\n<li>I’ll see to it. 我会留意的。 </li>\n<li>I’m in a hurry! 我在赶时间! </li>\n<li>It’s her field. 这是她的本行。 </li>\n<li>It’s up to you. 由你决定。 </li>\n<li>Just wonderful! 简直太棒了! </li>\n<li>What about you? 你呢? </li>\n<li>You owe me one. 你欠我一个人情。 </li>\n<li>You’re welcome. 不客气。 </li>\n<li>Any day will do. 哪一天都行。 </li>\n<li>Are you kidding? 你在开玩笑吧! </li>\n<li>Congratulations! 祝贺你! </li>\n<li>I can’t help it. 我情不自禁。 </li>\n<li>I don’t mean it. 我不是故意的。 </li>\n<li>I’ll fix you Up. 我会帮你打点的。 </li>\n<li>It sounds great! 听起来很不错。 </li>\n<li>It’s a fine day. 今天是个好天。 </li>\n<li>So far，So good. 目前还不错。 </li>\n<li>What time is it? 几点了? </li>\n<li>You can make it! 你能做到! </li>\n<li>Control yourself! 克制一下! </li>\n<li>Do me a favor? 帮个忙，好吗? </li>\n<li>He is ill in bed. 他卧病在床。 </li>\n<li>He lacks courage. 他缺乏勇气。 </li>\n<li>How’s everything? 一切还好吧? </li>\n<li>I have no choice. 我别无选择。 </li>\n<li>I like ice-cream. 我喜欢吃冰淇淋。 </li>\n<li>I love this game. 我钟爱这项运动。 </li>\n<li>I’ll try my best. 我尽力而为。 </li>\n<li>I’m On your side. 我全力支持你。 </li>\n<li>Long time no see! 好久不见! </li>\n<li>No pain，no gain. 不劳无获。 </li>\n<li>Well，it depends. 噢，这得看情况。 </li>\n<li>We’re all for it. 我们全都同意。 </li>\n<li>What a good deal! 真便宜! </li>\n<li>What should I do? 我该怎么办？ </li>\n<li>You asked for it! 你自讨苦吃! </li>\n<li>You have my word. 我保证。 </li>\n<li>Believe it or not! 信不信由你! </li>\n<li>Don’t count on me. 别指望我。 </li>\n<li>Don’t fall for it! 别上当! </li>\n<li>Don’t let me down. 别让我失望。 </li>\n<li>Easy come easy go. 来得容易，去得快。 </li>\n<li>I beg your pardon. 请你原谅。 </li>\n<li>I beg your pardon? 请您再说一遍(我没有听清)。 </li>\n<li>I’ll be back soon. 我马上回来。 </li>\n<li>I’ll check it out. 我去查查看。 </li>\n<li>It’s a long story. 说来话长。 </li>\n<li>It’s Sunday today. 今天是星期天。 </li>\n<li>Just wait and see! 等着瞧! </li>\n<li>Make up your mind. 做个决定吧。 </li>\n<li>That’s all I need. 我就要这些。 </li>\n<li>The view is great. 景色多么漂亮! </li>\n<li>The wall has ears. 隔墙有耳。 </li>\n<li>There comes a bus. 汽车来了。 </li>\n<li>What day is today? 今天星期几? </li>\n<li>What do you think? 你怎么认为？ </li>\n<li>Who told you that? 谁告诉你的? </li>\n<li>Who’s kicking off? 现在是谁在开球? </li>\n<li>Yes，I suppose So. 是的，我也这么认为。 </li>\n<li>You can’t miss it. 你一定能找到的。 </li>\n<li>Any messages for me? 有我的留言吗? </li>\n<li>Don’t be so modest. 别谦虚了。 </li>\n<li>Don’t give me that! 少来这套! </li>\n<li>He is a smart boy. 他是个小机灵鬼。 </li>\n<li>He is just a child. 他只是个孩子。 </li>\n<li>I can’t follow you. 我不懂你说的。 </li>\n<li>I felt sort of ill. 我感觉有点不适。 </li>\n<li>I have a good idea! 我有一个好主意。 </li>\n<li>It is growing cool. 天气渐渐凉爽起来。 </li>\n<li>It seems all right. 看来这没问题。 </li>\n<li>It’s going too far. 太离谱了。 </li>\n<li>May I use your pen? 我可以用你的笔吗? </li>\n<li>She had a bad cold. 她患了重感冒。 </li>\n<li>That’s a good idea. 这个主意真不错。 </li>\n<li>The answer is zero. 白忙了。 </li>\n<li>What does she like? 她喜欢什么? </li>\n<li>As soon as possible! 越快越好! </li>\n<li>He can hardly speak. 他几乎说不出话来。 </li>\n<li>He always talks big. 他总是吹牛。 </li>\n<li>He won an election. 他在选举中获胜。 </li>\n<li>I am a football fan. 我是个足球迷。 </li>\n<li>If only I could fly. 要是我能飞就好了。 </li>\n<li>I’ll be right there. 我马上就到。 </li>\n<li>I’ll see you at six. 我六点钟见你。 </li>\n<li>IS it true or false? 这是对的还是错的? </li>\n<li>Just read it for me. 就读给我听好了。 </li>\n<li>Knowledge is power. 知识就是力量。 </li>\n<li>Move out of my way! 让开! </li>\n<li>Time is running out. 没时间了。 </li>\n<li>We are good friends. 我们是好朋友。 </li>\n<li>What’s your trouble? 你哪儿不舒服? </li>\n<li>You did fairly well! 你干得相当不错1 </li>\n<li>Clothes make the man. 人要衣装。 </li>\n<li>Did you miss the bus? 你错过公共汽车了? </li>\n<li>Don’t lose your head. 不要惊慌失措。 </li>\n<li>He can’t take a joke. 他开不得玩笑。 </li>\n<li>He owes my uncle $100. 他欠我叔叔100 美元。 </li>\n<li>How are things going? 事情进展得怎样? </li>\n<li>How are you recently? 最近怎么样? </li>\n<li>I know all about it. 我知道有关它的一切。 </li>\n<li>It really takes time. 这样太耽误时间了。 </li>\n<li>It’s against the law. 这是违法的。 </li>\n<li>Love me，love my dog. (谚语)爱屋及乌。 </li>\n<li>My mouth is watering. 我要流口水了。 </li>\n<li>Speak louder，please. 说话请大声点儿。 </li>\n<li>This boy has no job. 这个男孩没有工作。 </li>\n<li>This house is my own. 这所房子是我自己的。 </li>\n<li>What happened to you? 你怎么了? </li>\n<li>You are just in time. 你来得正是时候。 </li>\n<li>You need to workout. 你需要去运动锻炼一下。 </li>\n<li>Your hand feels cold. 你的手摸起来很冷。。 </li>\n<li>Don’t be so childish. 别这么孩子气。 </li>\n<li>Don’t trust to chance! 不要碰运气。 </li>\n<li>Fasten your seat belt. 系好你的安全带 </li>\n<li>He has a large income. 他有很高的收入。 </li>\n<li>He looks very healthy. 他看来很健康。 </li>\n<li>He paused for a reply. 他停下来等着·回答。 </li>\n<li>He repaired his house. 他修理了他的房子。 </li>\n<li>He suggested a picnic. 他建议搞一次野餐。 </li>\n<li>Here’s a gift for you. 这里有个礼物送给你。 </li>\n<li>How much does it cost? 多少钱? </li>\n<li>I caught the last bus. 我赶上了最后一班车。 </li>\n<li>I could hardly speak. 我简直说不出话来。 </li>\n<li>I’ll have to try that. 我得试试这么做。 </li>\n<li>I’m very proud of you. 我为你感到非常骄傲。 </li>\n<li>It doesn’t make sense. 这没有意义(不合常理)。 </li>\n<li>Make yourself at home. 请不要拘礼。 </li>\n<li>My car needs washing. 我的车需要洗一洗。 </li>\n<li>None of your business! 与你无关! </li>\n<li>Not a sound was heard. 一点声音也没有。 </li>\n<li>That’s always the case. 习以为常了。 </li>\n<li>The road divides here. 这条路在这里分岔。 </li>\n<li>Those are watermelons. 那些是西瓜。 </li>\n<li>What a nice day it is! 今天天气真好! </li>\n<li>What’s wrong with you? 你哪里不对劲? </li>\n<li>You are a chicken. 你是个胆小鬼。 </li>\n<li>A lovely day，isn’t it? 好天气，是吗? </li>\n<li>He is collecting money. 他在筹集资金。 </li>\n<li>He was born in New York. 他出生在纽约。 </li>\n<li>He was not a bit tired. 他一点也不累。 </li>\n<li>I will be more careful. 我会小心一些的， </li>\n<li>I will never forget it. 我会记着的。 </li>\n<li>It is Just what I need. 这正是我所需要的。 </li>\n<li>It rather surprised me. 那事使我颇感惊讶。 </li>\n<li>Just around the comer. 就在附近。 </li>\n<li>Just for entertainment. 只是为了消遣一下。 </li>\n<li>Let bygones be bygones. 过去的，就让它过去吧。 </li>\n<li>Mother doesn‘t make up. 妈妈不化妆。 </li>\n<li>Oh，you are kidding me. 哦，你别拿我开玩笑了。 </li>\n<li>She has been to school. 她上学去了。 </li>\n<li>Skating is interesting. 滑冰很有趣。 </li>\n<li>Supper is ready at six. 晚餐六点钟就好了。 </li>\n<li>That’s a terrific idea! 真是好主意! </li>\n<li>What horrible weather! 这鬼天气! </li>\n<li>Which would you prefer? 你要选哪个? </li>\n<li>Does she like ice-cream? 她喜欢吃冰淇淋吗? </li>\n<li>First come first served. 先到先得。 </li>\n<li>Great minds think alike. 英雄所见略同。 </li>\n<li>He has a sense of humor. 他有幽默感。 </li>\n<li>He is acting an old man. 他正扮演一个老人。 </li>\n<li>He is looking for a job. 他正在找工作。 </li>\n<li>He doesn’t care about me. 他并不在乎我。 </li>\n<li>I develop films myself. 我自己冲洗照片。 </li>\n<li>I felt no regret for it. 对这件事我不觉得后悔。 </li>\n<li>I get up at six o’clock. 我六点起床。 </li>\n<li>I meet the boss himself. 我见到了老板本人。 </li>\n<li>I owe you for my dinner. 我欠你晚餐的钱。 </li>\n<li>I really enjoyed myself. 我玩得很开心。 </li>\n<li>I’m fed up with my work! 我对工作烦死了! </li>\n<li>It’s no use complaining. 发牢骚没什么用。 </li>\n<li>She’s under the weather. 她心情·不好。 </li>\n<li>The child sobbed sadly. 小孩伤心地抽泣着。 </li>\n<li>The rumor had no basis. 那谣言没有·根据。 </li>\n<li>They praised him highly. 他们大大地表扬了他。 </li>\n<li>Winter is a cold season. 冬天是一个，寒冷的季节。 </li>\n<li>You can call me any time. 你可以随时打电话给我。 </li>\n<li>15 divided by 3 equals 5. 15 除以3 等于5。 </li>\n<li>All for one，one for all. 我为人人，人人为我。 </li>\n<li>East,west，home is best. 金窝，银窝，不如自己的草窝。 </li>\n<li>He grasped both my hands. 他紧握住我的双手。 </li>\n<li>He is physically mature. 他身体己发育成熟。 </li>\n<li>I am so sorry about this. 对此我非常抱歉(遗憾)。 </li>\n<li>I can’t afford a new car. 我买不起一部新车。 </li>\n<li>I do want to see him now. 我现在确实很想去见他。 </li>\n<li>I have the right to know. 我有权知道。 </li>\n<li>I heard some one laughing. 我听见有人在笑。 </li>\n<li>I suppose you dance much. 我想你常常跳舞吧。 </li>\n<li>I walked across the park. 我穿过了公园。 </li>\n<li>I’ll just play it by ear. 我到时随机应变。 </li>\n<li>I’m not sure I can do it. 恐怕这事我干不了。 </li>\n<li>I’m not used to drinking. 我不习惯喝酒。 </li>\n<li>Is the cut still painful? 伤口还在痛吗? </li>\n<li>It’s too good to be true! 好得难以置信。 </li>\n<li>Jean is a blue-eyed girl. 珍是个蓝眼睛的女孩。 </li>\n<li>Let’s not waste our time. 咱们别浪费时间了。 </li>\n<li>May I ask some questions? 我可以问几个问题吗? </li>\n<li>Money is not everything. 金钱不是一切。 </li>\n<li>Neither of the men spoke. 两个人都没说过话。 </li>\n<li>Stop making such a noise. 别吵了。 </li>\n<li>That makes no difference. 没什么区别。 </li>\n<li>The price is reasonable. 价格还算合理。 </li>\n<li>They crowned him king. 他们拥立他为国王。 </li>\n<li>They’re in red and white. 他们穿着红白相间的衣服。 </li>\n<li>We all desire happiness. 我们都想要幸福。 </li>\n<li>We just caught the plane. 我们刚好赶上了飞机。 </li>\n<li>What shall we do tonight? 我们今天晚上去干点儿什么呢? </li>\n<li>What’s your goal in life. 你的人生目标是什么? </li>\n<li>When was the house built? 这幢房子是什么时候建造的? </li>\n<li>Why did you stay at home? 为什么呆在家里? </li>\n<li>Would you like some help? 今天真漂亮! </li>\n<li>You mustn‘t aim too high. 你不可好高骛远。 </li>\n<li>You’re really killing me! 真是笑死我了! </li>\n<li>You’ve got a point there. 你说得挺有道理的。 </li>\n<li>Being criticized is awful! 被人批评真是痛苦! </li>\n<li>Did you enter the contest? 你参加比赛了吗? </li>\n<li>Do you accept credit cards? 你们收信用卡吗? </li>\n<li>Don’t cry over spilt milk. 不要做无益的后悔。 </li>\n<li>Don’t let chances pass by. 不要让机遇从我们身边溜走。 </li>\n<li>He owned himself defeated. 他承认自己失败了。 </li>\n<li>He seems at little nervous. 他显得有点紧张。 </li>\n<li>He strolls about the town. 他在镇上四处遛达。 </li>\n<li>Her tooth ached all night. 她牙疼了一整夜。 </li>\n<li>How about a drink tonight? 今晚喝一杯怎样? </li>\n<li>I can do nothing but that. 我只会做那件事。 </li>\n<li>I get hold of you at last. 我终于找到你了。 </li>\n<li>I have a surprise for you. 我有一个意想不到的东西给你看。 </li>\n<li>I like all kinds of fruit. 我喜欢各种各样的水果。 </li>\n<li>I saw it with my own eyes. 我亲眼所见。 </li>\n<li>I will arrange everything. 我会安排一切的。 </li>\n<li>I wish I knew my neighbor. 我很想认识我的邻居。 </li>\n<li>I would like to check out. 我想结帐。 </li>\n<li>It has be come much cooler. 天气变得凉爽多了。 </li>\n<li>It’s time you went to bed. 你早就该睡觉了。 </li>\n<li>No spitting on the street. 禁止在大街上吐痰。 </li>\n<li>She was totally exhausted. 她累垮了。 </li>\n<li>Show your tickets，please. 请出示你的票。 </li>\n<li>Thank you for your advice. 谢谢你的建议。 </li>\n<li>That’s the latest fashion. 这是最流行的款式。 </li>\n<li>The train arrived on time. 火车准时到达。 </li>\n<li>There go the house lights. 剧院的灯光灭了。 </li>\n<li>They are paid by the hour. 他们按时取酬。 </li>\n<li>Things are getting better. 情况正在好转。 </li>\n<li>Wake me up at five thirty. 请在五点半叫醒我。 </li>\n<li>We are all busy with work. 我们都忙于工作。 </li>\n<li>Where do you want to meet? 你想在哪儿见面? </li>\n<li>You can get what you want. 你能得到你想要的。 </li>\n<li>A barking dog doesn’t bite! 吠犬不咬人。 </li>\n<li>Are you free this Saturday? 你这个星期六有空吗? </li>\n<li>Be careful not to fall ill. 注意不要生病了。 </li>\n<li>Being a mother is not easy. 做一个母亲是不容易的。 </li>\n<li>Brevity is the soul of wit. 简洁是智慧的精华。 </li>\n<li>Cancer is a deadly disease. 癌症是一种致命的疾病。 </li>\n<li>Did you fight with others? 你又和别人打架了吗? </li>\n<li>Don’t dream away your time. 不要虚度光阴。 </li>\n<li>Don’t keep me waiting long. 不要让我等得太久。 </li>\n<li>He has a remarkable memory. 他有惊人的记忆力。 </li>\n<li>He has completed the task. 他完成了这个任务。 </li>\n<li>He has quite a few friends. 他有不少的朋友。 </li>\n<li>He is capable of any crime. 他什么样的坏事都能干得出来。 </li>\n<li>He walks with a quick pace. 他快步走路。 </li>\n<li>He was not a little tired. 他很累。 </li>\n<li>His looks are always funny. 他的样子总是滑稽可笑。 </li>\n<li>How about going to a movie? 去看场电影怎么样? </li>\n<li>I think I’ve caught a cold. 我想我得了感冒。 </li>\n<li>I was taking care of Sally. 我在照顾萨莉。 </li>\n<li>I wish I lived in NEWYORK. 我希望住在纽约。 </li>\n<li>I’m very glad to hear that. 很高兴听你这样说。 </li>\n<li>I’m your lucky fellow then. 我就是你的幸运舞伴啦! </li>\n<li>It’s none of your business! 这不关你的事儿! </li>\n<li>No littering on the campus. 在校园内不准乱丢废物。 </li>\n<li>She is a good-looking girl. 她是一个漂亮女孩。 </li>\n<li>She mended the broken doll. 她修补了破了的洋娃娃。 </li>\n<li>So I just take what I want. 那么我只拿我所需要的东西。 </li>\n<li>Spring is a pretty season， 春天是一个好季节。 </li>\n<li>The figure seems all Right. 数目看起来是对的。 </li>\n<li>The stars are too far away. 星星太遥远了。 </li>\n<li>The whole world knows that. 全世界都知道。 </li>\n<li>Tomorrow will be a holiday. 明天放假。 </li>\n<li>We walk on the garden path. 我们走在花园小径上。 </li>\n<li>What you need is just rest. 你需要的就是休息。 </li>\n<li>What‘s your favorite steps? 你最喜欢跳什么舞? </li>\n<li>You’d better let her alone. 你们最好是让她一个人呆会儿。 </li>\n<li>A lost chance never returns. 错过的机会永不再来。 </li>\n<li>Don’t let this get you down. 不要为此灰心丧气。 </li>\n<li>He shot the lion with a gun. 他用枪把狮子打死了。 </li>\n<li>I don’t think you are right. 我认为你是不对的。 </li>\n<li>I have never seen the movie. 我从未看过那部电影。 </li>\n<li>I haven’t seen you for ages. 我好久没见到你了。 </li>\n<li>I was alone，but not lonely. 我独自一人，但并不觉得寂寞。 </li>\n<li>I went there three days ago. 我三天前去过那儿。 </li>\n<li>It’s a friendly competition. 这是一场友谊赛。 </li>\n<li>It’s very thoughtful of you. 你想得真周到。 </li>\n<li>May I speak to Lora，please? 我能和劳拉说话吗? </li>\n<li>Mr.Wang is fixing his bike. 王先生在修他的自行车。 </li>\n<li>My brother is see king a job. 我弟弟正在找工作。 </li>\n<li>Nancy will retire next year. 南希明年就退休了。 </li>\n<li>Neither you nor he is wrong. 你没错，他也没错。 </li>\n<li>Opportunity knocks but once. 机不可失，时不再来。 </li>\n<li>She dressed herself hastily. 她匆忙穿上衣服。 </li>\n<li>She hired a car by the hour. 她租了一辆按钟点计费的汽车。 </li>\n<li>Someone is ringing the bell. 有人在按门铃。 </li>\n<li>The Smiths are my neighbors. 史密斯一家是我的邻居。 </li>\n<li>These shoes don‘t fit right. 这双鞋不太合适。 </li>\n<li>This is only the first half. 这才是上半场呢。 </li>\n<li>This pen doesn‘t write well. 这钢笔不好写。 </li>\n<li>Would you like a cup of tea? 你想喝杯茶吗? </li>\n<li>You really look sharp today. 你今天真漂亮。 </li>\n<li>Another cat came to my house. 又有一只猫来到我家了。 </li>\n<li>Check your answers with mine. 把你的答案跟我的核对一下。 </li>\n<li>Don’t keep the truth from me. 别瞒着我事实真相。 </li>\n<li>Everything has its beginning. 凡事都有开端。 </li>\n<li>He came to the point at once. 他一下子就说到了点子上。 </li>\n<li>He fell behind with his work. 他工作落后了。 </li>\n<li>He is the happiest man alive. 他是世界上最快乐的人。 </li>\n<li>He neither smokes nor drinks. 他既不抽烟也不喝酒。 </li>\n<li>He ran his horse up the hill. 他策马跑上小山。 </li>\n<li>He reminds me of his brother. 他使我想起了他的弟弟。 </li>\n<li>He was efficient in his work. 他工作效率高。 </li>\n<li>He will do anything but work. 只要不是干活，他干什么都行。 </li>\n<li>His father runs a restaurant. 他的父亲经营一家餐馆。 </li>\n<li>I have something to tell you. 我有事要告诉你。 </li>\n<li>I smelled a smell of cooking. 我闻到了烧菜做饭的味道。 </li>\n<li>I want to see the film again. 我真想再看一遍。 </li>\n<li>I’ve got too much work to do. 我要做的工作太多了。 </li>\n<li>Let’s go for a walk，shall we? 咱们出去走走，好吗? </li>\n<li>Please let me check the bill. 请让我核对一下帐单。 </li>\n<li>Plenty of sleep is healthful. 充足的睡眠有益于健康。 </li>\n<li>The sun comes up in the east. 太阳从东方升起。 </li>\n<li>This is because we feel pain. 这是因为我们能感到疼痛。 </li>\n<li>What do you desire me to do? 你想要我做什么? </li>\n<li>What you said was quite true. 你所说的完全符合事实。 </li>\n<li>You can either stay or leave. 你或者留下或者离开。 </li>\n<li>Your life is your own affair. 你的生活是你自己的事。 </li>\n<li>All that glitters is not gold. 发闪光的不全是黄金。 </li>\n<li>Are you going to have a party? 你要举行聚会吗? </li>\n<li>Aren’t you concerned about it? 难道你不担心吗? </li>\n<li>Don’t forget to keep in touch. 别忘了保持联系。 </li>\n<li>He broke his words once again. 他又一次违背了诺言。 </li>\n<li>He is in his everyday clothes. 他穿着平常的衣服。 </li>\n<li>He is taller than I by ahead. 他比我高一头。 </li>\n<li>He led them down the mountain. 他带他们下山。 </li>\n<li>He was trained to be a lawyer. 他被培养成一名律师。 </li>\n<li>I am afraid that l have to go. 我要走了。 </li>\n<li>I don’t have any cash with me. 我身上没带现金。 </li>\n<li>I have been putting on weight. 我开始发胖了。 </li>\n<li>I have just finished the book. 我刚刚读完这本书。 </li>\n<li>I was late for work yesterday， 我昨天上班迟到了。 </li>\n<li>It appears to be a true story. 这故事似乎是真的。 </li>\n<li>I’ve got to start working out. 我必须开始做健身运动了。 </li>\n<li>Japan is to the east of China. 日本在中国的东部。 </li>\n<li>John asked Grace to marry him， 约翰向格雷斯求婚。 </li>\n<li>My watch is faster than yours. 我的表比你的表快。 </li>\n<li>New China was founded in l949. 1949 年新中国成立。 </li>\n<li>Thanks for your flattering me. 多谢你的夸奖。 </li>\n<li>They charged the fault on him. 他们把过失归咎于他。 </li>\n<li>This car is in good condition. 这车性能很好。 </li>\n<li>This work itself is very easy. 这件工作本身很容易。 </li>\n<li>Truth is the daughter of time. 时间见真理。 </li>\n<li>We look forward to your visit. 期待您的光临。 </li>\n<li>What do you think of this one? 您觉得这个怎么样子 </li>\n<li>What’s the weather like to day? 今天天气怎么样? </li>\n<li>A red tie will match that suit. 红领带会配那件衣服。 </li>\n<li>A wet road is usually slippery. 潮湿的路往往是滑的。 </li>\n<li>Example is better than precept. 身教胜于言传。 </li>\n<li>Go right back to the beginning. 直接回到起始位置。 </li>\n<li>He does everything without aim. 他做事都漫无目标。 </li>\n<li>He is respectful to his elders. 他对长辈很恭敬。 </li>\n<li>He knows English better than I. 他比我懂英语。 </li>\n<li>He resolved to give up smoking. 他决心戒烟。 </li>\n<li>His talk covered many subjects. 他的报告涉及很多课题。 </li>\n<li>I fear that he drinks too much. 我担心他喝的酒太多了。 </li>\n<li>I have my hair cut every month. 我每个月都理发。 </li>\n<li>I want to have a part-time job. 我想有一份兼职工作。 </li>\n<li>I’m sorry to have bothered you. 对不起，打扰你了。 </li>\n<li>It is not so easy as you think. 这事没有你想象的那么简单。 </li>\n<li>Keep your temper under control. 不要发脾气。 . </li>\n<li>Lying and stealing are immoral. 说谎和偷窃都是不道德的。 </li>\n<li>My efforts resulted in nothing. 我的努力毫无结果。 </li>\n<li>My false teeth are stuck to it. 我的假牙还在上边呢! </li>\n<li>She is a composer for the harp. 她是位写竖琴曲的作曲家 </li>\n<li>Take me to the airport，please. 请送我去机场。 </li>\n<li>Talking with you is a pleasure. 和你谈话很愉快 </li>\n<li>The eggs are sold by the dozen. 鸡蛋按打卖。 </li>\n<li>The price just covers the cost. 这个价格正好抵消成本。 </li>\n<li>The sweater is of good quality. 这件毛衣质地很好。 </li>\n<li>The teacher got a little angry. 老师有点生气了。 </li>\n<li>Think carefully before you act. 三思而后行。 </li>\n<li>Walt invented the steam engine. 瓦特发明了蒸汽机。 </li>\n<li>We are divided in our opinions. 我们意见分歧。 </li>\n<li>What ever I said，he‘d disagree. 不论我说什么他都不同意。 </li>\n<li>Who ever comes will be welcomed. 来的人我们都欢迎。 </li>\n<li>You look as if you didn‘t care. 你看上去好像满不在乎。 </li>\n<li>You should look at it yourself. 你应该亲自看看它。 </li>\n<li>Draw your chair up to the table. 把你的椅子拉到桌子旁边来。 </li>\n<li>He covered himself with a quilt. 他给自己盖上一条被。 </li>\n<li>He found my lecture interesting. 他觉得我讲课有趣。 </li>\n<li>He had a good many friends here. 他在这儿有很多朋友。 </li>\n<li>He is only about five feet high. 他大概只有五英尺高。 </li>\n<li>Her family are all music lovers. 她全家人都是音乐爱好者。 </li>\n<li>I am busy.How is your business? 我很忙。你的生意做得怎样? </li>\n<li>I don’t think much of the movie. 我认为那电影不怎么样。 </li>\n<li>I feel like eating an ice-cream. 我想吃一个冰淇淋。 </li>\n<li>I found him seated on the bench. 我发现他在椅子上坐着 </li>\n<li>I gave much time to the old car. 我在这辆破车上花了不少时间。 </li>\n<li>I lost the door key about here. 我在这附近掉了门钥匙。 </li>\n<li>I’m not guessing，I really know. 我不是在猜想，我真的知道。 </li>\n<li>It’s time to tell her the truth. 是该告诉她真相的时候了。 </li>\n<li>Let’s watch TV with a candle on. 咱们点上蜡烛看电视吧。 </li>\n<li>Most games cost about that much. 大部分游戏差不多都是这个价钱。 </li>\n<li>My parents want me to go abroad. 我父母想让我出国。 </li>\n<li>She has been collecting stamps. 她一直收集邮票。 </li>\n<li>There are many stars in the sky. 天上有很多星星。 </li>\n<li>We get to London this afternoon. 我们是今天下午到达伦敦的。 </li>\n<li>What about having a pizza first? 先吃点比萨饼怎么样? </li>\n<li>You’d better look before you leap. 你最好三思而后行。 </li>\n<li>You know what I’m talking about. 我想你知道我在说什么。 </li>\n<li>He has been sick for three weeks. 他已经病了几周了。 </li>\n<li>He inspected the car for defects. 他详细检查车子有无效障。 </li>\n<li>I count you as one of my friends 我把你算作我的一个朋友。 </li>\n<li>I go to school by bike every day. 我每天骑自行车上学。 </li>\n<li>I have a large collection of CDs. 我收集了很多唱片。 </li>\n<li>I won’t be able to see him today. 今天我不可能去看他。 </li>\n<li>I’ll call a taxi in case of need. 如果需要的话，我会叫出租车的。 </li>\n<li>Is there any sugar in the bottle? 瓶子里还有糖吗? </li>\n<li>It’s a secret between you and me. 这是你我之间的秘密。 </li>\n<li>It’s very kind of you to help me. 你帮助我真是太好了。 </li>\n<li>Let’s divide the cake into three. 我们将蛋糕分成三份吧。 </li>\n<li>Patience is a mark of confidence. 耐心是自信心的一种表现。 </li>\n<li>Susan is going to finish college. 苏珊将完成大学学业。 </li>\n<li>That is my idea about friendship. 这是我关于友谊的看法。 </li>\n<li>The book you ask for is sold out. 你要的那本书已经售完了。 </li>\n<li>The boy was too nervous to speak. 那男孩紧张得说不出话来。 </li>\n<li>The play may begin at any moment. 戏随时都有可能开始。 </li>\n<li>The salve will heal slight burns. 这种药膏能治疗轻微烧伤。 </li>\n<li>The sea sparkled in the sunlight. 阳光下，大海波光粼粼。 </li>\n<li>The teacher tested us in English. 老师用英文考我们。 </li>\n<li>There is a bridge over the river. 河上有一座桥。 </li>\n<li>They rode their respective bikes. 他们各自骑着自己的自行车。 </li>\n<li>They will arrive in half an hour. 他们将于半小时之内到达。 </li>\n<li>Time is more valuable than money. 时间比金钱宝贵。 </li>\n<li>We are all in favor of this plan. 我们都赞同这项计划。 </li>\n<li>We reached London this afternoon. 我们是今天下午到达伦敦的。 </li>\n<li>We two finished a bottle of wine. 我俩喝完了一瓶酒。 </li>\n<li>what a lovely little girl she is! 她是一个多么可爱的小女孩耶! </li>\n<li>Will you pick me up at my place? 你能到我的住处来接我吗? </li>\n<li>You may choose whatever you like. 你可以喜欢什么就选什么。 </li>\n<li>You’re suffering from an allergy? 你过敏吗? </li>\n<li>Beyond all questions you are right. 毫无疑问，你是对的。 </li>\n<li>But I plan to weed the yard today. 我计划今天除院子里的草。 </li>\n<li>But who will do all the house work? 但是这些家务活谁来做呢? </li>\n<li>Close the door after you，please. 请随手关门。 </li>\n<li>Come to see me whenever you like. 你可以随时来见我。 </li>\n<li>Don’t pull the chairs about,boys! 不要把椅子拖来拖去，孩子们! </li>\n<li>He drives more carefully than you. 他开车比你小心。 </li>\n<li>He invited me to dinner yesterday. 他昨天请我吃晚饭了。 </li>\n<li>He struck his attacker on the ear. 他打了那个攻击者一耳光。 </li>\n<li>He suddenly appeared in the party. 他突然在晚会上出现了。 </li>\n<li>Her handbag goes with her clothes. 她的手袋和她的衣服很搭配。 </li>\n<li>Here we are. Row M, seats l and 3. 哦，到了。M 排，l 号和3 号。 </li>\n<li>His boss might get angry with him. 他的老板也许会生他的气。 </li>\n<li>I expect to be there this evening. 我打算今天晚上到那儿去。 </li>\n<li>I really need to lose some weight. 我真的需要减肥了。 </li>\n<li>I think you have the Wrong number. 我想你打错号码了。 </li>\n<li>I would rather stay at home alone. 我宁愿独自呆在家。 </li>\n<li>I’d like to look at some sweaters. 我想看看毛衣。 </li>\n<li>Its origin is still a mystery now. 它的起源至今仍是个谜。 </li>\n<li>Money is no more than our servant. 金钱不过是我们的仆人。 </li>\n<li>Once you begin，you must continue. 一旦开始，你就得继续。 </li>\n<li>She is poor but quite respectable. 她虽穷，人品却很端正。 </li>\n<li>She spent a lot of money on books. 她花了很多钱来买书。 </li>\n<li>The girl in red is his girlfriend. 穿红衣服的那个女孩是他的女朋友。 </li>\n<li>There is a chair below the window. 窗户下面有一把椅子。 </li>\n<li>They employed him as a consultant. 他们雇用他为顾问。 </li>\n<li>To be honest with you，I‘m twenty. 老实说，我20 岁。 </li>\n<li>We often call him by his nickname. 我们经常叫他的绰号。 </li>\n<li>Will you be free tomorrow evening? 你明晚有空吗? </li>\n<li>Would you like to leave a message? 你要留话吗? </li>\n<li>You can never turn the clock back. 时光不能倒流。 </li>\n<li>You may as well tell me the truth. 你还是把事实告诉我为好。 </li>\n<li>Are your grandparents still living? 你的祖父母还在么? </li>\n<li>Can you recognize that woman，Mary? 你能认出那个女人是谁了吗，玛丽? </li>\n<li>Do you have any suggestions for me? 你对我有什么建议么? </li>\n<li>He is tough，but I am even tougher. 他是一个硬汉子，不过我要比他更硬。 </li>\n<li>He made his way through the forest. 他设法穿过了森林。 </li>\n<li>He suggests you leave here at once. 他建议你立刻离开这儿。 </li>\n<li>He was married to a friend of mine. 他和我的一个朋友结了婚。 </li>\n<li>He will blame you for carelessness. 他会责备你的粗心大意。 </li>\n<li>I can give you a number of excuses. 我可以给你说出很多韵理由。 </li>\n<li>I don‘t doubt that he will help me. 我不怀疑他会援助我。 </li>\n<li>I hope you enjoy your stay with us. 希望您在这儿过的愉快。 </li>\n<li>I’d like to-repair our differences. 我愿意消除一下我们之间的分歧。 </li>\n<li>It’s nothing to be surprised about. 这事不值得大惊小怪。 </li>\n<li>It’s rude to stare at other people. 盯着别人看是不礼貌的。 </li>\n<li>Bob has always had a crush on Lucy. 鲍伯一直在爱着露茜。 </li>\n<li>Let’s take a short break for lunch. 让我们休息一会儿，去吃午饭。 </li>\n<li>Linda speaks as if she were a boss. 琳达说话总好象她是老板。 </li>\n<li>She became more and more beautiful. 她变得越来越漂亮了。 </li>\n<li>Suppose it rains,what shall we do? 万一下雨，我们该怎么办? </li>\n<li>The book is protected by copyright. 该书受版权保护。 </li>\n<li>The ice is hard enough to skate on. 冰已经厚得可以划冰了。 </li>\n<li>The price includes postage charges. 价格包括邮资在内。 </li>\n<li>This is a little something for you. 这是我给你们的一点心意。 </li>\n<li>What he likes best is making jokes. 他最喜欢开玩笑。 </li>\n<li>Who but Jack would do such a thing? 除了杰克谁会做这种事呢? </li>\n<li>You should have a mind of your own. 你必须有自己的主见。 </li>\n<li>You will soon get used to the work. 你很快就会习惯于这项工作的。 </li>\n<li>Columbus discovered America in l492. 哥伦布于1492 年发现了美洲。 </li>\n<li>God helps those who he1p themselves. 上帝帮助那些自己帮自己的人。 </li>\n<li>He has a nice sum of money put away. 他存了一大笔钱。 </li>\n<li>He is heavily insured against death. 他给自己投了巨额的人身保险。 </li>\n<li>He used to learn everything by rote. 他过去总是死记硬背。 </li>\n<li>He’s a terrible man when he’s angry. 他生气的时候很可怕。 </li>\n<li>I am on my way to the grocery store. 我正在去杂货店的路上 </li>\n<li>I am sick of always waiting. 我讨厌长时间等待。</li>\n<li>I appreciate John’s helping in time. 我感谢约翰的及时帮助。 </li>\n<li>I bought it the day it was released. 它发行的当天我就买了。 </li>\n<li>I doubted whether the story is true. 我怀疑那故事是不是真的。 </li>\n<li>I learnt that I had passed the test. 我获悉我测验及格了。 </li>\n<li>I will seek from my doctor‘s advice. 我将请教医生的意见。 </li>\n<li>Ice cream is popular among children. 冰淇淋深受孩子们的欢迎。 </li>\n<li>I’d like to get this film developed. 我要冲洗这卷胶卷。 </li>\n<li>In a word，I am tired of everything. 总之，我对一切都很厌倦。 </li>\n<li>Let us do it by ourselves，will you? 我们自己做这件事，可以吗? </li>\n<li>May I know the quantity you require? 请问你们需要多少数量的货物? </li>\n<li>Nobody has ever solved this problem. 没有人曾解决过这个问题。 </li>\n<li>Our school covers 100 square meters. 我们学校占地面积平方米。 </li>\n<li>People enjoyed the stamps very much. 人们非常喜爱这些邮票。 </li>\n<li>The editor over looked a print error. 这位编辑漏掉了一个印刷错误。 </li>\n<li>The sudden barking frightened Clara. 突然的狗叫声吓坏了克拉拉。 </li>\n<li>The teams are coming onto the field. 队员们都进场了。 </li>\n<li>There is a mark of ink on his shirt. 他的衬衣上有一块墨迹。 </li>\n<li>There isn‘t any water in the bottle. 瓶子里一点水也没有。 </li>\n<li>This joke has gone a little too far. 这个玩笑开得有点-过分了。 </li>\n<li>We arrived in London this afternoon. 我们是今天下午到达伦敦的。 </li>\n<li>We can‘t go out because of the rain. 我们不能出去因为下雨了。 </li>\n<li>We should make good use of our time. 我们应该充分利用我们的时间。 </li>\n<li>We should save unnecessary expenses. 我们应节省不必要的开支。 </li>\n<li>You may have heard of Birth Control. 你们也许听说过控制人口出生的措施。 </li>\n<li>After a pause he continued his story. 停顿一下之后他继续说他的。 </li>\n<li>As you know, I am a very kind person. 你知道，我是个很和善的人。 </li>\n<li>He dare not tell us his evil conduct. 他不敢告诉我们他的恶行。 </li>\n<li>I can express myself in good English. 我可以用很好的英语来表达自己的观点。 </li>\n<li>I’ll furnish my house with furniture. 我要为我的房子置办家具。 </li>\n<li>It seemed as if there was no way out. 看情形似乎没有出路了。 </li>\n<li>It’s the hottest day I’ve had so far. 这是迄今为止我经历的最热的一天。 </li>\n<li>Mr. Smith is in charge of this class. 史密斯老师负责该班。 </li>\n<li>Mr. Smith taught English at a school. 史密斯先生在一所学校教英语。 </li>\n<li>None of us is afraid of difficulties. 我们当中没有一个人害怕困难。 </li>\n<li>Our school is in the east of Beijing. 我们学校在北京的东部。 </li>\n<li>She really wishes her clock had rung. 她真希望今天早上她的闹钟响了。 </li>\n<li>She teaches foreign students Chinese. 她教外国学生汉语。 </li>\n<li>The question will be settled tonight. 这个问题将在今晚解决。 </li>\n<li>The weight is too much for my height. 相对于我的身高来说，体重太重了! </li>\n<li>There are mice in Mrs. Lee‘s kitchen! 李太太的厨房里有老鼠! </li>\n<li>There is no one but hopes to be rich. 没有人不想发财。 </li>\n<li>There’ll be some sport reviews on TV. 电视上会有一些体育评论。 </li>\n<li>This company is our regular customer. 这家公司是我们的老客户。 </li>\n<li>This is a good example of his poetry. 这是他诗作的一个好例子。 </li>\n<li>What we read influences our thinking. 我们所阅读的书本会影响我们的思想。 </li>\n<li>Words can’t express what I felt then. 无法用语言形容我当时的感受。 </li>\n<li>You really have an ear for pop music. 你确实对流行音乐很有欣赏力。 </li>\n<li>A bad workman quarrels with his tools. 手艺差的工人总是抱怨工具不好使。 </li>\n<li>Can you adapt yourself to the new job? 你能适应新的工作吗? </li>\n<li>Does the computer ever make a mistake? 计算机出错吗? </li>\n<li>Don’t be uneasy about the consequence. 不必为后果忧虑不安。 </li>\n<li>Even a child can answer this question. 即使小孩儿都能回答这个问题。 </li>\n<li>He has many strange ideas in his mind. 他脑子里尽足奇思怪想。 </li>\n<li>He is commonly supposed to be foolish. 他是公认的傻瓜。 </li>\n<li>He sat with his arms across the chest. 他双臂交叉于胸前的坐在那里。 </li>\n<li>He set up a fine example to all of us. 他为我们树立了一个好榜样。 </li>\n<li>His cake is four times as big as mine. 他的蛋糕是我的四倍大。 </li>\n<li>I do not care whether it rains or not. 我不管天会不会下雨。 </li>\n<li>I have a lot in common with my sister. 我和我姐姐有很多相同之处。 </li>\n<li>I haven’t even touched your tooth yet. 我还没有碰到你的牙齿呢。 </li>\n<li>I’m looking forward to a prompt reply. 盼迅速答复。 </li>\n<li>It is an excellent novel in every way. 无论从哪方面来看，这都是一本优秀的小说。 </li>\n<li>It is clear that the cat has eaten it! 很明显，是猫偷吃的! </li>\n<li>Nothing but death can part the couple. 除了死之外，什么也拆不散这一对。 </li>\n<li>Now she looks pale as if she were ill. 现在她脸色难看，好像病了一样。 </li>\n<li>She was injured badly in the accident. 她在这次意外中受到重伤。 </li>\n<li>The secret was spread among the crowd. 秘密在人群当中传播开来。 </li>\n<li>The two brothers look very much alike. 这兄弟俩看上去很相像。 </li>\n<li>Their interest is listening to others. 他们的兴趣是听别人说话。 </li>\n<li>There was a notice in the supermarket. 超市里有一个布告。 </li>\n<li>This one cannot compare with that one. 这个与那个无法比较。 </li>\n<li>To know everything is to know nothing. 样样通，样样松。 </li>\n<li>To tell the truth, I don’t like disco. 说实话，我不喜欢迪斯科。 </li>\n<li>True and False have opposite meanings. 真与假含义完全相反。 </li>\n<li>What’s the point of going to college? 上大学有何用? </li>\n<li>Where can we make the insurance claim? 我们可以在哪里提出保险赔偿?这个无法与那个比较。 </li>\n<li>Why don’t I pick you up at your house? 为什么不让我去接你呢? </li>\n<li>Why don’t you attend an aerobic class? 你为什么不去参加一个有氧健身班呢? </li>\n<li>You can kill two birds with one stone. 一举两得。 </li>\n<li>You can’t go in no matter who you are. 不管你是谁，都不能进去。 </li>\n<li>You should learn these words by heart. 你应该把这些词背熟。 </li>\n<li>Could I have those two tickets, please? 这两张票给我行不行? </li>\n<li>He has to take care of his sick mother. 他得照顾他生病的母亲。 </li>\n<li>He hired a workman to repair the fence. 他雇用了一个工人修理围墙。 </li>\n<li>I can’t make this machine run properly. 我无法使这部机器正常运转。 </li>\n<li>I don’t know if I’ll have the patience. 我不知道我有没有耐心。 </li>\n<li>I don’t like what you are saying. 我不喜欢你说的话。 </li>\n<li>I fell in love with her at first sight. 我第一眼见到她就爱上了她。 </li>\n<li>I have just heard from my sister, Mary. 我刚收到我妹妹玛丽的一封信。 </li>\n<li>If you would only try, you could do it. 只要你肯尝试，你一定能做这件事。 </li>\n<li>It is no use learning without thinking. 学而不思则惘。 </li>\n<li>It was a lazy, breezy autumn afternoon. 这是一个懒散的，起风的秋日下午。 </li>\n<li>Jack is the strongest boy in the class. 杰克是全班最强壮的男孩。 </li>\n<li>Please fetch a chair from another room. 请到别的房间取一把椅子。 </li>\n<li>The doctor began to operate on the boy. 医生开始给那个男孩动手术。 </li>\n<li>The doctor is taking my blood pressure. 医生正给我量血压。 </li>\n<li>The machines will not operate properly. 那些机器不能正常运转。 </li>\n<li>The students declared against cheating. 学生们表示反对作弊。 </li>\n<li>There is hope so long as he is with us. 只要他在就有希望。 </li>\n<li>He talks as if he were the head of the office. 他说话的口气像办公室主任似的。 </li>\n<li>His cake is three times bigger than mine. 他的蛋糕比我的大三倍。 </li>\n<li>I am looking forward to your early reply. 希望早日得到你的答复。 </li>\n<li>I could say nothing but that I was sorry. 我除了说“对不起”之外，什么也说不出来。 </li>\n<li>I don’t know how to express my gratitude. 我不知道怎样来表达我的感激之情。 </li>\n<li>I have to catch a plane. Could you hurry? 我要赶飞机,你能快点吗? </li>\n<li>I haven’t heard from her for a long time. 我好久没有她的消息了。 </li>\n<li>I would like to wash the clothes for you. 我愿意帮你洗这些衣服。 </li>\n<li>Let me see your driver’s license, please. 请让我看看你的驾驶执照。 </li>\n<li>She goes to work every day except Sunday. 除星期天外，他每天去上班。 </li>\n<li>Take a seat please, make yourself at home. 请坐，随便一点。 </li>\n<li>The damage was caused by external forces. 损害是由外力引起的。 </li>\n<li>The doctor advised me to give up smoking. 医生建议我戒烟。 </li>\n<li>The flowers make the room more beautiful. 花使房间变得更加美了。 </li>\n<li>There is a good restaurant on the street. 那条大街上有一个很好的餐馆。 </li>\n<li>They covered 120 miles in a single night. 他们仅一夜就走了120 英里路。 </li>\n<li>Try to look on the bright side of things. 尽量从好的方面看。 </li>\n<li>What’s your plan for the summer vacation? 你暑假打算干什么? </li>\n<li>You may pick whichever one you like best. 你可以挑你最喜欢的。 </li>\n<li>You’re welcome to stay with us next time. 欢迎您下次再光临我们的饭店。 </li>\n<li>There was a murder in London yesterday. 昨天伦敦发生了一起谋杀案。 </li>\n<li>They stared at the huge tiger with awe. 他们敬畏地看着那头巨虎。 </li>\n<li>He never misses a chance to see a movie. 他从不错过看电影的机会。 </li>\n<li>I cannot put up with my noisy roommates. 我受不了我那些吵闹的室友了。 </li>\n<li>I will be back by the end of next month. 我下个月底会回来。 </li>\n<li>I’m good at freestyle and breast stroke. 我擅长自由泳和蛙泳。 </li>\n<li>It was your turn to wash them yesterday. 昨天轮到你把它们洗干净。 </li>\n<li>Let’s go out to have a dinner, shall we? 咱们出去吃饭吧，好吗? </li>\n<li>Please push the ladder against the wall. 请把梯子靠在墙壁上。 </li>\n<li>She is standing in the front of the bus. 她站在公共汽车的前部。 </li>\n<li>The doctor asked me to watch what I eat. 医生要我注意饮食。 </li>\n<li>The grass is moist early in the morning. 清晨的草地湿漉漉的。 </li>\n<li>The test finished. We began our holiday. 考试结束了，我们开始放假。 </li>\n<li>This question is too complicated for me. 这个问题对我说来太复杂了。 </li>\n<li>Tony speaks English and he plays tennis. 托尼会说英语，打网球。 </li>\n<li>What is worth doing is worth doing well. 只要你觉得某事值得去做，就一定要把它做好。 </li>\n<li>Would you like to go to a party with me? 你想不想和我一起去参加一个聚会? </li>\n<li>All at once, a rabbit came out of a hole. 突然，一只兔子从一个洞中跑了出来。 </li>\n<li>All characters in the book are imaginary. 书中所有的人物都是虚构的。 </li>\n<li>Do you feel like going to that new disco? 你想去那个新开的迪厅 </li>\n<li>Ducks know how to swim when they are born. 鸭子天生会游泳 </li>\n<li>He spent most of his life gathering money. 他一生大部分时间用来积聚钱财。 </li>\n<li>He usually stays at home with his pet dog. 他通常跟他的爱犬待在家里。 </li>\n<li>How peaceful and beautiful the country is! 多么平静美丽的国家呀! </li>\n<li>I am told that you dance wonderfully well. 我听说你的舞跳得特棒。 </li>\n<li>I have had several conversations with him. 我已经和他谈过几次了。 </li>\n<li>It is the best film that I have ever seen. 这是我所看过的最好的电影。 </li>\n<li>It’s only a party in honor of my birthday. 这只是为了庆祝我的生日而举行的晚会。 </li>\n<li>Learning English is like building a house. 学英语象盖房子。 </li>\n<li>Listening with your heart is good for you. 专心聆听别人说话对你有好处。 </li>\n<li>My grandpa died of hunger in the old days. 我爷爷在旧社会死于饥饿。 </li>\n<li>She feared staying alone in the farmhouse. 她害怕一个人留在农舍里。 </li>\n<li>She guided the tourists around the castle. 她引导旅游者参观了这座城堡。 </li>\n<li>She runs everyday in order to lose weight. 她每天都跑步是为了减肥。 </li>\n<li>She sang perfectly in the hall last night. 她昨晚在大厅唱得非常好。 </li>\n<li>Somebody is always complaining to others. 有人总是向别人抱怨。 </li>\n<li>They don’t often have a bad day this year. 他们今年的运气还不错。 </li>\n<li>We regard the matter as nothing important. 我们认为这件事情不重要。 </li>\n<li>We’ll take our holiday sometime in August. 我们将在八月份的某个时候休假。 </li>\n<li>Could you direct me to the station, please? 请问到车站怎么走? </li>\n<li>Have you cleared your luggage with customs? 你的行李通关了吗? </li>\n<li>He bothered me with a great many questions. 他对我提了一大堆问题，真烦! </li>\n<li>He does exercises every day in the morning. 他每天早上锻练身体。 </li>\n<li>How do I control myself? I can’t calm down. 我怎能控制我自己?我无法冷静下来。 </li>\n<li>I dig songs and I like pop music very much. 我特别喜欢歌曲和流行音乐。 </li>\n<li>I’d like to cash a traveler’s check please. 我想兑换旅行支票。 </li>\n<li>I‘d like to pick sea shells this afternoon. 今天下午我想去捡贝壳。 </li>\n<li>It’s odd that they didn’t reply our letter. 他们没有给我们回信，这真奇怪。 </li>\n<li>John seldom gets together with his friends. 约翰很少与朋友聚在一起。 </li>\n<li>Many people have been out of work recently. 最近有许多人失业。 </li>\n<li>Please give my best regards to your family. 请代我向你们全家致以最诚挚的问候。 </li>\n<li>Some people have compared books to friends. 有些人把书比作朋友。 </li>\n<li>The bat together with the balls was stolen. 球拍和球全被偷了。 </li>\n<li>The color of her dress suits her very well. 她衣服的颜色很适合她。 </li>\n<li>The days get longer and the nights get shorter. 白天变长了，黑夜变短了。 </li>\n<li>The dress doesn’t fit her. She is too thin. 这件衣服不适合她，她太瘦了。 </li>\n<li>The examination put a lot of stress on him. 那次考试给了他很大的压力。 </li>\n<li>The mother sat the child at a little table. 母亲安排孩子坐到小桌旁。 </li>\n<li>There is some difference between the twins. 这对双胞胎有点儿不一样。 </li>\n<li>They insisted on staying rather than going. 他们坚持留下来，而不愿意走 </li>\n<li>Trust me, the game is really worth playing. 相信我，这游戏确实值得一玩。 </li>\n<li>Unlike her friends, she never gave up hope. 与她的朋友的不同之处是，她从不放弃希望。 </li>\n<li>Well done! You are always doing a good job! 干得不错!你总是干得很出色! </li>\n<li>We’re planning a tour to Italy this summer. 我们计划今年夏天到意大利去旅行。 </li>\n<li>Were there any letters for me this morning? 今天早上有我的信吗? </li>\n<li>Why isn’t Mrs. Lee‘s cat catching the mice? 李太太的猫为何不在抓这些老鼠呢? </li>\n<li>Your English is improving little by little. 你的英语正在渐渐提高。 </li>\n<li>Could you tell me where I can wash my hands? 请问洗手间怎么走? </li>\n<li>Do you have any plans for the long weekend? 有办法打发这个漫长的周末吗? </li>\n<li>He decided to bring a suit against his boss. 他决定起诉他的老板。 </li>\n<li>He devoted his life to the study of science. 他把毕生献给科学研究。 </li>\n<li>He had to choose between death and dishonor. 他不得不在死亡和耻辱之间选择。 </li>\n<li>His previous attempts had been unsuccessful. 他以前的尝试没有成功。 </li>\n<li>I determined that nothing should be changed. 我决定什么都不改变。 </li>\n<li>I don’t think it will lead to a good result. 我认为这事不会有什么好结果。 </li>\n<li>I have 4 books and 2 magazines to check out. 我有4 本书和2 本杂志要借。 </li>\n<li>I think I’ve filled in everything correctly. 我想各项都填对了。 </li>\n<li>I’m not sure whether I have locked the door. 我没把握是否锁了门。 </li>\n<li>It took him a little time to fix that watch. 他很快就把表修理好了。 </li>\n<li>My father is at home looking for the ticket. 我爸爸正在家里找票呢! </li>\n<li>Not until last week did I get a work permit. 直到上周我才拿到工作许可证 </li>\n<li>She intends to make teaching her profession. 她想以教书为职业。 </li>\n<li>The letter “x” stands for an unknown number. 字母x 代表未知数。 </li>\n<li>The sight of the dead body scared him stiff. 看到尸体把他吓僵了。 </li>\n<li>There are lots of huge buildings in Beijing. 在北京有许多高大的建筑物。 </li>\n<li>There is an interesting film on Channel one. 在一频道有一部有趣的电影。 </li>\n<li>They plan to immigrate to Finland next year. 他们计划明年移居芬兰。 </li>\n<li>We enjoyed driving along the new expressway. 我们喜欢沿着新建的高速公路开车。 </li>\n<li>We need to cooperate perfectly to win the game. 要想赢得比赛，我们需要密切配合。 </li>\n<li>We need more than listening. We need action! 我们需要的不光是听得进意见，我们要的是行动。 </li>\n<li>Yes. I wouldn’t go home early if I were you. 是的，如果我是你，我不会早回家。 </li>\n<li>Your answer is satisfying. I feel satisfied. 你的答案是令人满意的。我感到很满意。 </li>\n<li>Betty and Susan are talking on the telephone. 贝蒂和苏珊正在通电话。 </li>\n<li>Great efforts ensure the success of our work. 巨大的努力确保了我们工作的成功。 </li>\n<li>He has tasted the sweets and bitters of life. 他已尝遍了人生的甜酸苦辣。 </li>\n<li>He said he was educated in the United States. 他说他是在美国受的教育。 </li>\n<li>How do you like our English literature Prof? 你觉得我们的英国文学课的教授怎么样? </li>\n<li>I am looking forward to your visit next week. 我期待着你下周来访。 </li>\n<li>I feel I am the happiest person in the world. 我觉得自己是世界上最幸福的人了。 </li>\n<li>I had to sit up all night writing the report. 我不得不熬通宵写报告。 </li>\n<li>I hope we can see each other again some time. 希望还能有相见的机会。 </li>\n<li>I saw him playing football on the playground. 我看见他在操场上踢足球。 </li>\n<li>It is tomorrow that they will have a meeting. 就在明天(而不是在别的某一天)他们要开会。</li>\n<li>Let me tell you some details about clearance. 让我告诉你一些通关的细节。 </li>\n<li>The brain needs a continuous supply of blood. 大脑需要连续不断地供血。 </li>\n<li>The doctor’s words made him feel comfortable. 医生的话让他感觉很舒服。 </li>\n<li>The truth is quite other than what you think. 事实真相和你所想的完全不同。 </li>\n<li>They stopped talking when their boss came in. 当老板进来的时候；他们停止了交谈。 </li>\n<li>They were glad of the examination being over. 他们为考试结束了而高兴。 </li>\n<li>This is by far the largest cake in the world. 这是目前世界上最大的蛋糕了。 </li>\n<li>Whichever you choose, you won’t be satisfied. 不论你选择哪一个，你都不会满意。 </li>\n<li>Will you connect this wire to the television ? 你把这根电线和电视机连上好吗? </li>\n<li>His words are strongly impressed on my memory. 他的话深深地铭记在我的心头。 </li>\n<li>Is this the fight bus for the Capital Library? 这辆车到首都图书馆吗? </li>\n<li>One third of this area is covered with forest. 这一地区三分之一的地方都是森林。 </li>\n<li>They are arguing over who should pay the bill. 他们为谁应该付款而争论不休。 </li>\n<li>Wait a moment, I’ll be with you in an instant. 等一下，我立刻就来。 </li>\n<li>You’ll save time not waiting for the elevator. 你可以节省等电梯的时间。 </li>\n<li>A clear conscience laughs at false accusation. 只要问心无愧，无端的指责可以一笑置之。 </li>\n<li>I have a headache, and she has a stomachache. 我头疼，她胃疼。 </li>\n<li>He glared at Bill, ready to teach him a lesson. 他怒视着比尔，准备教训他一顿。 </li>\n<li>I assure you that you will feel no pain at all. 我保证你根本不会觉得疼的。 </li>\n<li>I can’t afford to go to a restaurant every day. 每天都去餐馆吃饭，我真是支付不起。 </li>\n<li>I left at 6:00 so that I could catch the train. 我六点钟出门，以便赶上火车。 </li>\n<li>I’m afraid I have some rather bad news for you. 我恐怕有些很坏的消息要告诉你。 </li>\n<li>Learn to say the fight thing at the fight time. 学会在适当的时候说适当的话。 </li>\n<li>No wonder you can‘t sleep when you eat so much.  你吃这么多难怪睡不着。 </li>\n<li>Please ask her to call me back when she’s back. 她回来时请让她给我回个电话。 </li>\n<li>There are a lot of people in the swimming pool. 游泳池里挤满了人。 </li>\n<li>They have to work hard to support their family. 他们必须努力工作来支持他们的家。 </li>\n<li>This way, he can kill two birds with one stone. 这样他就能两全其美。 </li>\n<li>We are all taking medicine against the disease. 我们都服药治疗疾病。 </li>\n<li>Would you please go to a dancing party with me? 请你跟我一起去参加一个舞会好吗? </li>\n<li>He usually drops in at my place on his way home. 他常常在回家的路上顺便来看看我。 </li>\n<li>His vanity was hurt by their talking so frankly. 他们坦率的谈话伤害了他的虚荣心。 </li>\n<li>How would you go to Beijing, by air or by train? 你怎样去北京，是乘飞机还是坐火车? </li>\n<li>I cannot express how glad I am to hear from him. 我无法表达我接到他的信时有多高兴。 </li>\n<li>If Tom cannot keep his promise, he’ll lose face. 如果汤姆不能信守诺言，他就会丢面子。</li>\n<li>I’ll still love her even if she doesn’t love me. 即使她不爱我，我还仍然爱她。 </li>\n<li>I received an invitation, but I did not accept it. 我收到一份请帖，但没有接受。 </li>\n<li>If I were you, I would not be bothered by English. 如果我是你，就不会为英语烦恼了。 </li>\n<li>If you don’t work, you will fail to pass the exam. 如果你不学习，你考试就会不及格。 </li>\n<li>I’m thinking of hanging the lamp from the ceiling. 我打算把灯吊在天花板上。 </li>\n<li>It is more important to be healthy than bony slim. 健康永远比皮包骨头好。 </li>\n<li>Long ago, people believed that the world was flat. 很久以前人们相信地球是平的。 </li>\n<li>Old tunes are sweetest and old friends are surest. 老调最甜美，老友最可靠。 </li>\n<li>She makes it clear that she doesn’t like swimming. 她明确地表示她不喜欢游泳。 </li>\n<li>The constitution guards the liberty of the people. 宪法保护人民的自由。 </li>\n<li>The doctor examined the soldier’s wound carefully. 大夫仔细检查了战士的伤口。 </li>\n<li>The harder I study, the better my English will be. 我越努力，我的英语就会越好。 </li>\n<li>The sun was shining and the sky was crystal clear. 阳光闪烁，天空湛蓝。 </li>\n<li>This cellar room is very damp in the rainy season. 这间地下室在雨季非常潮湿。 </li>\n<li>Computers are becoming a part of our everyday life. 电子计算机正渐渐成为我们日常生活的一部分。 </li>\n<li>Every man is fool sometimes, but none at all times. 每个人都有愚蠢的时候，但是没有一个人永远愚蠢。 </li>\n<li>He dreamed of traveling to remote South Sea Islands. 他曾梦想到遥远的南海诸岛去旅游。 </li>\n<li>How can I climb up that wall! I wish I were a bird! 我怎么能够爬得上那堵墙?我要是一只鸟就好了! </li>\n<li>However, Susan has not really made up her mind yet. 然而，苏珊却还没有决定。 </li>\n<li>I really think a little exercise would do you good. 我真的觉得做点运动对你有好处。 </li>\n<li>I will never forget the days that I spent with you. 我永远都不会忘记和你一起度过的日子。 </li>\n<li>we got a bad headache, and my nose is running. 我头痛得厉害，还流鼻涕。 </li>\n<li>Many young girls dream of being a fashion model. 许多年轻女孩梦想成为时装模特儿。 </li>\n<li>Most of the earth’s surface is covered by water. 大部分的地球表面被水覆盖着。 </li>\n<li>Somebody’s knocking at the door. I’ll answer it. 有人在敲门，我去开。 </li>\n<li>The number 13 bus will take you to the hospital.13. 路车会带你去医院。 </li>\n<li>They celebrated his birthday with a dance party. 也们举办舞会来祝贺他的生日。 </li>\n<li>They misplaced this book under other categories. 他们把它错放到另一个类别去了。 </li>\n<li>They played a shameful part in the whole affair. 他们在这一事件中扮演了可耻的角色。 </li>\n<li>As a matter of fact, he was pretending to be ill. 实际上，他是在装病。 </li>\n<li>I will speak against anything I know to be wrong. 我会对所有我认为不对的事情直言不讳。</li>\n<li>In spite of the heavy rain, she went to the shop. 尽管下着大雨，她还是去了商店。 </li>\n<li>No matter what happened, he would not say a word. 不管发生什么事，他也不会说一句话。 </li>\n<li>No one knows the location of the hidden treasure. 谁也不知道藏宝地点在哪里。 </li>\n<li>The old lady enjoys a quiet life with her family. 老太太和她的家人安享宁静的生活。 </li>\n<li>The population of the city is close to a million. 这个城市的人口接近一百万。 </li>\n<li>We are prohibited from smoking on school grounds. 我们被禁止在校园内抽烟。 </li>\n<li>Growth, however, brings new problems and concerns. 不过，发展也带来了新的问题和顾虑。 </li>\n<li>He appears to be your friend but I doubt if he is. 他看上去像是你的朋友，但我怀疑他是否是真心的。 </li>\n<li>I am so full that I would burst with another bite. 我吃得如此之饱，我感觉我再吃一口肚子就要胀破了。 </li>\n<li>I have two cats. One is white, the other is black. 我有两只猫，一只是白猫，另一只是黑猫。 </li>\n<li>I’m sorry, these 2 books are 3 days overdue. 小姐，对不起，这两本书已经过期3 天了。 </li>\n<li>Jalu has forgotten falling off his bicycle. 詹露早忘掉他从白行车上摔下来这件事了 </li>\n<li>Manners are quite different from country to country. 各国的礼仪各不相同。 </li>\n<li>Not only did I know her, but I was her best friend. 我不仅认识她，还是她最好的朋友。 </li>\n<li>The best-known movie awards are the Academy Awards. 最著名的电影奖是奥斯卡金像奖。 </li>\n<li>We’ve got to do something about the neighbor’s dog! 我们得对邻居的狗采取点行动了! </li>\n<li>Will you come and join us for dinner on Sunday? 星期天来和我们共进晚餐好吗? </li>\n<li>Do you think people are a company’s greatest wealth? 你认为人是公司最大的财富吗? </li>\n<li>He thinks himself somebody, but we think him nobody. 他自以为是重要人物，但我们觉得他什么也不是。 </li>\n<li>I believe I haven’t reached the summit of my career. 我相信我还没有达到事业的巅峰。 </li>\n<li>It is no matter whether you get there early or late. 你早到晚到都没有关系。 </li>\n<li>It’s against the rules to handle the ball in soccer. 在足球中以手触球就是犯规。 </li>\n<li>The nurse assisted the doctor in the operating room. 护士在手术室协助医生动手术。 </li>\n<li>What I do on my own time is nobody else’s business. 我在自己的时间里干什么根本不关别人的事。 </li>\n<li>What I want to do is different from those of others. 我想做的与别人不同。 </li>\n<li>You forget to write down the date of your departure. 您忘了写离店日期了。 </li>\n<li>“I wish I’d known about that rule earlier”, she said. “我要是早点知道这个规矩就好了!”她说。 </li>\n<li>Could you tell me your secret for a long, happy life? 你能告诉我长时间地过着快乐的生活的秘诀吗? </li>\n<li>He holds a position of great responsibility upon him. 他担任着一个责任重大的职务。 </li>\n<li>It is said he has secret love affairs with two women! 据说他背地里和两个女人有关系！ </li>\n<li>Number 13 buses run much more frequently, don’t they? 13 路车跑得更勤，是不是? </li>\n<li>They are only too delighted to accept the invitation. 他们非常乐意接受邀请。 </li>\n<li>We are going to have the final examination next week. 我们下周举行期末考试。 </li>\n<li>And now medical care helps to keep people alive longer. 现在的医疗保健使得人们活得更长。 </li>\n<li>Do you think you’ll be able to go to sleep fight away? 你认为你马上就能睡着吗? </li>\n<li>I am in charge of the company when the manager is out. 经理不在时山我来管理公司。 </li>\n<li>I borrowed a notebook from Tom and I lent it to Marry. 我从汤姆那儿借了一本笔记本，我又把它借给玛丽了。 </li>\n<li>I’m doing some washing and John is cooking dinner. 我正在洗衣服，约翰在做晚饭。 </li>\n<li>Were there any exciting incidents during your journey? 你们在旅行中有没有什么令人激动的事情? </li>\n<li>As far as policy is concerned, I have to say something. 谈到政策，我得说几句。 </li>\n<li>Could you tell me what the maximum weight allowance is? 您能告诉我行李的最大重量限额是多少吗? </li>\n<li>He came out of the library, a large book under his arm. 他夹着本厚书，走出了图书馆。 </li>\n<li>The brothers differ from each other in their interests. 这几个兄弟各有所好。 </li>\n<li>Although we can’t see these atoms, they really do exist. 虽然我们看不见原子，但它们的确存在。 </li>\n<li>I am familiar with the casual atmosphere in the company. 我对公司中这种放松的氛围感到很熟悉。 </li>\n<li>Most people eat, write, and work with their fight hands. 大多数人吃饭，写字，工作都用右手。 </li>\n<li>Only by working hard can we succeed in doing everything. 只有努力，才能成功 </li>\n<li>Take it easy, you will be all right in a couple of days. 别担心，你两天之内就会痊愈的。 </li>\n<li>The Beatles represented part of the spirit of their age. 甲壳虫乐队代表了他们时代的部分精神。 </li>\n<li>There being no one to help me, I had to do it all alone. 因为没有人帮助我，我不得不独立完成这项工作。 </li>\n<li>How much cloth does it take to make a skirt for the girl? 女孩做一条裙子要用多少布? </li>\n<li>With all these mouths to feed, he didn‘t know what to do. 由于有那么多人要供养，他不知道怎么办才好。 </li>\n<li>I forgot to prepare the speech I‘m supposed to give today. 我忘了准备今天的我该做的演讲了。 </li>\n<li>It’s supposed to start at 6:30 sharp, but I doubt it will. 应该是六点半整的，但是我觉得够呛。 </li>\n<li>On behalf of my company, I would like to welcome you here. 我代表我们公司欢迎你来这里。 </li>\n<li>She’s been quite different since coming back from America. 从美国回来之后，她变化很大。 </li>\n<li>Today it is common that women and girls make up in public. 今天，在公共场所看到妇女和姑娘化妆打扮是很普遍的事。 </li>\n<li>I have to transfer to No. ll bus, but where is the bus stop? 我需要换乘11 路公共汽车，但是汽车站在哪儿? </li>\n<li>I supposed him to be very clever but he was in fact a fool. 我以为他很聪明，其实他是个蠢货。 </li>\n<li>The rabbit ran to the woods and did not come back any more. 兔子跑进了森林再也没有出来了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>I’m home. 我回来了。 </li>\n<li>I quit! 我不干了! </li>\n<li>Let go! 放手! </li>\n<li>Me too. 我也是。 </li>\n<li>My god! 天哪! </li>\n<li>No way! 不行! </li>\n<li>Come on. 来吧(赶快) </li>\n<li>Hold on. 等一等。 </li>\n<li>I agree。 我同意。 </li>\n<li>Not bad. 还不错。 </li>\n<li>Not yet. 还没。 </li>\n<li>See you. 再见。 </li>\n<li>Shut up! 闭嘴! </li>\n<li>So long. 再见。 </li>\n<li>Why not? 好呀! (为什么不呢?) </li>\n<li>Allow me. 让我来。 </li>\n<li>Be quiet! 安静点! </li>\n<li>Cheer up! 振作起来! </li>\n<li>Good job! 做得好! </li>\n<li>Have fun! 玩得开心! </li>\n<li>How much? 多少钱? </li>\n<li>I’m full. 我饱了。 </li>\n<li>I see. 我明白了。 </li>\n<li>I’m lost. 我迷路了。 </li>\n<li>My treat. 我请客。 </li>\n<li>So do I. 我也一样。 </li>\n<li>This way。 这边请。 </li>\n<li>After you. 您先。 </li>\n<li>Bless you! 祝福你! </li>\n<li>Follow me. 跟我来。 </li>\n<li>Forget it! 休想! (算了!) </li>\n<li>Good luck! 祝好运! </li>\n<li>I decline! 我拒绝! </li>\n<li>I promise. 我保证。 </li>\n<li>Of course! 当然了! </li>\n<li>Slow down! 慢点! </li>\n<li>Take care! 保重! </li>\n<li>They hurt. (伤口)疼。 </li>\n<li>Try again. 再试试。 </li>\n<li>Watch out! 当心。 </li>\n<li>What’s up? 有什么事吗? </li>\n<li>Be careful! 注意! </li>\n<li>Bottoms up! 干杯(见底)! </li>\n<li>Don’t move! 不许动! </li>\n<li>Guess what? 猜猜看? </li>\n<li>I doubt it 我怀疑。 </li>\n<li>I think so. 我也这么想。 </li>\n<li>I’m single. 我是单身贵族。 </li>\n<li>Keep it up! 坚持下去! </li>\n<li>Let me see. 让我想想。 </li>\n<li>Never mind. 不要紧。 </li>\n<li>No problem! 没问题! </li>\n<li>That’s all! 就这样! </li>\n<li>Time is up. 时间快到了。 </li>\n<li>What’s new? 有什么新鲜事吗? </li>\n<li>Count me on. 算上我。 </li>\n<li>Don’t worry. 别担心。 </li>\n<li>Feel better? 好点了吗? </li>\n<li>I love you! 我爱你! </li>\n<li>I’m his fan. 我是他的影迷。 </li>\n<li>Is it yours? 这是你的吗? </li>\n<li>That’s neat. 这很好。 </li>\n<li>Are you sure? 你肯定吗? </li>\n<li>Do I have to? 非做不可吗? </li>\n<li>He is my age. 他和我同岁。 </li>\n<li>Here you are. 给你。 </li>\n<li>No one knows. 没有人知道。 </li>\n<li>Take it easy. 别紧张。 </li>\n<li>What a pity! 太遗憾了! </li>\n<li>Any thing else? 还要别的吗? </li>\n<li>To be careful! 一定要小心! </li>\n<li>He came by train. 他乘火车来。</li>\n<li>Help yourself. 别客气。 </li>\n<li>I’m on a diet. 我在节食。 </li>\n<li>Keep in touch. 保持联络。 </li>\n<li>Time is money. 时间就是金钱。 </li>\n<li>Who’s calling? 是哪一位? </li>\n<li>You did right. 你做得对。 </li>\n<li>You set me up! 你出卖我! </li>\n<li>Can I help you? 我能帮你吗? </li>\n<li>Enjoy yourself! 祝你玩得开心! </li>\n<li>Excuse me，Sir. 先生，对不起。 </li>\n<li>Give me a hand! 帮帮我! </li>\n<li>How’s it going? 怎么样? </li>\n<li>I have no idea. 我没有头绪。 </li>\n<li>I just made it! 我做到了! </li>\n<li>I’ll see to it. 我会留意的。 </li>\n<li>I’m in a hurry! 我在赶时间! </li>\n<li>It’s her field. 这是她的本行。 </li>\n<li>It’s up to you. 由你决定。 </li>\n<li>Just wonderful! 简直太棒了! </li>\n<li>What about you? 你呢? </li>\n<li>You owe me one. 你欠我一个人情。 </li>\n<li>You’re welcome. 不客气。 </li>\n<li>Any day will do. 哪一天都行。 </li>\n<li>Are you kidding? 你在开玩笑吧! </li>\n<li>Congratulations! 祝贺你! </li>\n<li>I can’t help it. 我情不自禁。 </li>\n<li>I don’t mean it. 我不是故意的。 </li>\n<li>I’ll fix you Up. 我会帮你打点的。 </li>\n<li>It sounds great! 听起来很不错。 </li>\n<li>It’s a fine day. 今天是个好天。 </li>\n<li>So far，So good. 目前还不错。 </li>\n<li>What time is it? 几点了? </li>\n<li>You can make it! 你能做到! </li>\n<li>Control yourself! 克制一下! </li>\n<li>Do me a favor? 帮个忙，好吗? </li>\n<li>He is ill in bed. 他卧病在床。 </li>\n<li>He lacks courage. 他缺乏勇气。 </li>\n<li>How’s everything? 一切还好吧? </li>\n<li>I have no choice. 我别无选择。 </li>\n<li>I like ice-cream. 我喜欢吃冰淇淋。 </li>\n<li>I love this game. 我钟爱这项运动。 </li>\n<li>I’ll try my best. 我尽力而为。 </li>\n<li>I’m On your side. 我全力支持你。 </li>\n<li>Long time no see! 好久不见! </li>\n<li>No pain，no gain. 不劳无获。 </li>\n<li>Well，it depends. 噢，这得看情况。 </li>\n<li>We’re all for it. 我们全都同意。 </li>\n<li>What a good deal! 真便宜! </li>\n<li>What should I do? 我该怎么办？ </li>\n<li>You asked for it! 你自讨苦吃! </li>\n<li>You have my word. 我保证。 </li>\n<li>Believe it or not! 信不信由你! </li>\n<li>Don’t count on me. 别指望我。 </li>\n<li>Don’t fall for it! 别上当! </li>\n<li>Don’t let me down. 别让我失望。 </li>\n<li>Easy come easy go. 来得容易，去得快。 </li>\n<li>I beg your pardon. 请你原谅。 </li>\n<li>I beg your pardon? 请您再说一遍(我没有听清)。 </li>\n<li>I’ll be back soon. 我马上回来。 </li>\n<li>I’ll check it out. 我去查查看。 </li>\n<li>It’s a long story. 说来话长。 </li>\n<li>It’s Sunday today. 今天是星期天。 </li>\n<li>Just wait and see! 等着瞧! </li>\n<li>Make up your mind. 做个决定吧。 </li>\n<li>That’s all I need. 我就要这些。 </li>\n<li>The view is great. 景色多么漂亮! </li>\n<li>The wall has ears. 隔墙有耳。 </li>\n<li>There comes a bus. 汽车来了。 </li>\n<li>What day is today? 今天星期几? </li>\n<li>What do you think? 你怎么认为？ </li>\n<li>Who told you that? 谁告诉你的? </li>\n<li>Who’s kicking off? 现在是谁在开球? </li>\n<li>Yes，I suppose So. 是的，我也这么认为。 </li>\n<li>You can’t miss it. 你一定能找到的。 </li>\n<li>Any messages for me? 有我的留言吗? </li>\n<li>Don’t be so modest. 别谦虚了。 </li>\n<li>Don’t give me that! 少来这套! </li>\n<li>He is a smart boy. 他是个小机灵鬼。 </li>\n<li>He is just a child. 他只是个孩子。 </li>\n<li>I can’t follow you. 我不懂你说的。 </li>\n<li>I felt sort of ill. 我感觉有点不适。 </li>\n<li>I have a good idea! 我有一个好主意。 </li>\n<li>It is growing cool. 天气渐渐凉爽起来。 </li>\n<li>It seems all right. 看来这没问题。 </li>\n<li>It’s going too far. 太离谱了。 </li>\n<li>May I use your pen? 我可以用你的笔吗? </li>\n<li>She had a bad cold. 她患了重感冒。 </li>\n<li>That’s a good idea. 这个主意真不错。 </li>\n<li>The answer is zero. 白忙了。 </li>\n<li>What does she like? 她喜欢什么? </li>\n<li>As soon as possible! 越快越好! </li>\n<li>He can hardly speak. 他几乎说不出话来。 </li>\n<li>He always talks big. 他总是吹牛。 </li>\n<li>He won an election. 他在选举中获胜。 </li>\n<li>I am a football fan. 我是个足球迷。 </li>\n<li>If only I could fly. 要是我能飞就好了。 </li>\n<li>I’ll be right there. 我马上就到。 </li>\n<li>I’ll see you at six. 我六点钟见你。 </li>\n<li>IS it true or false? 这是对的还是错的? </li>\n<li>Just read it for me. 就读给我听好了。 </li>\n<li>Knowledge is power. 知识就是力量。 </li>\n<li>Move out of my way! 让开! </li>\n<li>Time is running out. 没时间了。 </li>\n<li>We are good friends. 我们是好朋友。 </li>\n<li>What’s your trouble? 你哪儿不舒服? </li>\n<li>You did fairly well! 你干得相当不错1 </li>\n<li>Clothes make the man. 人要衣装。 </li>\n<li>Did you miss the bus? 你错过公共汽车了? </li>\n<li>Don’t lose your head. 不要惊慌失措。 </li>\n<li>He can’t take a joke. 他开不得玩笑。 </li>\n<li>He owes my uncle $100. 他欠我叔叔100 美元。 </li>\n<li>How are things going? 事情进展得怎样? </li>\n<li>How are you recently? 最近怎么样? </li>\n<li>I know all about it. 我知道有关它的一切。 </li>\n<li>It really takes time. 这样太耽误时间了。 </li>\n<li>It’s against the law. 这是违法的。 </li>\n<li>Love me，love my dog. (谚语)爱屋及乌。 </li>\n<li>My mouth is watering. 我要流口水了。 </li>\n<li>Speak louder，please. 说话请大声点儿。 </li>\n<li>This boy has no job. 这个男孩没有工作。 </li>\n<li>This house is my own. 这所房子是我自己的。 </li>\n<li>What happened to you? 你怎么了? </li>\n<li>You are just in time. 你来得正是时候。 </li>\n<li>You need to workout. 你需要去运动锻炼一下。 </li>\n<li>Your hand feels cold. 你的手摸起来很冷。。 </li>\n<li>Don’t be so childish. 别这么孩子气。 </li>\n<li>Don’t trust to chance! 不要碰运气。 </li>\n<li>Fasten your seat belt. 系好你的安全带 </li>\n<li>He has a large income. 他有很高的收入。 </li>\n<li>He looks very healthy. 他看来很健康。 </li>\n<li>He paused for a reply. 他停下来等着·回答。 </li>\n<li>He repaired his house. 他修理了他的房子。 </li>\n<li>He suggested a picnic. 他建议搞一次野餐。 </li>\n<li>Here’s a gift for you. 这里有个礼物送给你。 </li>\n<li>How much does it cost? 多少钱? </li>\n<li>I caught the last bus. 我赶上了最后一班车。 </li>\n<li>I could hardly speak. 我简直说不出话来。 </li>\n<li>I’ll have to try that. 我得试试这么做。 </li>\n<li>I’m very proud of you. 我为你感到非常骄傲。 </li>\n<li>It doesn’t make sense. 这没有意义(不合常理)。 </li>\n<li>Make yourself at home. 请不要拘礼。 </li>\n<li>My car needs washing. 我的车需要洗一洗。 </li>\n<li>None of your business! 与你无关! </li>\n<li>Not a sound was heard. 一点声音也没有。 </li>\n<li>That’s always the case. 习以为常了。 </li>\n<li>The road divides here. 这条路在这里分岔。 </li>\n<li>Those are watermelons. 那些是西瓜。 </li>\n<li>What a nice day it is! 今天天气真好! </li>\n<li>What’s wrong with you? 你哪里不对劲? </li>\n<li>You are a chicken. 你是个胆小鬼。 </li>\n<li>A lovely day，isn’t it? 好天气，是吗? </li>\n<li>He is collecting money. 他在筹集资金。 </li>\n<li>He was born in New York. 他出生在纽约。 </li>\n<li>He was not a bit tired. 他一点也不累。 </li>\n<li>I will be more careful. 我会小心一些的， </li>\n<li>I will never forget it. 我会记着的。 </li>\n<li>It is Just what I need. 这正是我所需要的。 </li>\n<li>It rather surprised me. 那事使我颇感惊讶。 </li>\n<li>Just around the comer. 就在附近。 </li>\n<li>Just for entertainment. 只是为了消遣一下。 </li>\n<li>Let bygones be bygones. 过去的，就让它过去吧。 </li>\n<li>Mother doesn‘t make up. 妈妈不化妆。 </li>\n<li>Oh，you are kidding me. 哦，你别拿我开玩笑了。 </li>\n<li>She has been to school. 她上学去了。 </li>\n<li>Skating is interesting. 滑冰很有趣。 </li>\n<li>Supper is ready at six. 晚餐六点钟就好了。 </li>\n<li>That’s a terrific idea! 真是好主意! </li>\n<li>What horrible weather! 这鬼天气! </li>\n<li>Which would you prefer? 你要选哪个? </li>\n<li>Does she like ice-cream? 她喜欢吃冰淇淋吗? </li>\n<li>First come first served. 先到先得。 </li>\n<li>Great minds think alike. 英雄所见略同。 </li>\n<li>He has a sense of humor. 他有幽默感。 </li>\n<li>He is acting an old man. 他正扮演一个老人。 </li>\n<li>He is looking for a job. 他正在找工作。 </li>\n<li>He doesn’t care about me. 他并不在乎我。 </li>\n<li>I develop films myself. 我自己冲洗照片。 </li>\n<li>I felt no regret for it. 对这件事我不觉得后悔。 </li>\n<li>I get up at six o’clock. 我六点起床。 </li>\n<li>I meet the boss himself. 我见到了老板本人。 </li>\n<li>I owe you for my dinner. 我欠你晚餐的钱。 </li>\n<li>I really enjoyed myself. 我玩得很开心。 </li>\n<li>I’m fed up with my work! 我对工作烦死了! </li>\n<li>It’s no use complaining. 发牢骚没什么用。 </li>\n<li>She’s under the weather. 她心情·不好。 </li>\n<li>The child sobbed sadly. 小孩伤心地抽泣着。 </li>\n<li>The rumor had no basis. 那谣言没有·根据。 </li>\n<li>They praised him highly. 他们大大地表扬了他。 </li>\n<li>Winter is a cold season. 冬天是一个，寒冷的季节。 </li>\n<li>You can call me any time. 你可以随时打电话给我。 </li>\n<li>15 divided by 3 equals 5. 15 除以3 等于5。 </li>\n<li>All for one，one for all. 我为人人，人人为我。 </li>\n<li>East,west，home is best. 金窝，银窝，不如自己的草窝。 </li>\n<li>He grasped both my hands. 他紧握住我的双手。 </li>\n<li>He is physically mature. 他身体己发育成熟。 </li>\n<li>I am so sorry about this. 对此我非常抱歉(遗憾)。 </li>\n<li>I can’t afford a new car. 我买不起一部新车。 </li>\n<li>I do want to see him now. 我现在确实很想去见他。 </li>\n<li>I have the right to know. 我有权知道。 </li>\n<li>I heard some one laughing. 我听见有人在笑。 </li>\n<li>I suppose you dance much. 我想你常常跳舞吧。 </li>\n<li>I walked across the park. 我穿过了公园。 </li>\n<li>I’ll just play it by ear. 我到时随机应变。 </li>\n<li>I’m not sure I can do it. 恐怕这事我干不了。 </li>\n<li>I’m not used to drinking. 我不习惯喝酒。 </li>\n<li>Is the cut still painful? 伤口还在痛吗? </li>\n<li>It’s too good to be true! 好得难以置信。 </li>\n<li>Jean is a blue-eyed girl. 珍是个蓝眼睛的女孩。 </li>\n<li>Let’s not waste our time. 咱们别浪费时间了。 </li>\n<li>May I ask some questions? 我可以问几个问题吗? </li>\n<li>Money is not everything. 金钱不是一切。 </li>\n<li>Neither of the men spoke. 两个人都没说过话。 </li>\n<li>Stop making such a noise. 别吵了。 </li>\n<li>That makes no difference. 没什么区别。 </li>\n<li>The price is reasonable. 价格还算合理。 </li>\n<li>They crowned him king. 他们拥立他为国王。 </li>\n<li>They’re in red and white. 他们穿着红白相间的衣服。 </li>\n<li>We all desire happiness. 我们都想要幸福。 </li>\n<li>We just caught the plane. 我们刚好赶上了飞机。 </li>\n<li>What shall we do tonight? 我们今天晚上去干点儿什么呢? </li>\n<li>What’s your goal in life. 你的人生目标是什么? </li>\n<li>When was the house built? 这幢房子是什么时候建造的? </li>\n<li>Why did you stay at home? 为什么呆在家里? </li>\n<li>Would you like some help? 今天真漂亮! </li>\n<li>You mustn‘t aim too high. 你不可好高骛远。 </li>\n<li>You’re really killing me! 真是笑死我了! </li>\n<li>You’ve got a point there. 你说得挺有道理的。 </li>\n<li>Being criticized is awful! 被人批评真是痛苦! </li>\n<li>Did you enter the contest? 你参加比赛了吗? </li>\n<li>Do you accept credit cards? 你们收信用卡吗? </li>\n<li>Don’t cry over spilt milk. 不要做无益的后悔。 </li>\n<li>Don’t let chances pass by. 不要让机遇从我们身边溜走。 </li>\n<li>He owned himself defeated. 他承认自己失败了。 </li>\n<li>He seems at little nervous. 他显得有点紧张。 </li>\n<li>He strolls about the town. 他在镇上四处遛达。 </li>\n<li>Her tooth ached all night. 她牙疼了一整夜。 </li>\n<li>How about a drink tonight? 今晚喝一杯怎样? </li>\n<li>I can do nothing but that. 我只会做那件事。 </li>\n<li>I get hold of you at last. 我终于找到你了。 </li>\n<li>I have a surprise for you. 我有一个意想不到的东西给你看。 </li>\n<li>I like all kinds of fruit. 我喜欢各种各样的水果。 </li>\n<li>I saw it with my own eyes. 我亲眼所见。 </li>\n<li>I will arrange everything. 我会安排一切的。 </li>\n<li>I wish I knew my neighbor. 我很想认识我的邻居。 </li>\n<li>I would like to check out. 我想结帐。 </li>\n<li>It has be come much cooler. 天气变得凉爽多了。 </li>\n<li>It’s time you went to bed. 你早就该睡觉了。 </li>\n<li>No spitting on the street. 禁止在大街上吐痰。 </li>\n<li>She was totally exhausted. 她累垮了。 </li>\n<li>Show your tickets，please. 请出示你的票。 </li>\n<li>Thank you for your advice. 谢谢你的建议。 </li>\n<li>That’s the latest fashion. 这是最流行的款式。 </li>\n<li>The train arrived on time. 火车准时到达。 </li>\n<li>There go the house lights. 剧院的灯光灭了。 </li>\n<li>They are paid by the hour. 他们按时取酬。 </li>\n<li>Things are getting better. 情况正在好转。 </li>\n<li>Wake me up at five thirty. 请在五点半叫醒我。 </li>\n<li>We are all busy with work. 我们都忙于工作。 </li>\n<li>Where do you want to meet? 你想在哪儿见面? </li>\n<li>You can get what you want. 你能得到你想要的。 </li>\n<li>A barking dog doesn’t bite! 吠犬不咬人。 </li>\n<li>Are you free this Saturday? 你这个星期六有空吗? </li>\n<li>Be careful not to fall ill. 注意不要生病了。 </li>\n<li>Being a mother is not easy. 做一个母亲是不容易的。 </li>\n<li>Brevity is the soul of wit. 简洁是智慧的精华。 </li>\n<li>Cancer is a deadly disease. 癌症是一种致命的疾病。 </li>\n<li>Did you fight with others? 你又和别人打架了吗? </li>\n<li>Don’t dream away your time. 不要虚度光阴。 </li>\n<li>Don’t keep me waiting long. 不要让我等得太久。 </li>\n<li>He has a remarkable memory. 他有惊人的记忆力。 </li>\n<li>He has completed the task. 他完成了这个任务。 </li>\n<li>He has quite a few friends. 他有不少的朋友。 </li>\n<li>He is capable of any crime. 他什么样的坏事都能干得出来。 </li>\n<li>He walks with a quick pace. 他快步走路。 </li>\n<li>He was not a little tired. 他很累。 </li>\n<li>His looks are always funny. 他的样子总是滑稽可笑。 </li>\n<li>How about going to a movie? 去看场电影怎么样? </li>\n<li>I think I’ve caught a cold. 我想我得了感冒。 </li>\n<li>I was taking care of Sally. 我在照顾萨莉。 </li>\n<li>I wish I lived in NEWYORK. 我希望住在纽约。 </li>\n<li>I’m very glad to hear that. 很高兴听你这样说。 </li>\n<li>I’m your lucky fellow then. 我就是你的幸运舞伴啦! </li>\n<li>It’s none of your business! 这不关你的事儿! </li>\n<li>No littering on the campus. 在校园内不准乱丢废物。 </li>\n<li>She is a good-looking girl. 她是一个漂亮女孩。 </li>\n<li>She mended the broken doll. 她修补了破了的洋娃娃。 </li>\n<li>So I just take what I want. 那么我只拿我所需要的东西。 </li>\n<li>Spring is a pretty season， 春天是一个好季节。 </li>\n<li>The figure seems all Right. 数目看起来是对的。 </li>\n<li>The stars are too far away. 星星太遥远了。 </li>\n<li>The whole world knows that. 全世界都知道。 </li>\n<li>Tomorrow will be a holiday. 明天放假。 </li>\n<li>We walk on the garden path. 我们走在花园小径上。 </li>\n<li>What you need is just rest. 你需要的就是休息。 </li>\n<li>What‘s your favorite steps? 你最喜欢跳什么舞? </li>\n<li>You’d better let her alone. 你们最好是让她一个人呆会儿。 </li>\n<li>A lost chance never returns. 错过的机会永不再来。 </li>\n<li>Don’t let this get you down. 不要为此灰心丧气。 </li>\n<li>He shot the lion with a gun. 他用枪把狮子打死了。 </li>\n<li>I don’t think you are right. 我认为你是不对的。 </li>\n<li>I have never seen the movie. 我从未看过那部电影。 </li>\n<li>I haven’t seen you for ages. 我好久没见到你了。 </li>\n<li>I was alone，but not lonely. 我独自一人，但并不觉得寂寞。 </li>\n<li>I went there three days ago. 我三天前去过那儿。 </li>\n<li>It’s a friendly competition. 这是一场友谊赛。 </li>\n<li>It’s very thoughtful of you. 你想得真周到。 </li>\n<li>May I speak to Lora，please? 我能和劳拉说话吗? </li>\n<li>Mr.Wang is fixing his bike. 王先生在修他的自行车。 </li>\n<li>My brother is see king a job. 我弟弟正在找工作。 </li>\n<li>Nancy will retire next year. 南希明年就退休了。 </li>\n<li>Neither you nor he is wrong. 你没错，他也没错。 </li>\n<li>Opportunity knocks but once. 机不可失，时不再来。 </li>\n<li>She dressed herself hastily. 她匆忙穿上衣服。 </li>\n<li>She hired a car by the hour. 她租了一辆按钟点计费的汽车。 </li>\n<li>Someone is ringing the bell. 有人在按门铃。 </li>\n<li>The Smiths are my neighbors. 史密斯一家是我的邻居。 </li>\n<li>These shoes don‘t fit right. 这双鞋不太合适。 </li>\n<li>This is only the first half. 这才是上半场呢。 </li>\n<li>This pen doesn‘t write well. 这钢笔不好写。 </li>\n<li>Would you like a cup of tea? 你想喝杯茶吗? </li>\n<li>You really look sharp today. 你今天真漂亮。 </li>\n<li>Another cat came to my house. 又有一只猫来到我家了。 </li>\n<li>Check your answers with mine. 把你的答案跟我的核对一下。 </li>\n<li>Don’t keep the truth from me. 别瞒着我事实真相。 </li>\n<li>Everything has its beginning. 凡事都有开端。 </li>\n<li>He came to the point at once. 他一下子就说到了点子上。 </li>\n<li>He fell behind with his work. 他工作落后了。 </li>\n<li>He is the happiest man alive. 他是世界上最快乐的人。 </li>\n<li>He neither smokes nor drinks. 他既不抽烟也不喝酒。 </li>\n<li>He ran his horse up the hill. 他策马跑上小山。 </li>\n<li>He reminds me of his brother. 他使我想起了他的弟弟。 </li>\n<li>He was efficient in his work. 他工作效率高。 </li>\n<li>He will do anything but work. 只要不是干活，他干什么都行。 </li>\n<li>His father runs a restaurant. 他的父亲经营一家餐馆。 </li>\n<li>I have something to tell you. 我有事要告诉你。 </li>\n<li>I smelled a smell of cooking. 我闻到了烧菜做饭的味道。 </li>\n<li>I want to see the film again. 我真想再看一遍。 </li>\n<li>I’ve got too much work to do. 我要做的工作太多了。 </li>\n<li>Let’s go for a walk，shall we? 咱们出去走走，好吗? </li>\n<li>Please let me check the bill. 请让我核对一下帐单。 </li>\n<li>Plenty of sleep is healthful. 充足的睡眠有益于健康。 </li>\n<li>The sun comes up in the east. 太阳从东方升起。 </li>\n<li>This is because we feel pain. 这是因为我们能感到疼痛。 </li>\n<li>What do you desire me to do? 你想要我做什么? </li>\n<li>What you said was quite true. 你所说的完全符合事实。 </li>\n<li>You can either stay or leave. 你或者留下或者离开。 </li>\n<li>Your life is your own affair. 你的生活是你自己的事。 </li>\n<li>All that glitters is not gold. 发闪光的不全是黄金。 </li>\n<li>Are you going to have a party? 你要举行聚会吗? </li>\n<li>Aren’t you concerned about it? 难道你不担心吗? </li>\n<li>Don’t forget to keep in touch. 别忘了保持联系。 </li>\n<li>He broke his words once again. 他又一次违背了诺言。 </li>\n<li>He is in his everyday clothes. 他穿着平常的衣服。 </li>\n<li>He is taller than I by ahead. 他比我高一头。 </li>\n<li>He led them down the mountain. 他带他们下山。 </li>\n<li>He was trained to be a lawyer. 他被培养成一名律师。 </li>\n<li>I am afraid that l have to go. 我要走了。 </li>\n<li>I don’t have any cash with me. 我身上没带现金。 </li>\n<li>I have been putting on weight. 我开始发胖了。 </li>\n<li>I have just finished the book. 我刚刚读完这本书。 </li>\n<li>I was late for work yesterday， 我昨天上班迟到了。 </li>\n<li>It appears to be a true story. 这故事似乎是真的。 </li>\n<li>I’ve got to start working out. 我必须开始做健身运动了。 </li>\n<li>Japan is to the east of China. 日本在中国的东部。 </li>\n<li>John asked Grace to marry him， 约翰向格雷斯求婚。 </li>\n<li>My watch is faster than yours. 我的表比你的表快。 </li>\n<li>New China was founded in l949. 1949 年新中国成立。 </li>\n<li>Thanks for your flattering me. 多谢你的夸奖。 </li>\n<li>They charged the fault on him. 他们把过失归咎于他。 </li>\n<li>This car is in good condition. 这车性能很好。 </li>\n<li>This work itself is very easy. 这件工作本身很容易。 </li>\n<li>Truth is the daughter of time. 时间见真理。 </li>\n<li>We look forward to your visit. 期待您的光临。 </li>\n<li>What do you think of this one? 您觉得这个怎么样子 </li>\n<li>What’s the weather like to day? 今天天气怎么样? </li>\n<li>A red tie will match that suit. 红领带会配那件衣服。 </li>\n<li>A wet road is usually slippery. 潮湿的路往往是滑的。 </li>\n<li>Example is better than precept. 身教胜于言传。 </li>\n<li>Go right back to the beginning. 直接回到起始位置。 </li>\n<li>He does everything without aim. 他做事都漫无目标。 </li>\n<li>He is respectful to his elders. 他对长辈很恭敬。 </li>\n<li>He knows English better than I. 他比我懂英语。 </li>\n<li>He resolved to give up smoking. 他决心戒烟。 </li>\n<li>His talk covered many subjects. 他的报告涉及很多课题。 </li>\n<li>I fear that he drinks too much. 我担心他喝的酒太多了。 </li>\n<li>I have my hair cut every month. 我每个月都理发。 </li>\n<li>I want to have a part-time job. 我想有一份兼职工作。 </li>\n<li>I’m sorry to have bothered you. 对不起，打扰你了。 </li>\n<li>It is not so easy as you think. 这事没有你想象的那么简单。 </li>\n<li>Keep your temper under control. 不要发脾气。 . </li>\n<li>Lying and stealing are immoral. 说谎和偷窃都是不道德的。 </li>\n<li>My efforts resulted in nothing. 我的努力毫无结果。 </li>\n<li>My false teeth are stuck to it. 我的假牙还在上边呢! </li>\n<li>She is a composer for the harp. 她是位写竖琴曲的作曲家 </li>\n<li>Take me to the airport，please. 请送我去机场。 </li>\n<li>Talking with you is a pleasure. 和你谈话很愉快 </li>\n<li>The eggs are sold by the dozen. 鸡蛋按打卖。 </li>\n<li>The price just covers the cost. 这个价格正好抵消成本。 </li>\n<li>The sweater is of good quality. 这件毛衣质地很好。 </li>\n<li>The teacher got a little angry. 老师有点生气了。 </li>\n<li>Think carefully before you act. 三思而后行。 </li>\n<li>Walt invented the steam engine. 瓦特发明了蒸汽机。 </li>\n<li>We are divided in our opinions. 我们意见分歧。 </li>\n<li>What ever I said，he‘d disagree. 不论我说什么他都不同意。 </li>\n<li>Who ever comes will be welcomed. 来的人我们都欢迎。 </li>\n<li>You look as if you didn‘t care. 你看上去好像满不在乎。 </li>\n<li>You should look at it yourself. 你应该亲自看看它。 </li>\n<li>Draw your chair up to the table. 把你的椅子拉到桌子旁边来。 </li>\n<li>He covered himself with a quilt. 他给自己盖上一条被。 </li>\n<li>He found my lecture interesting. 他觉得我讲课有趣。 </li>\n<li>He had a good many friends here. 他在这儿有很多朋友。 </li>\n<li>He is only about five feet high. 他大概只有五英尺高。 </li>\n<li>Her family are all music lovers. 她全家人都是音乐爱好者。 </li>\n<li>I am busy.How is your business? 我很忙。你的生意做得怎样? </li>\n<li>I don’t think much of the movie. 我认为那电影不怎么样。 </li>\n<li>I feel like eating an ice-cream. 我想吃一个冰淇淋。 </li>\n<li>I found him seated on the bench. 我发现他在椅子上坐着 </li>\n<li>I gave much time to the old car. 我在这辆破车上花了不少时间。 </li>\n<li>I lost the door key about here. 我在这附近掉了门钥匙。 </li>\n<li>I’m not guessing，I really know. 我不是在猜想，我真的知道。 </li>\n<li>It’s time to tell her the truth. 是该告诉她真相的时候了。 </li>\n<li>Let’s watch TV with a candle on. 咱们点上蜡烛看电视吧。 </li>\n<li>Most games cost about that much. 大部分游戏差不多都是这个价钱。 </li>\n<li>My parents want me to go abroad. 我父母想让我出国。 </li>\n<li>She has been collecting stamps. 她一直收集邮票。 </li>\n<li>There are many stars in the sky. 天上有很多星星。 </li>\n<li>We get to London this afternoon. 我们是今天下午到达伦敦的。 </li>\n<li>What about having a pizza first? 先吃点比萨饼怎么样? </li>\n<li>You’d better look before you leap. 你最好三思而后行。 </li>\n<li>You know what I’m talking about. 我想你知道我在说什么。 </li>\n<li>He has been sick for three weeks. 他已经病了几周了。 </li>\n<li>He inspected the car for defects. 他详细检查车子有无效障。 </li>\n<li>I count you as one of my friends 我把你算作我的一个朋友。 </li>\n<li>I go to school by bike every day. 我每天骑自行车上学。 </li>\n<li>I have a large collection of CDs. 我收集了很多唱片。 </li>\n<li>I won’t be able to see him today. 今天我不可能去看他。 </li>\n<li>I’ll call a taxi in case of need. 如果需要的话，我会叫出租车的。 </li>\n<li>Is there any sugar in the bottle? 瓶子里还有糖吗? </li>\n<li>It’s a secret between you and me. 这是你我之间的秘密。 </li>\n<li>It’s very kind of you to help me. 你帮助我真是太好了。 </li>\n<li>Let’s divide the cake into three. 我们将蛋糕分成三份吧。 </li>\n<li>Patience is a mark of confidence. 耐心是自信心的一种表现。 </li>\n<li>Susan is going to finish college. 苏珊将完成大学学业。 </li>\n<li>That is my idea about friendship. 这是我关于友谊的看法。 </li>\n<li>The book you ask for is sold out. 你要的那本书已经售完了。 </li>\n<li>The boy was too nervous to speak. 那男孩紧张得说不出话来。 </li>\n<li>The play may begin at any moment. 戏随时都有可能开始。 </li>\n<li>The salve will heal slight burns. 这种药膏能治疗轻微烧伤。 </li>\n<li>The sea sparkled in the sunlight. 阳光下，大海波光粼粼。 </li>\n<li>The teacher tested us in English. 老师用英文考我们。 </li>\n<li>There is a bridge over the river. 河上有一座桥。 </li>\n<li>They rode their respective bikes. 他们各自骑着自己的自行车。 </li>\n<li>They will arrive in half an hour. 他们将于半小时之内到达。 </li>\n<li>Time is more valuable than money. 时间比金钱宝贵。 </li>\n<li>We are all in favor of this plan. 我们都赞同这项计划。 </li>\n<li>We reached London this afternoon. 我们是今天下午到达伦敦的。 </li>\n<li>We two finished a bottle of wine. 我俩喝完了一瓶酒。 </li>\n<li>what a lovely little girl she is! 她是一个多么可爱的小女孩耶! </li>\n<li>Will you pick me up at my place? 你能到我的住处来接我吗? </li>\n<li>You may choose whatever you like. 你可以喜欢什么就选什么。 </li>\n<li>You’re suffering from an allergy? 你过敏吗? </li>\n<li>Beyond all questions you are right. 毫无疑问，你是对的。 </li>\n<li>But I plan to weed the yard today. 我计划今天除院子里的草。 </li>\n<li>But who will do all the house work? 但是这些家务活谁来做呢? </li>\n<li>Close the door after you，please. 请随手关门。 </li>\n<li>Come to see me whenever you like. 你可以随时来见我。 </li>\n<li>Don’t pull the chairs about,boys! 不要把椅子拖来拖去，孩子们! </li>\n<li>He drives more carefully than you. 他开车比你小心。 </li>\n<li>He invited me to dinner yesterday. 他昨天请我吃晚饭了。 </li>\n<li>He struck his attacker on the ear. 他打了那个攻击者一耳光。 </li>\n<li>He suddenly appeared in the party. 他突然在晚会上出现了。 </li>\n<li>Her handbag goes with her clothes. 她的手袋和她的衣服很搭配。 </li>\n<li>Here we are. Row M, seats l and 3. 哦，到了。M 排，l 号和3 号。 </li>\n<li>His boss might get angry with him. 他的老板也许会生他的气。 </li>\n<li>I expect to be there this evening. 我打算今天晚上到那儿去。 </li>\n<li>I really need to lose some weight. 我真的需要减肥了。 </li>\n<li>I think you have the Wrong number. 我想你打错号码了。 </li>\n<li>I would rather stay at home alone. 我宁愿独自呆在家。 </li>\n<li>I’d like to look at some sweaters. 我想看看毛衣。 </li>\n<li>Its origin is still a mystery now. 它的起源至今仍是个谜。 </li>\n<li>Money is no more than our servant. 金钱不过是我们的仆人。 </li>\n<li>Once you begin，you must continue. 一旦开始，你就得继续。 </li>\n<li>She is poor but quite respectable. 她虽穷，人品却很端正。 </li>\n<li>She spent a lot of money on books. 她花了很多钱来买书。 </li>\n<li>The girl in red is his girlfriend. 穿红衣服的那个女孩是他的女朋友。 </li>\n<li>There is a chair below the window. 窗户下面有一把椅子。 </li>\n<li>They employed him as a consultant. 他们雇用他为顾问。 </li>\n<li>To be honest with you，I‘m twenty. 老实说，我20 岁。 </li>\n<li>We often call him by his nickname. 我们经常叫他的绰号。 </li>\n<li>Will you be free tomorrow evening? 你明晚有空吗? </li>\n<li>Would you like to leave a message? 你要留话吗? </li>\n<li>You can never turn the clock back. 时光不能倒流。 </li>\n<li>You may as well tell me the truth. 你还是把事实告诉我为好。 </li>\n<li>Are your grandparents still living? 你的祖父母还在么? </li>\n<li>Can you recognize that woman，Mary? 你能认出那个女人是谁了吗，玛丽? </li>\n<li>Do you have any suggestions for me? 你对我有什么建议么? </li>\n<li>He is tough，but I am even tougher. 他是一个硬汉子，不过我要比他更硬。 </li>\n<li>He made his way through the forest. 他设法穿过了森林。 </li>\n<li>He suggests you leave here at once. 他建议你立刻离开这儿。 </li>\n<li>He was married to a friend of mine. 他和我的一个朋友结了婚。 </li>\n<li>He will blame you for carelessness. 他会责备你的粗心大意。 </li>\n<li>I can give you a number of excuses. 我可以给你说出很多韵理由。 </li>\n<li>I don‘t doubt that he will help me. 我不怀疑他会援助我。 </li>\n<li>I hope you enjoy your stay with us. 希望您在这儿过的愉快。 </li>\n<li>I’d like to-repair our differences. 我愿意消除一下我们之间的分歧。 </li>\n<li>It’s nothing to be surprised about. 这事不值得大惊小怪。 </li>\n<li>It’s rude to stare at other people. 盯着别人看是不礼貌的。 </li>\n<li>Bob has always had a crush on Lucy. 鲍伯一直在爱着露茜。 </li>\n<li>Let’s take a short break for lunch. 让我们休息一会儿，去吃午饭。 </li>\n<li>Linda speaks as if she were a boss. 琳达说话总好象她是老板。 </li>\n<li>She became more and more beautiful. 她变得越来越漂亮了。 </li>\n<li>Suppose it rains,what shall we do? 万一下雨，我们该怎么办? </li>\n<li>The book is protected by copyright. 该书受版权保护。 </li>\n<li>The ice is hard enough to skate on. 冰已经厚得可以划冰了。 </li>\n<li>The price includes postage charges. 价格包括邮资在内。 </li>\n<li>This is a little something for you. 这是我给你们的一点心意。 </li>\n<li>What he likes best is making jokes. 他最喜欢开玩笑。 </li>\n<li>Who but Jack would do such a thing? 除了杰克谁会做这种事呢? </li>\n<li>You should have a mind of your own. 你必须有自己的主见。 </li>\n<li>You will soon get used to the work. 你很快就会习惯于这项工作的。 </li>\n<li>Columbus discovered America in l492. 哥伦布于1492 年发现了美洲。 </li>\n<li>God helps those who he1p themselves. 上帝帮助那些自己帮自己的人。 </li>\n<li>He has a nice sum of money put away. 他存了一大笔钱。 </li>\n<li>He is heavily insured against death. 他给自己投了巨额的人身保险。 </li>\n<li>He used to learn everything by rote. 他过去总是死记硬背。 </li>\n<li>He’s a terrible man when he’s angry. 他生气的时候很可怕。 </li>\n<li>I am on my way to the grocery store. 我正在去杂货店的路上 </li>\n<li>I am sick of always waiting. 我讨厌长时间等待。</li>\n<li>I appreciate John’s helping in time. 我感谢约翰的及时帮助。 </li>\n<li>I bought it the day it was released. 它发行的当天我就买了。 </li>\n<li>I doubted whether the story is true. 我怀疑那故事是不是真的。 </li>\n<li>I learnt that I had passed the test. 我获悉我测验及格了。 </li>\n<li>I will seek from my doctor‘s advice. 我将请教医生的意见。 </li>\n<li>Ice cream is popular among children. 冰淇淋深受孩子们的欢迎。 </li>\n<li>I’d like to get this film developed. 我要冲洗这卷胶卷。 </li>\n<li>In a word，I am tired of everything. 总之，我对一切都很厌倦。 </li>\n<li>Let us do it by ourselves，will you? 我们自己做这件事，可以吗? </li>\n<li>May I know the quantity you require? 请问你们需要多少数量的货物? </li>\n<li>Nobody has ever solved this problem. 没有人曾解决过这个问题。 </li>\n<li>Our school covers 100 square meters. 我们学校占地面积平方米。 </li>\n<li>People enjoyed the stamps very much. 人们非常喜爱这些邮票。 </li>\n<li>The editor over looked a print error. 这位编辑漏掉了一个印刷错误。 </li>\n<li>The sudden barking frightened Clara. 突然的狗叫声吓坏了克拉拉。 </li>\n<li>The teams are coming onto the field. 队员们都进场了。 </li>\n<li>There is a mark of ink on his shirt. 他的衬衣上有一块墨迹。 </li>\n<li>There isn‘t any water in the bottle. 瓶子里一点水也没有。 </li>\n<li>This joke has gone a little too far. 这个玩笑开得有点-过分了。 </li>\n<li>We arrived in London this afternoon. 我们是今天下午到达伦敦的。 </li>\n<li>We can‘t go out because of the rain. 我们不能出去因为下雨了。 </li>\n<li>We should make good use of our time. 我们应该充分利用我们的时间。 </li>\n<li>We should save unnecessary expenses. 我们应节省不必要的开支。 </li>\n<li>You may have heard of Birth Control. 你们也许听说过控制人口出生的措施。 </li>\n<li>After a pause he continued his story. 停顿一下之后他继续说他的。 </li>\n<li>As you know, I am a very kind person. 你知道，我是个很和善的人。 </li>\n<li>He dare not tell us his evil conduct. 他不敢告诉我们他的恶行。 </li>\n<li>I can express myself in good English. 我可以用很好的英语来表达自己的观点。 </li>\n<li>I’ll furnish my house with furniture. 我要为我的房子置办家具。 </li>\n<li>It seemed as if there was no way out. 看情形似乎没有出路了。 </li>\n<li>It’s the hottest day I’ve had so far. 这是迄今为止我经历的最热的一天。 </li>\n<li>Mr. Smith is in charge of this class. 史密斯老师负责该班。 </li>\n<li>Mr. Smith taught English at a school. 史密斯先生在一所学校教英语。 </li>\n<li>None of us is afraid of difficulties. 我们当中没有一个人害怕困难。 </li>\n<li>Our school is in the east of Beijing. 我们学校在北京的东部。 </li>\n<li>She really wishes her clock had rung. 她真希望今天早上她的闹钟响了。 </li>\n<li>She teaches foreign students Chinese. 她教外国学生汉语。 </li>\n<li>The question will be settled tonight. 这个问题将在今晚解决。 </li>\n<li>The weight is too much for my height. 相对于我的身高来说，体重太重了! </li>\n<li>There are mice in Mrs. Lee‘s kitchen! 李太太的厨房里有老鼠! </li>\n<li>There is no one but hopes to be rich. 没有人不想发财。 </li>\n<li>There’ll be some sport reviews on TV. 电视上会有一些体育评论。 </li>\n<li>This company is our regular customer. 这家公司是我们的老客户。 </li>\n<li>This is a good example of his poetry. 这是他诗作的一个好例子。 </li>\n<li>What we read influences our thinking. 我们所阅读的书本会影响我们的思想。 </li>\n<li>Words can’t express what I felt then. 无法用语言形容我当时的感受。 </li>\n<li>You really have an ear for pop music. 你确实对流行音乐很有欣赏力。 </li>\n<li>A bad workman quarrels with his tools. 手艺差的工人总是抱怨工具不好使。 </li>\n<li>Can you adapt yourself to the new job? 你能适应新的工作吗? </li>\n<li>Does the computer ever make a mistake? 计算机出错吗? </li>\n<li>Don’t be uneasy about the consequence. 不必为后果忧虑不安。 </li>\n<li>Even a child can answer this question. 即使小孩儿都能回答这个问题。 </li>\n<li>He has many strange ideas in his mind. 他脑子里尽足奇思怪想。 </li>\n<li>He is commonly supposed to be foolish. 他是公认的傻瓜。 </li>\n<li>He sat with his arms across the chest. 他双臂交叉于胸前的坐在那里。 </li>\n<li>He set up a fine example to all of us. 他为我们树立了一个好榜样。 </li>\n<li>His cake is four times as big as mine. 他的蛋糕是我的四倍大。 </li>\n<li>I do not care whether it rains or not. 我不管天会不会下雨。 </li>\n<li>I have a lot in common with my sister. 我和我姐姐有很多相同之处。 </li>\n<li>I haven’t even touched your tooth yet. 我还没有碰到你的牙齿呢。 </li>\n<li>I’m looking forward to a prompt reply. 盼迅速答复。 </li>\n<li>It is an excellent novel in every way. 无论从哪方面来看，这都是一本优秀的小说。 </li>\n<li>It is clear that the cat has eaten it! 很明显，是猫偷吃的! </li>\n<li>Nothing but death can part the couple. 除了死之外，什么也拆不散这一对。 </li>\n<li>Now she looks pale as if she were ill. 现在她脸色难看，好像病了一样。 </li>\n<li>She was injured badly in the accident. 她在这次意外中受到重伤。 </li>\n<li>The secret was spread among the crowd. 秘密在人群当中传播开来。 </li>\n<li>The two brothers look very much alike. 这兄弟俩看上去很相像。 </li>\n<li>Their interest is listening to others. 他们的兴趣是听别人说话。 </li>\n<li>There was a notice in the supermarket. 超市里有一个布告。 </li>\n<li>This one cannot compare with that one. 这个与那个无法比较。 </li>\n<li>To know everything is to know nothing. 样样通，样样松。 </li>\n<li>To tell the truth, I don’t like disco. 说实话，我不喜欢迪斯科。 </li>\n<li>True and False have opposite meanings. 真与假含义完全相反。 </li>\n<li>What’s the point of going to college? 上大学有何用? </li>\n<li>Where can we make the insurance claim? 我们可以在哪里提出保险赔偿?这个无法与那个比较。 </li>\n<li>Why don’t I pick you up at your house? 为什么不让我去接你呢? </li>\n<li>Why don’t you attend an aerobic class? 你为什么不去参加一个有氧健身班呢? </li>\n<li>You can kill two birds with one stone. 一举两得。 </li>\n<li>You can’t go in no matter who you are. 不管你是谁，都不能进去。 </li>\n<li>You should learn these words by heart. 你应该把这些词背熟。 </li>\n<li>Could I have those two tickets, please? 这两张票给我行不行? </li>\n<li>He has to take care of his sick mother. 他得照顾他生病的母亲。 </li>\n<li>He hired a workman to repair the fence. 他雇用了一个工人修理围墙。 </li>\n<li>I can’t make this machine run properly. 我无法使这部机器正常运转。 </li>\n<li>I don’t know if I’ll have the patience. 我不知道我有没有耐心。 </li>\n<li>I don’t like what you are saying. 我不喜欢你说的话。 </li>\n<li>I fell in love with her at first sight. 我第一眼见到她就爱上了她。 </li>\n<li>I have just heard from my sister, Mary. 我刚收到我妹妹玛丽的一封信。 </li>\n<li>If you would only try, you could do it. 只要你肯尝试，你一定能做这件事。 </li>\n<li>It is no use learning without thinking. 学而不思则惘。 </li>\n<li>It was a lazy, breezy autumn afternoon. 这是一个懒散的，起风的秋日下午。 </li>\n<li>Jack is the strongest boy in the class. 杰克是全班最强壮的男孩。 </li>\n<li>Please fetch a chair from another room. 请到别的房间取一把椅子。 </li>\n<li>The doctor began to operate on the boy. 医生开始给那个男孩动手术。 </li>\n<li>The doctor is taking my blood pressure. 医生正给我量血压。 </li>\n<li>The machines will not operate properly. 那些机器不能正常运转。 </li>\n<li>The students declared against cheating. 学生们表示反对作弊。 </li>\n<li>There is hope so long as he is with us. 只要他在就有希望。 </li>\n<li>He talks as if he were the head of the office. 他说话的口气像办公室主任似的。 </li>\n<li>His cake is three times bigger than mine. 他的蛋糕比我的大三倍。 </li>\n<li>I am looking forward to your early reply. 希望早日得到你的答复。 </li>\n<li>I could say nothing but that I was sorry. 我除了说“对不起”之外，什么也说不出来。 </li>\n<li>I don’t know how to express my gratitude. 我不知道怎样来表达我的感激之情。 </li>\n<li>I have to catch a plane. Could you hurry? 我要赶飞机,你能快点吗? </li>\n<li>I haven’t heard from her for a long time. 我好久没有她的消息了。 </li>\n<li>I would like to wash the clothes for you. 我愿意帮你洗这些衣服。 </li>\n<li>Let me see your driver’s license, please. 请让我看看你的驾驶执照。 </li>\n<li>She goes to work every day except Sunday. 除星期天外，他每天去上班。 </li>\n<li>Take a seat please, make yourself at home. 请坐，随便一点。 </li>\n<li>The damage was caused by external forces. 损害是由外力引起的。 </li>\n<li>The doctor advised me to give up smoking. 医生建议我戒烟。 </li>\n<li>The flowers make the room more beautiful. 花使房间变得更加美了。 </li>\n<li>There is a good restaurant on the street. 那条大街上有一个很好的餐馆。 </li>\n<li>They covered 120 miles in a single night. 他们仅一夜就走了120 英里路。 </li>\n<li>Try to look on the bright side of things. 尽量从好的方面看。 </li>\n<li>What’s your plan for the summer vacation? 你暑假打算干什么? </li>\n<li>You may pick whichever one you like best. 你可以挑你最喜欢的。 </li>\n<li>You’re welcome to stay with us next time. 欢迎您下次再光临我们的饭店。 </li>\n<li>There was a murder in London yesterday. 昨天伦敦发生了一起谋杀案。 </li>\n<li>They stared at the huge tiger with awe. 他们敬畏地看着那头巨虎。 </li>\n<li>He never misses a chance to see a movie. 他从不错过看电影的机会。 </li>\n<li>I cannot put up with my noisy roommates. 我受不了我那些吵闹的室友了。 </li>\n<li>I will be back by the end of next month. 我下个月底会回来。 </li>\n<li>I’m good at freestyle and breast stroke. 我擅长自由泳和蛙泳。 </li>\n<li>It was your turn to wash them yesterday. 昨天轮到你把它们洗干净。 </li>\n<li>Let’s go out to have a dinner, shall we? 咱们出去吃饭吧，好吗? </li>\n<li>Please push the ladder against the wall. 请把梯子靠在墙壁上。 </li>\n<li>She is standing in the front of the bus. 她站在公共汽车的前部。 </li>\n<li>The doctor asked me to watch what I eat. 医生要我注意饮食。 </li>\n<li>The grass is moist early in the morning. 清晨的草地湿漉漉的。 </li>\n<li>The test finished. We began our holiday. 考试结束了，我们开始放假。 </li>\n<li>This question is too complicated for me. 这个问题对我说来太复杂了。 </li>\n<li>Tony speaks English and he plays tennis. 托尼会说英语，打网球。 </li>\n<li>What is worth doing is worth doing well. 只要你觉得某事值得去做，就一定要把它做好。 </li>\n<li>Would you like to go to a party with me? 你想不想和我一起去参加一个聚会? </li>\n<li>All at once, a rabbit came out of a hole. 突然，一只兔子从一个洞中跑了出来。 </li>\n<li>All characters in the book are imaginary. 书中所有的人物都是虚构的。 </li>\n<li>Do you feel like going to that new disco? 你想去那个新开的迪厅 </li>\n<li>Ducks know how to swim when they are born. 鸭子天生会游泳 </li>\n<li>He spent most of his life gathering money. 他一生大部分时间用来积聚钱财。 </li>\n<li>He usually stays at home with his pet dog. 他通常跟他的爱犬待在家里。 </li>\n<li>How peaceful and beautiful the country is! 多么平静美丽的国家呀! </li>\n<li>I am told that you dance wonderfully well. 我听说你的舞跳得特棒。 </li>\n<li>I have had several conversations with him. 我已经和他谈过几次了。 </li>\n<li>It is the best film that I have ever seen. 这是我所看过的最好的电影。 </li>\n<li>It’s only a party in honor of my birthday. 这只是为了庆祝我的生日而举行的晚会。 </li>\n<li>Learning English is like building a house. 学英语象盖房子。 </li>\n<li>Listening with your heart is good for you. 专心聆听别人说话对你有好处。 </li>\n<li>My grandpa died of hunger in the old days. 我爷爷在旧社会死于饥饿。 </li>\n<li>She feared staying alone in the farmhouse. 她害怕一个人留在农舍里。 </li>\n<li>She guided the tourists around the castle. 她引导旅游者参观了这座城堡。 </li>\n<li>She runs everyday in order to lose weight. 她每天都跑步是为了减肥。 </li>\n<li>She sang perfectly in the hall last night. 她昨晚在大厅唱得非常好。 </li>\n<li>Somebody is always complaining to others. 有人总是向别人抱怨。 </li>\n<li>They don’t often have a bad day this year. 他们今年的运气还不错。 </li>\n<li>We regard the matter as nothing important. 我们认为这件事情不重要。 </li>\n<li>We’ll take our holiday sometime in August. 我们将在八月份的某个时候休假。 </li>\n<li>Could you direct me to the station, please? 请问到车站怎么走? </li>\n<li>Have you cleared your luggage with customs? 你的行李通关了吗? </li>\n<li>He bothered me with a great many questions. 他对我提了一大堆问题，真烦! </li>\n<li>He does exercises every day in the morning. 他每天早上锻练身体。 </li>\n<li>How do I control myself? I can’t calm down. 我怎能控制我自己?我无法冷静下来。 </li>\n<li>I dig songs and I like pop music very much. 我特别喜欢歌曲和流行音乐。 </li>\n<li>I’d like to cash a traveler’s check please. 我想兑换旅行支票。 </li>\n<li>I‘d like to pick sea shells this afternoon. 今天下午我想去捡贝壳。 </li>\n<li>It’s odd that they didn’t reply our letter. 他们没有给我们回信，这真奇怪。 </li>\n<li>John seldom gets together with his friends. 约翰很少与朋友聚在一起。 </li>\n<li>Many people have been out of work recently. 最近有许多人失业。 </li>\n<li>Please give my best regards to your family. 请代我向你们全家致以最诚挚的问候。 </li>\n<li>Some people have compared books to friends. 有些人把书比作朋友。 </li>\n<li>The bat together with the balls was stolen. 球拍和球全被偷了。 </li>\n<li>The color of her dress suits her very well. 她衣服的颜色很适合她。 </li>\n<li>The days get longer and the nights get shorter. 白天变长了，黑夜变短了。 </li>\n<li>The dress doesn’t fit her. She is too thin. 这件衣服不适合她，她太瘦了。 </li>\n<li>The examination put a lot of stress on him. 那次考试给了他很大的压力。 </li>\n<li>The mother sat the child at a little table. 母亲安排孩子坐到小桌旁。 </li>\n<li>There is some difference between the twins. 这对双胞胎有点儿不一样。 </li>\n<li>They insisted on staying rather than going. 他们坚持留下来，而不愿意走 </li>\n<li>Trust me, the game is really worth playing. 相信我，这游戏确实值得一玩。 </li>\n<li>Unlike her friends, she never gave up hope. 与她的朋友的不同之处是，她从不放弃希望。 </li>\n<li>Well done! You are always doing a good job! 干得不错!你总是干得很出色! </li>\n<li>We’re planning a tour to Italy this summer. 我们计划今年夏天到意大利去旅行。 </li>\n<li>Were there any letters for me this morning? 今天早上有我的信吗? </li>\n<li>Why isn’t Mrs. Lee‘s cat catching the mice? 李太太的猫为何不在抓这些老鼠呢? </li>\n<li>Your English is improving little by little. 你的英语正在渐渐提高。 </li>\n<li>Could you tell me where I can wash my hands? 请问洗手间怎么走? </li>\n<li>Do you have any plans for the long weekend? 有办法打发这个漫长的周末吗? </li>\n<li>He decided to bring a suit against his boss. 他决定起诉他的老板。 </li>\n<li>He devoted his life to the study of science. 他把毕生献给科学研究。 </li>\n<li>He had to choose between death and dishonor. 他不得不在死亡和耻辱之间选择。 </li>\n<li>His previous attempts had been unsuccessful. 他以前的尝试没有成功。 </li>\n<li>I determined that nothing should be changed. 我决定什么都不改变。 </li>\n<li>I don’t think it will lead to a good result. 我认为这事不会有什么好结果。 </li>\n<li>I have 4 books and 2 magazines to check out. 我有4 本书和2 本杂志要借。 </li>\n<li>I think I’ve filled in everything correctly. 我想各项都填对了。 </li>\n<li>I’m not sure whether I have locked the door. 我没把握是否锁了门。 </li>\n<li>It took him a little time to fix that watch. 他很快就把表修理好了。 </li>\n<li>My father is at home looking for the ticket. 我爸爸正在家里找票呢! </li>\n<li>Not until last week did I get a work permit. 直到上周我才拿到工作许可证 </li>\n<li>She intends to make teaching her profession. 她想以教书为职业。 </li>\n<li>The letter “x” stands for an unknown number. 字母x 代表未知数。 </li>\n<li>The sight of the dead body scared him stiff. 看到尸体把他吓僵了。 </li>\n<li>There are lots of huge buildings in Beijing. 在北京有许多高大的建筑物。 </li>\n<li>There is an interesting film on Channel one. 在一频道有一部有趣的电影。 </li>\n<li>They plan to immigrate to Finland next year. 他们计划明年移居芬兰。 </li>\n<li>We enjoyed driving along the new expressway. 我们喜欢沿着新建的高速公路开车。 </li>\n<li>We need to cooperate perfectly to win the game. 要想赢得比赛，我们需要密切配合。 </li>\n<li>We need more than listening. We need action! 我们需要的不光是听得进意见，我们要的是行动。 </li>\n<li>Yes. I wouldn’t go home early if I were you. 是的，如果我是你，我不会早回家。 </li>\n<li>Your answer is satisfying. I feel satisfied. 你的答案是令人满意的。我感到很满意。 </li>\n<li>Betty and Susan are talking on the telephone. 贝蒂和苏珊正在通电话。 </li>\n<li>Great efforts ensure the success of our work. 巨大的努力确保了我们工作的成功。 </li>\n<li>He has tasted the sweets and bitters of life. 他已尝遍了人生的甜酸苦辣。 </li>\n<li>He said he was educated in the United States. 他说他是在美国受的教育。 </li>\n<li>How do you like our English literature Prof? 你觉得我们的英国文学课的教授怎么样? </li>\n<li>I am looking forward to your visit next week. 我期待着你下周来访。 </li>\n<li>I feel I am the happiest person in the world. 我觉得自己是世界上最幸福的人了。 </li>\n<li>I had to sit up all night writing the report. 我不得不熬通宵写报告。 </li>\n<li>I hope we can see each other again some time. 希望还能有相见的机会。 </li>\n<li>I saw him playing football on the playground. 我看见他在操场上踢足球。 </li>\n<li>It is tomorrow that they will have a meeting. 就在明天(而不是在别的某一天)他们要开会。</li>\n<li>Let me tell you some details about clearance. 让我告诉你一些通关的细节。 </li>\n<li>The brain needs a continuous supply of blood. 大脑需要连续不断地供血。 </li>\n<li>The doctor’s words made him feel comfortable. 医生的话让他感觉很舒服。 </li>\n<li>The truth is quite other than what you think. 事实真相和你所想的完全不同。 </li>\n<li>They stopped talking when their boss came in. 当老板进来的时候；他们停止了交谈。 </li>\n<li>They were glad of the examination being over. 他们为考试结束了而高兴。 </li>\n<li>This is by far the largest cake in the world. 这是目前世界上最大的蛋糕了。 </li>\n<li>Whichever you choose, you won’t be satisfied. 不论你选择哪一个，你都不会满意。 </li>\n<li>Will you connect this wire to the television ? 你把这根电线和电视机连上好吗? </li>\n<li>His words are strongly impressed on my memory. 他的话深深地铭记在我的心头。 </li>\n<li>Is this the fight bus for the Capital Library? 这辆车到首都图书馆吗? </li>\n<li>One third of this area is covered with forest. 这一地区三分之一的地方都是森林。 </li>\n<li>They are arguing over who should pay the bill. 他们为谁应该付款而争论不休。 </li>\n<li>Wait a moment, I’ll be with you in an instant. 等一下，我立刻就来。 </li>\n<li>You’ll save time not waiting for the elevator. 你可以节省等电梯的时间。 </li>\n<li>A clear conscience laughs at false accusation. 只要问心无愧，无端的指责可以一笑置之。 </li>\n<li>I have a headache, and she has a stomachache. 我头疼，她胃疼。 </li>\n<li>He glared at Bill, ready to teach him a lesson. 他怒视着比尔，准备教训他一顿。 </li>\n<li>I assure you that you will feel no pain at all. 我保证你根本不会觉得疼的。 </li>\n<li>I can’t afford to go to a restaurant every day. 每天都去餐馆吃饭，我真是支付不起。 </li>\n<li>I left at 6:00 so that I could catch the train. 我六点钟出门，以便赶上火车。 </li>\n<li>I’m afraid I have some rather bad news for you. 我恐怕有些很坏的消息要告诉你。 </li>\n<li>Learn to say the fight thing at the fight time. 学会在适当的时候说适当的话。 </li>\n<li>No wonder you can‘t sleep when you eat so much.  你吃这么多难怪睡不着。 </li>\n<li>Please ask her to call me back when she’s back. 她回来时请让她给我回个电话。 </li>\n<li>There are a lot of people in the swimming pool. 游泳池里挤满了人。 </li>\n<li>They have to work hard to support their family. 他们必须努力工作来支持他们的家。 </li>\n<li>This way, he can kill two birds with one stone. 这样他就能两全其美。 </li>\n<li>We are all taking medicine against the disease. 我们都服药治疗疾病。 </li>\n<li>Would you please go to a dancing party with me? 请你跟我一起去参加一个舞会好吗? </li>\n<li>He usually drops in at my place on his way home. 他常常在回家的路上顺便来看看我。 </li>\n<li>His vanity was hurt by their talking so frankly. 他们坦率的谈话伤害了他的虚荣心。 </li>\n<li>How would you go to Beijing, by air or by train? 你怎样去北京，是乘飞机还是坐火车? </li>\n<li>I cannot express how glad I am to hear from him. 我无法表达我接到他的信时有多高兴。 </li>\n<li>If Tom cannot keep his promise, he’ll lose face. 如果汤姆不能信守诺言，他就会丢面子。</li>\n<li>I’ll still love her even if she doesn’t love me. 即使她不爱我，我还仍然爱她。 </li>\n<li>I received an invitation, but I did not accept it. 我收到一份请帖，但没有接受。 </li>\n<li>If I were you, I would not be bothered by English. 如果我是你，就不会为英语烦恼了。 </li>\n<li>If you don’t work, you will fail to pass the exam. 如果你不学习，你考试就会不及格。 </li>\n<li>I’m thinking of hanging the lamp from the ceiling. 我打算把灯吊在天花板上。 </li>\n<li>It is more important to be healthy than bony slim. 健康永远比皮包骨头好。 </li>\n<li>Long ago, people believed that the world was flat. 很久以前人们相信地球是平的。 </li>\n<li>Old tunes are sweetest and old friends are surest. 老调最甜美，老友最可靠。 </li>\n<li>She makes it clear that she doesn’t like swimming. 她明确地表示她不喜欢游泳。 </li>\n<li>The constitution guards the liberty of the people. 宪法保护人民的自由。 </li>\n<li>The doctor examined the soldier’s wound carefully. 大夫仔细检查了战士的伤口。 </li>\n<li>The harder I study, the better my English will be. 我越努力，我的英语就会越好。 </li>\n<li>The sun was shining and the sky was crystal clear. 阳光闪烁，天空湛蓝。 </li>\n<li>This cellar room is very damp in the rainy season. 这间地下室在雨季非常潮湿。 </li>\n<li>Computers are becoming a part of our everyday life. 电子计算机正渐渐成为我们日常生活的一部分。 </li>\n<li>Every man is fool sometimes, but none at all times. 每个人都有愚蠢的时候，但是没有一个人永远愚蠢。 </li>\n<li>He dreamed of traveling to remote South Sea Islands. 他曾梦想到遥远的南海诸岛去旅游。 </li>\n<li>How can I climb up that wall! I wish I were a bird! 我怎么能够爬得上那堵墙?我要是一只鸟就好了! </li>\n<li>However, Susan has not really made up her mind yet. 然而，苏珊却还没有决定。 </li>\n<li>I really think a little exercise would do you good. 我真的觉得做点运动对你有好处。 </li>\n<li>I will never forget the days that I spent with you. 我永远都不会忘记和你一起度过的日子。 </li>\n<li>we got a bad headache, and my nose is running. 我头痛得厉害，还流鼻涕。 </li>\n<li>Many young girls dream of being a fashion model. 许多年轻女孩梦想成为时装模特儿。 </li>\n<li>Most of the earth’s surface is covered by water. 大部分的地球表面被水覆盖着。 </li>\n<li>Somebody’s knocking at the door. I’ll answer it. 有人在敲门，我去开。 </li>\n<li>The number 13 bus will take you to the hospital.13. 路车会带你去医院。 </li>\n<li>They celebrated his birthday with a dance party. 也们举办舞会来祝贺他的生日。 </li>\n<li>They misplaced this book under other categories. 他们把它错放到另一个类别去了。 </li>\n<li>They played a shameful part in the whole affair. 他们在这一事件中扮演了可耻的角色。 </li>\n<li>As a matter of fact, he was pretending to be ill. 实际上，他是在装病。 </li>\n<li>I will speak against anything I know to be wrong. 我会对所有我认为不对的事情直言不讳。</li>\n<li>In spite of the heavy rain, she went to the shop. 尽管下着大雨，她还是去了商店。 </li>\n<li>No matter what happened, he would not say a word. 不管发生什么事，他也不会说一句话。 </li>\n<li>No one knows the location of the hidden treasure. 谁也不知道藏宝地点在哪里。 </li>\n<li>The old lady enjoys a quiet life with her family. 老太太和她的家人安享宁静的生活。 </li>\n<li>The population of the city is close to a million. 这个城市的人口接近一百万。 </li>\n<li>We are prohibited from smoking on school grounds. 我们被禁止在校园内抽烟。 </li>\n<li>Growth, however, brings new problems and concerns. 不过，发展也带来了新的问题和顾虑。 </li>\n<li>He appears to be your friend but I doubt if he is. 他看上去像是你的朋友，但我怀疑他是否是真心的。 </li>\n<li>I am so full that I would burst with another bite. 我吃得如此之饱，我感觉我再吃一口肚子就要胀破了。 </li>\n<li>I have two cats. One is white, the other is black. 我有两只猫，一只是白猫，另一只是黑猫。 </li>\n<li>I’m sorry, these 2 books are 3 days overdue. 小姐，对不起，这两本书已经过期3 天了。 </li>\n<li>Jalu has forgotten falling off his bicycle. 詹露早忘掉他从白行车上摔下来这件事了 </li>\n<li>Manners are quite different from country to country. 各国的礼仪各不相同。 </li>\n<li>Not only did I know her, but I was her best friend. 我不仅认识她，还是她最好的朋友。 </li>\n<li>The best-known movie awards are the Academy Awards. 最著名的电影奖是奥斯卡金像奖。 </li>\n<li>We’ve got to do something about the neighbor’s dog! 我们得对邻居的狗采取点行动了! </li>\n<li>Will you come and join us for dinner on Sunday? 星期天来和我们共进晚餐好吗? </li>\n<li>Do you think people are a company’s greatest wealth? 你认为人是公司最大的财富吗? </li>\n<li>He thinks himself somebody, but we think him nobody. 他自以为是重要人物，但我们觉得他什么也不是。 </li>\n<li>I believe I haven’t reached the summit of my career. 我相信我还没有达到事业的巅峰。 </li>\n<li>It is no matter whether you get there early or late. 你早到晚到都没有关系。 </li>\n<li>It’s against the rules to handle the ball in soccer. 在足球中以手触球就是犯规。 </li>\n<li>The nurse assisted the doctor in the operating room. 护士在手术室协助医生动手术。 </li>\n<li>What I do on my own time is nobody else’s business. 我在自己的时间里干什么根本不关别人的事。 </li>\n<li>What I want to do is different from those of others. 我想做的与别人不同。 </li>\n<li>You forget to write down the date of your departure. 您忘了写离店日期了。 </li>\n<li>“I wish I’d known about that rule earlier”, she said. “我要是早点知道这个规矩就好了!”她说。 </li>\n<li>Could you tell me your secret for a long, happy life? 你能告诉我长时间地过着快乐的生活的秘诀吗? </li>\n<li>He holds a position of great responsibility upon him. 他担任着一个责任重大的职务。 </li>\n<li>It is said he has secret love affairs with two women! 据说他背地里和两个女人有关系！ </li>\n<li>Number 13 buses run much more frequently, don’t they? 13 路车跑得更勤，是不是? </li>\n<li>They are only too delighted to accept the invitation. 他们非常乐意接受邀请。 </li>\n<li>We are going to have the final examination next week. 我们下周举行期末考试。 </li>\n<li>And now medical care helps to keep people alive longer. 现在的医疗保健使得人们活得更长。 </li>\n<li>Do you think you’ll be able to go to sleep fight away? 你认为你马上就能睡着吗? </li>\n<li>I am in charge of the company when the manager is out. 经理不在时山我来管理公司。 </li>\n<li>I borrowed a notebook from Tom and I lent it to Marry. 我从汤姆那儿借了一本笔记本，我又把它借给玛丽了。 </li>\n<li>I’m doing some washing and John is cooking dinner. 我正在洗衣服，约翰在做晚饭。 </li>\n<li>Were there any exciting incidents during your journey? 你们在旅行中有没有什么令人激动的事情? </li>\n<li>As far as policy is concerned, I have to say something. 谈到政策，我得说几句。 </li>\n<li>Could you tell me what the maximum weight allowance is? 您能告诉我行李的最大重量限额是多少吗? </li>\n<li>He came out of the library, a large book under his arm. 他夹着本厚书，走出了图书馆。 </li>\n<li>The brothers differ from each other in their interests. 这几个兄弟各有所好。 </li>\n<li>Although we can’t see these atoms, they really do exist. 虽然我们看不见原子，但它们的确存在。 </li>\n<li>I am familiar with the casual atmosphere in the company. 我对公司中这种放松的氛围感到很熟悉。 </li>\n<li>Most people eat, write, and work with their fight hands. 大多数人吃饭，写字，工作都用右手。 </li>\n<li>Only by working hard can we succeed in doing everything. 只有努力，才能成功 </li>\n<li>Take it easy, you will be all right in a couple of days. 别担心，你两天之内就会痊愈的。 </li>\n<li>The Beatles represented part of the spirit of their age. 甲壳虫乐队代表了他们时代的部分精神。 </li>\n<li>There being no one to help me, I had to do it all alone. 因为没有人帮助我，我不得不独立完成这项工作。 </li>\n<li>How much cloth does it take to make a skirt for the girl? 女孩做一条裙子要用多少布? </li>\n<li>With all these mouths to feed, he didn‘t know what to do. 由于有那么多人要供养，他不知道怎么办才好。 </li>\n<li>I forgot to prepare the speech I‘m supposed to give today. 我忘了准备今天的我该做的演讲了。 </li>\n<li>It’s supposed to start at 6:30 sharp, but I doubt it will. 应该是六点半整的，但是我觉得够呛。 </li>\n<li>On behalf of my company, I would like to welcome you here. 我代表我们公司欢迎你来这里。 </li>\n<li>She’s been quite different since coming back from America. 从美国回来之后，她变化很大。 </li>\n<li>Today it is common that women and girls make up in public. 今天，在公共场所看到妇女和姑娘化妆打扮是很普遍的事。 </li>\n<li>I have to transfer to No. ll bus, but where is the bus stop? 我需要换乘11 路公共汽车，但是汽车站在哪儿? </li>\n<li>I supposed him to be very clever but he was in fact a fool. 我以为他很聪明，其实他是个蠢货。 </li>\n<li>The rabbit ran to the woods and did not come back any more. 兔子跑进了森林再也没有出来了。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjo6iq73m000051vhjukbkyk4","tag_id":"cjo6iq73t000251vhucy17dcg","_id":"cjo6iq73x000751vhwzil9zdn"},{"post_id":"cjo6iq73r000151vh0nufqbdz","tag_id":"cjo6iq73x000651vhvmf2zr0z","_id":"cjo6iq73y000951vhx8z3by3f"},{"post_id":"cjo6iq73u000351vhoe5439ji","tag_id":"cjo6iq73y000851vhehvxwsk0","_id":"cjo6iq740000b51vh7awuc8qz"},{"post_id":"cjo6iq73v000451vhe4veebvl","tag_id":"cjo6iq73y000851vhehvxwsk0","_id":"cjo6iq740000d51vh0ulfkvx2"},{"post_id":"cjo6iq73w000551vhowal07mq","tag_id":"cjo6iq740000c51vh2zdme4c5","_id":"cjo6iq740000e51vhf7e63lbm"},{"post_id":"cjo6iq742000f51vhh3zbtn9b","tag_id":"cjo6iq743000h51vhlbq4irp9","_id":"cjo6iq744000i51vhstekohsp"},{"post_id":"cjo6iq747000k51vh0khvfx9b","tag_id":"cjo6iq748000l51vhgy9abe3m","_id":"cjo6iq748000m51vhhpd6sx9g"},{"post_id":"cjo6iq749000n51vhba593exr","tag_id":"cjo6iq74c000o51vhzcxzkt5u","_id":"cjo6iq74c000p51vhg1mu2ott"}],"Tag":[{"name":"awk","_id":"cjo6iq73t000251vhucy17dcg"},{"name":"c++","_id":"cjo6iq73x000651vhvmf2zr0z"},{"name":"markdown","_id":"cjo6iq73y000851vhehvxwsk0"},{"name":"vim","_id":"cjo6iq740000c51vh2zdme4c5"},{"name":"game","_id":"cjo6iq743000h51vhlbq4irp9"},{"name":"functional","_id":"cjo6iq748000l51vhgy9abe3m"},{"name":"english","_id":"cjo6iq74c000o51vhzcxzkt5u"}]}}